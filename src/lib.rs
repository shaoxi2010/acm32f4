#![doc = "Peripheral access API for ACM32F4 microcontrollers (generated using svd2rust v0.24.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.24.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic {
    use core::marker;
    #[doc = " Raw register type"]
    pub trait RegisterSpec {
        #[doc = " Raw register type (`u8`, `u16`, `u32`, ...)."]
        type Ux: Copy;
    }
    #[doc = " Trait implemented by readable registers to enable the `read` method."]
    #[doc = ""]
    #[doc = " Registers marked with `Writable` can be also `modify`'ed."]
    pub trait Readable: RegisterSpec {
        #[doc = " Result from a call to `read` and argument to `modify`."]
        type Reader: From<R<Self>> + core::ops::Deref<Target = R<Self>>;
    }
    #[doc = " Trait implemented by writeable registers."]
    #[doc = ""]
    #[doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
    #[doc = ""]
    #[doc = " Registers marked with `Readable` can be also `modify`'ed."]
    pub trait Writable: RegisterSpec {
        #[doc = " Writer type argument to `write`, et al."]
        type Writer: From<W<Self>> + core::ops::DerefMut<Target = W<Self>>;
    }
    #[doc = " Reset value of the register."]
    #[doc = ""]
    #[doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
    #[doc = " register by using the `reset` method."]
    pub trait Resettable: RegisterSpec {
        #[doc = " Reset value of the register."]
        fn reset_value() -> Self::Ux;
    }
    #[doc = " This structure provides volatile access to registers."]
    #[repr(transparent)]
    pub struct Reg<REG: RegisterSpec> {
        register: vcell::VolatileCell<REG::Ux>,
        _marker: marker::PhantomData<REG>,
    }
    unsafe impl<REG: RegisterSpec> Send for Reg<REG> where REG::Ux: Send {}
    impl<REG: RegisterSpec> Reg<REG> {
        #[doc = " Returns the underlying memory address of register."]
        #[doc = ""]
        #[doc = " ```ignore"]
        #[doc = " let reg_ptr = periph.reg.as_ptr();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn as_ptr(&self) -> *mut REG::Ux {
            self.register.as_ptr()
        }
    }
    impl<REG: Readable> Reg<REG> {
        #[doc = " Reads the contents of a `Readable` register."]
        #[doc = ""]
        #[doc = " You can read the raw contents of a register by using `bits`:"]
        #[doc = " ```ignore"]
        #[doc = " let bits = periph.reg.read().bits();"]
        #[doc = " ```"]
        #[doc = " or get the content of a particular field of a register:"]
        #[doc = " ```ignore"]
        #[doc = " let reader = periph.reg.read();"]
        #[doc = " let bits = reader.field1().bits();"]
        #[doc = " let flag = reader.field2().bit_is_set();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn read(&self) -> REG::Reader {
            REG::Reader::from(R {
                bits: self.register.get(),
                _reg: marker::PhantomData,
            })
        }
    }
    impl<REG: Resettable + Writable> Reg<REG> {
        #[doc = " Writes the reset value to `Writable` register."]
        #[doc = ""]
        #[doc = " Resets the register to its initial state."]
        #[inline(always)]
        pub fn reset(&self) {
            self.register.set(REG::reset_value())
        }
        #[doc = " Writes bits to a `Writable` register."]
        #[doc = ""]
        #[doc = " You can write raw bits into a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
        #[doc = " ```"]
        #[doc = " or write only the fields you need:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " In the latter case, other fields will be set to their reset value."]
        #[inline(always)]
        pub fn write<F>(&self, f: F)
        where
            F: FnOnce(&mut REG::Writer) -> &mut W<REG>,
        {
            self.register.set(
                f(&mut REG::Writer::from(W {
                    bits: REG::reset_value(),
                    _reg: marker::PhantomData,
                }))
                .bits,
            );
        }
    }
    impl<REG: Writable> Reg<REG>
    where
        REG::Ux: Default,
    {
        #[doc = " Writes 0 to a `Writable` register."]
        #[doc = ""]
        #[doc = " Similar to `write`, but unused bits will contain 0."]
        #[inline(always)]
        pub unsafe fn write_with_zero<F>(&self, f: F)
        where
            F: FnOnce(&mut REG::Writer) -> &mut W<REG>,
        {
            self.register.set(
                (*f(&mut REG::Writer::from(W {
                    bits: REG::Ux::default(),
                    _reg: marker::PhantomData,
                })))
                .bits,
            );
        }
    }
    impl<REG: Readable + Writable> Reg<REG> {
        #[doc = " Modifies the contents of the register by reading and then writing it."]
        #[doc = ""]
        #[doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|r, w| unsafe { w.bits("]
        #[doc = "    r.bits() | 3"]
        #[doc = " ) });"]
        #[doc = " ```"]
        #[doc = " or"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|_, w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " Other fields will have the value they had before the call to `modify`."]
        #[inline(always)]
        pub fn modify<F>(&self, f: F)
        where
            for<'w> F: FnOnce(&REG::Reader, &'w mut REG::Writer) -> &'w mut W<REG>,
        {
            let bits = self.register.get();
            self.register.set(
                f(
                    &REG::Reader::from(R {
                        bits,
                        _reg: marker::PhantomData,
                    }),
                    &mut REG::Writer::from(W {
                        bits,
                        _reg: marker::PhantomData,
                    }),
                )
                .bits,
            );
        }
    }
    #[doc = " Register reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
    #[doc = " method."]
    pub struct R<REG: RegisterSpec + ?Sized> {
        pub(crate) bits: REG::Ux,
        _reg: marker::PhantomData<REG>,
    }
    impl<REG: RegisterSpec> R<REG> {
        #[doc = " Reads raw bits from register."]
        #[inline(always)]
        pub fn bits(&self) -> REG::Ux {
            self.bits
        }
    }
    impl<REG: RegisterSpec, FI> PartialEq<FI> for R<REG>
    where
        REG::Ux: PartialEq,
        FI: Copy + Into<REG::Ux>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    #[doc = " Register writer."]
    #[doc = ""]
    #[doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."]
    pub struct W<REG: RegisterSpec + ?Sized> {
        #[doc = "Writable bits"]
        pub(crate) bits: REG::Ux,
        _reg: marker::PhantomData<REG>,
    }
    impl<REG: RegisterSpec> W<REG> {
        #[doc = " Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: REG::Ux) -> &mut Self {
            self.bits = bits;
            self
        }
    }
    #[doc(hidden)]
    pub struct FieldReaderRaw<U, T> {
        pub(crate) bits: U,
        _reg: marker::PhantomData<T>,
    }
    impl<U, FI> FieldReaderRaw<U, FI>
    where
        U: Copy,
    {
        #[doc = " Creates a new instance of the reader."]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(bits: U) -> Self {
            Self {
                bits,
                _reg: marker::PhantomData,
            }
        }
    }
    #[doc(hidden)]
    pub struct BitReaderRaw<T> {
        pub(crate) bits: bool,
        _reg: marker::PhantomData<T>,
    }
    impl<FI> BitReaderRaw<FI> {
        #[doc = " Creates a new instance of the reader."]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(bits: bool) -> Self {
            Self {
                bits,
                _reg: marker::PhantomData,
            }
        }
    }
    #[doc = " Field reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of fields."]
    pub type FieldReader<U, FI> = FieldReaderRaw<U, FI>;
    #[doc = " Bit-wise field reader"]
    pub type BitReader<FI> = BitReaderRaw<FI>;
    impl<U, FI> FieldReader<U, FI>
    where
        U: Copy,
    {
        #[doc = " Reads raw bits from field."]
        #[inline(always)]
        pub fn bits(&self) -> U {
            self.bits
        }
    }
    impl<U, FI> PartialEq<FI> for FieldReader<U, FI>
    where
        U: PartialEq,
        FI: Copy + Into<U>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    impl<FI> PartialEq<FI> for BitReader<FI>
    where
        FI: Copy + Into<bool>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    impl<FI> BitReader<FI> {
        #[doc = " Value of the field as raw bits."]
        #[inline(always)]
        pub fn bit(&self) -> bool {
            self.bits
        }
        #[doc = " Returns `true` if the bit is clear (0)."]
        #[inline(always)]
        pub fn bit_is_clear(&self) -> bool {
            !self.bit()
        }
        #[doc = " Returns `true` if the bit is set (1)."]
        #[inline(always)]
        pub fn bit_is_set(&self) -> bool {
            self.bit()
        }
    }
    #[doc(hidden)]
    pub struct Safe;
    #[doc(hidden)]
    pub struct Unsafe;
    #[doc(hidden)]
    pub struct FieldWriterRaw<'a, U, REG, N, FI, Safety, const WI: u8, const O: u8>
    where
        REG: Writable + RegisterSpec<Ux = U>,
        FI: Into<N>,
    {
        pub(crate) w: &'a mut REG::Writer,
        _field: marker::PhantomData<(N, FI, Safety)>,
    }
    impl<'a, U, REG, N, FI, Safety, const WI: u8, const O: u8>
        FieldWriterRaw<'a, U, REG, N, FI, Safety, WI, O>
    where
        REG: Writable + RegisterSpec<Ux = U>,
        FI: Into<N>,
    {
        #[doc = " Creates a new instance of the writer"]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(w: &'a mut REG::Writer) -> Self {
            Self {
                w,
                _field: marker::PhantomData,
            }
        }
    }
    #[doc(hidden)]
    pub struct BitWriterRaw<'a, U, REG, FI, M, const O: u8>
    where
        REG: Writable + RegisterSpec<Ux = U>,
        FI: Into<bool>,
    {
        pub(crate) w: &'a mut REG::Writer,
        _field: marker::PhantomData<(FI, M)>,
    }
    impl<'a, U, REG, FI, M, const O: u8> BitWriterRaw<'a, U, REG, FI, M, O>
    where
        REG: Writable + RegisterSpec<Ux = U>,
        FI: Into<bool>,
    {
        #[doc = " Creates a new instance of the writer"]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(w: &'a mut REG::Writer) -> Self {
            Self {
                w,
                _field: marker::PhantomData,
            }
        }
    }
    #[doc = " Write field Proxy with unsafe `bits`"]
    pub type FieldWriter<'a, U, REG, N, FI, const WI: u8, const O: u8> =
        FieldWriterRaw<'a, U, REG, N, FI, Unsafe, WI, O>;
    #[doc = " Write field Proxy with safe `bits`"]
    pub type FieldWriterSafe<'a, U, REG, N, FI, const WI: u8, const O: u8> =
        FieldWriterRaw<'a, U, REG, N, FI, Safe, WI, O>;
    impl<'a, U, REG, N, FI, const WI: u8, const OF: u8> FieldWriter<'a, U, REG, N, FI, WI, OF>
    where
        REG: Writable + RegisterSpec<Ux = U>,
        FI: Into<N>,
    {
        #[doc = " Field width"]
        pub const WIDTH: u8 = WI;
        #[doc = " Field offset"]
        pub const OFFSET: u8 = OF;
    }
    impl<'a, U, REG, N, FI, const WI: u8, const OF: u8> FieldWriterSafe<'a, U, REG, N, FI, WI, OF>
    where
        REG: Writable + RegisterSpec<Ux = U>,
        FI: Into<N>,
    {
        #[doc = " Field width"]
        pub const WIDTH: u8 = WI;
        #[doc = " Field offset"]
        pub const OFFSET: u8 = OF;
    }
    macro_rules! bit_proxy {
        ($ writer : ident , $ mwv : ident) => {
            #[doc(hidden)]
            pub struct $mwv;
            #[doc = " Bit-wise write field proxy"]
            pub type $writer<'a, U, REG, FI, const O: u8> = BitWriterRaw<'a, U, REG, FI, $mwv, O>;
            impl<'a, U, REG, FI, const OF: u8> $writer<'a, U, REG, FI, OF>
            where
                REG: Writable + RegisterSpec<Ux = U>,
                FI: Into<bool>,
            {
                #[doc = " Field width"]
                pub const WIDTH: u8 = 1;
                #[doc = " Field offset"]
                pub const OFFSET: u8 = OF;
            }
        };
    }
    macro_rules! impl_bit_proxy {
        ($ writer : ident , $ U : ty) => {
            impl<'a, REG, FI, const OF: u8> $writer<'a, $U, REG, FI, OF>
            where
                REG: Writable + RegisterSpec<Ux = $U>,
                FI: Into<bool>,
            {
                #[doc = " Writes bit to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut REG::Writer {
                    self.w.bits =
                        (self.w.bits & !(1 << { OF })) | ((<$U>::from(value) & 1) << { OF });
                    self.w
                }
                #[doc = " Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: FI) -> &'a mut REG::Writer {
                    self.bit(variant.into())
                }
            }
        };
    }
    bit_proxy!(BitWriter, BitM);
    bit_proxy!(BitWriter1S, Bit1S);
    bit_proxy!(BitWriter0C, Bit0C);
    bit_proxy!(BitWriter1C, Bit1C);
    bit_proxy!(BitWriter0S, Bit0S);
    bit_proxy!(BitWriter1T, Bit1T);
    bit_proxy!(BitWriter0T, Bit0T);
    macro_rules ! impl_proxy { ($ U : ty) => { impl <'a , REG , N , FI , const WI : u8 , const OF : u8 > FieldWriter <'a , $ U , REG , N , FI , WI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, N : Into <$ U >, FI : Into < N >, { const MASK : $ U = <$ U >:: MAX >> (<$ U >:: MAX . leading_ones () as u8 - { WI }) ; # [doc = " Writes raw bits to the field"]
# [doc = ""]
# [doc = " # Safety"]
# [doc = ""]
# [doc = " Passing incorrect value can cause undefined behaviour. See reference manual"]
# [inline (always)]
pub unsafe fn bits (self , value : N) -> &'a mut REG :: Writer { self . w . bits = (self . w . bits & ! (Self :: MASK << { OF })) | ((value . into () & Self :: MASK) << { OF }) ; self . w } # [doc = " Writes `variant` to the field"]
# [inline (always)]
pub fn variant (self , variant : FI) -> &'a mut REG :: Writer { unsafe { self . bits (variant . into ()) } } } impl <'a , REG , N , FI , const WI : u8 , const OF : u8 > FieldWriterSafe <'a , $ U , REG , N , FI , WI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, N : Into <$ U >, FI : Into < N >, { const MASK : $ U = <$ U >:: MAX >> (<$ U >:: MAX . leading_ones () as u8 - { WI }) ; # [doc = " Writes raw bits to the field"]
# [inline (always)]
pub fn bits (self , value : N) -> &'a mut REG :: Writer { self . w . bits = (self . w . bits & ! (Self :: MASK << { OF })) | ((value . into () & Self :: MASK) << { OF }) ; self . w } # [doc = " Writes `variant` to the field"]
# [inline (always)]
pub fn variant (self , variant : FI) -> &'a mut REG :: Writer { self . bits (variant . into ()) } } impl_bit_proxy ! (BitWriter , $ U) ; impl_bit_proxy ! (BitWriter1S , $ U) ; impl_bit_proxy ! (BitWriter0C , $ U) ; impl_bit_proxy ! (BitWriter1C , $ U) ; impl_bit_proxy ! (BitWriter0S , $ U) ; impl_bit_proxy ! (BitWriter1T , $ U) ; impl_bit_proxy ! (BitWriter0T , $ U) ; impl <'a , REG , FI , const OF : u8 > BitWriter <'a , $ U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, FI : Into < bool >, { # [doc = " Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> &'a mut REG :: Writer { self . bit (true) } # [doc = " Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> &'a mut REG :: Writer { self . bit (false) } } impl <'a , REG , FI , const OF : u8 > BitWriter1S <'a , $ U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, FI : Into < bool >, { # [doc = " Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> &'a mut REG :: Writer { self . bit (true) } } impl <'a , REG , FI , const OF : u8 > BitWriter0C <'a , $ U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, FI : Into < bool >, { # [doc = " Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> &'a mut REG :: Writer { self . bit (false) } } impl <'a , REG , FI , const OF : u8 > BitWriter1C <'a , $ U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, FI : Into < bool >, { # [doc = "Clears the field bit by passing one"]
# [inline (always)]
pub fn clear_bit_by_one (self) -> &'a mut REG :: Writer { self . bit (true) } } impl <'a , REG , FI , const OF : u8 > BitWriter0S <'a , $ U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, FI : Into < bool >, { # [doc = "Sets the field bit by passing zero"]
# [inline (always)]
pub fn set_bit_by_zero (self) -> &'a mut REG :: Writer { self . bit (false) } } impl <'a , REG , FI , const OF : u8 > BitWriter1T <'a , $ U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, FI : Into < bool >, { # [doc = "Toggle the field bit by passing one"]
# [inline (always)]
pub fn toggle_bit (self) -> &'a mut REG :: Writer { self . bit (true) } } impl <'a , REG , FI , const OF : u8 > BitWriter0T <'a , $ U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = $ U >, FI : Into < bool >, { # [doc = "Toggle the field bit by passing zero"]
# [inline (always)]
pub fn toggle_bit (self) -> &'a mut REG :: Writer { self . bit (false) } } } }
    impl_proxy!(u32);
}
#[cfg(feature = "rt")]
extern "C" {
    fn ADC_IRQN();
    fn TIM1_BRK_UP_TRG_COM_IRQN();
    fn TIM1_CC_IRQN();
    fn TIM2_IRQN();
    fn TIM3_IRQN();
    fn TIM6_IRQN();
    fn TIM7_IRQN();
    fn TIM14_IRQN();
    fn TIM15_IRQN();
    fn TIM16_IRQN();
    fn TIM17_IRQN();
    fn SPI1_IRQN();
    fn SPI2_IRQN();
    fn SPI3_IRQN();
    fn TIM4_IRQN();
    fn SPI4_IRQN();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 41] = [
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: ADC_IRQN },
    Vector {
        _handler: TIM1_BRK_UP_TRG_COM_IRQN,
    },
    Vector {
        _handler: TIM1_CC_IRQN,
    },
    Vector {
        _handler: TIM2_IRQN,
    },
    Vector {
        _handler: TIM3_IRQN,
    },
    Vector {
        _handler: TIM6_IRQN,
    },
    Vector {
        _handler: TIM7_IRQN,
    },
    Vector {
        _handler: TIM14_IRQN,
    },
    Vector {
        _handler: TIM15_IRQN,
    },
    Vector {
        _handler: TIM16_IRQN,
    },
    Vector {
        _handler: TIM17_IRQN,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: SPI1_IRQN,
    },
    Vector {
        _handler: SPI2_IRQN,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: SPI3_IRQN,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: TIM4_IRQN,
    },
    Vector {
        _handler: SPI4_IRQN,
    },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "12 - Adc interrupt"]
    ADC_IRQN = 12,
    #[doc = "13 - TIM1 break update trig com interrupt"]
    TIM1_BRK_UP_TRG_COM_IRQN = 13,
    #[doc = "14 - TIM1 Capture Compare interrupt"]
    TIM1_CC_IRQN = 14,
    #[doc = "15 - TIM2 interrupt"]
    TIM2_IRQN = 15,
    #[doc = "16 - TIM3 interrupt"]
    TIM3_IRQN = 16,
    #[doc = "17 - TIM6 interrupt"]
    TIM6_IRQN = 17,
    #[doc = "18 - TIM7 interrupt"]
    TIM7_IRQN = 18,
    #[doc = "19 - TIM14 interrupt"]
    TIM14_IRQN = 19,
    #[doc = "20 - TIM15 interrupt"]
    TIM15_IRQN = 20,
    #[doc = "21 - TIM16 interrupt"]
    TIM16_IRQN = 21,
    #[doc = "22 - TIM17 interrupt"]
    TIM17_IRQN = 22,
    #[doc = "25 - SPI1_IRQn"]
    SPI1_IRQN = 25,
    #[doc = "26 - SPI2_IRQn"]
    SPI2_IRQN = 26,
    #[doc = "30 - SPI3_IRQn"]
    SPI3_IRQN = 30,
    #[doc = "39 - TIM4 interrupt"]
    TIM4_IRQN = 39,
    #[doc = "40 - SPI4_IRQn"]
    SPI4_IRQN = 40,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "DAC"]
pub struct DAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DAC {}
impl DAC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dac::RegisterBlock = 0x4000_7400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DAC {
    type Target = dac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAC").finish()
    }
}
#[doc = "DAC"]
pub mod dac {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DAC control register"]
        pub cr: crate::Reg<cr::CR_SPEC>,
        #[doc = "0x04 - DAC software trigger register"]
        pub swtrgr: crate::Reg<swtrgr::SWTRGR_SPEC>,
        #[doc = "0x08 - DAC channel1 12-bit right-aligned data holding register"]
        pub dhr12r1: crate::Reg<dhr12r1::DHR12R1_SPEC>,
        #[doc = "0x0c - DAC channel1 12-bit left aligned data holding register"]
        pub dhr12l1: crate::Reg<dhr12l1::DHR12L1_SPEC>,
        #[doc = "0x10 - DAC channel1 8-bit right aligned data holding register"]
        pub dhr8r1: crate::Reg<dhr8r1::DHR8R1_SPEC>,
        #[doc = "0x14 - DAC channel2 12-bit right aligned data holding register"]
        pub dhr12r2: crate::Reg<dhr12r2::DHR12R2_SPEC>,
        #[doc = "0x18 - DAC channel2 12-bit left aligned data holding register"]
        pub dhr12l2: crate::Reg<dhr12l2::DHR12L2_SPEC>,
        #[doc = "0x1c - DAC channel2 8-bit right-aligned data holding register"]
        pub dhr8r2: crate::Reg<dhr8r2::DHR8R2_SPEC>,
        #[doc = "0x20 - Dual DAC 12-bit right-aligned data holding register"]
        pub dhr12rd: crate::Reg<dhr12rd::DHR12RD_SPEC>,
        #[doc = "0x24 - DUAL DAC 12-bit left aligned data holding register"]
        pub dhr12ld: crate::Reg<dhr12ld::DHR12LD_SPEC>,
        #[doc = "0x28 - DUAL DAC 8-bit right aligned data holding register"]
        pub dhr8rd: crate::Reg<dhr8rd::DHR8RD_SPEC>,
        #[doc = "0x2c - DAC channel1 data output register"]
        pub dor1: crate::Reg<dor1::DOR1_SPEC>,
        #[doc = "0x30 - DAC channel2 data output register"]
        pub dor2: crate::Reg<dor2::DOR2_SPEC>,
        #[doc = "0x34 - DAC status register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x38 - DAC calibration control register"]
        pub ccr: crate::Reg<ccr::CCR_SPEC>,
        #[doc = "0x3c - DAC mode control register"]
        pub mcr: crate::Reg<mcr::MCR_SPEC>,
        #[doc = "0x40 - DAC Sample and Hold sample time register 1"]
        pub shsr1: crate::Reg<shsr1::SHSR1_SPEC>,
        #[doc = "0x44 - DAC Sample and Hold sample time register 2"]
        pub shsr2: crate::Reg<shsr2::SHSR2_SPEC>,
        #[doc = "0x48 - DAC Sample and Hold hold time register"]
        pub shhr: crate::Reg<shhr::SHHR_SPEC>,
        #[doc = "0x4c - DAC Sample and Hold refresh time register"]
        pub shrr: crate::Reg<shrr::SHRR_SPEC>,
    }
    #[doc = "CR register accessor: an alias for `Reg<CR_SPEC>`"]
    pub type CR = crate::Reg<cr::CR_SPEC>;
    #[doc = "DAC control register"]
    pub mod cr {
        #[doc = "Register `CR` reader"]
        pub struct R(crate::R<CR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR` writer"]
        pub struct W(crate::W<CR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](index.html) module"]
        pub struct CR_SPEC;
        impl crate::RegisterSpec for CR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr::R](R) reader structure"]
        impl crate::Readable for CR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr::W](W) writer structure"]
        impl crate::Writable for CR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR to value 0"]
        impl crate::Resettable for CR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SWTRGR register accessor: an alias for `Reg<SWTRGR_SPEC>`"]
    pub type SWTRGR = crate::Reg<swtrgr::SWTRGR_SPEC>;
    #[doc = "DAC software trigger register"]
    pub mod swtrgr {
        #[doc = "Register `SWTRGR` writer"]
        pub struct W(crate::W<SWTRGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SWTRGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SWTRGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SWTRGR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC software trigger register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swtrgr](index.html) module"]
        pub struct SWTRGR_SPEC;
        impl crate::RegisterSpec for SWTRGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [swtrgr::W](W) writer structure"]
        impl crate::Writable for SWTRGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SWTRGR to value 0"]
        impl crate::Resettable for SWTRGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR12R1 register accessor: an alias for `Reg<DHR12R1_SPEC>`"]
    pub type DHR12R1 = crate::Reg<dhr12r1::DHR12R1_SPEC>;
    #[doc = "DAC channel1 12-bit right-aligned data holding register"]
    pub mod dhr12r1 {
        #[doc = "Register `DHR12R1` reader"]
        pub struct R(crate::R<DHR12R1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR12R1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR12R1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR12R1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR12R1` writer"]
        pub struct W(crate::W<DHR12R1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR12R1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR12R1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR12R1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC channel1 12-bit right-aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12r1](index.html) module"]
        pub struct DHR12R1_SPEC;
        impl crate::RegisterSpec for DHR12R1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr12r1::R](R) reader structure"]
        impl crate::Readable for DHR12R1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr12r1::W](W) writer structure"]
        impl crate::Writable for DHR12R1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR12R1 to value 0"]
        impl crate::Resettable for DHR12R1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR12L1 register accessor: an alias for `Reg<DHR12L1_SPEC>`"]
    pub type DHR12L1 = crate::Reg<dhr12l1::DHR12L1_SPEC>;
    #[doc = "DAC channel1 12-bit left aligned data holding register"]
    pub mod dhr12l1 {
        #[doc = "Register `DHR12L1` reader"]
        pub struct R(crate::R<DHR12L1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR12L1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR12L1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR12L1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR12L1` writer"]
        pub struct W(crate::W<DHR12L1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR12L1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR12L1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR12L1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC channel1 12-bit left aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12l1](index.html) module"]
        pub struct DHR12L1_SPEC;
        impl crate::RegisterSpec for DHR12L1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr12l1::R](R) reader structure"]
        impl crate::Readable for DHR12L1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr12l1::W](W) writer structure"]
        impl crate::Writable for DHR12L1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR12L1 to value 0"]
        impl crate::Resettable for DHR12L1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR8R1 register accessor: an alias for `Reg<DHR8R1_SPEC>`"]
    pub type DHR8R1 = crate::Reg<dhr8r1::DHR8R1_SPEC>;
    #[doc = "DAC channel1 8-bit right aligned data holding register"]
    pub mod dhr8r1 {
        #[doc = "Register `DHR8R1` reader"]
        pub struct R(crate::R<DHR8R1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR8R1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR8R1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR8R1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR8R1` writer"]
        pub struct W(crate::W<DHR8R1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR8R1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR8R1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR8R1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC channel1 8-bit right aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr8r1](index.html) module"]
        pub struct DHR8R1_SPEC;
        impl crate::RegisterSpec for DHR8R1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr8r1::R](R) reader structure"]
        impl crate::Readable for DHR8R1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr8r1::W](W) writer structure"]
        impl crate::Writable for DHR8R1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR8R1 to value 0"]
        impl crate::Resettable for DHR8R1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR12R2 register accessor: an alias for `Reg<DHR12R2_SPEC>`"]
    pub type DHR12R2 = crate::Reg<dhr12r2::DHR12R2_SPEC>;
    #[doc = "DAC channel2 12-bit right aligned data holding register"]
    pub mod dhr12r2 {
        #[doc = "Register `DHR12R2` reader"]
        pub struct R(crate::R<DHR12R2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR12R2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR12R2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR12R2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR12R2` writer"]
        pub struct W(crate::W<DHR12R2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR12R2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR12R2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR12R2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC channel2 12-bit right aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12r2](index.html) module"]
        pub struct DHR12R2_SPEC;
        impl crate::RegisterSpec for DHR12R2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr12r2::R](R) reader structure"]
        impl crate::Readable for DHR12R2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr12r2::W](W) writer structure"]
        impl crate::Writable for DHR12R2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR12R2 to value 0"]
        impl crate::Resettable for DHR12R2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR12L2 register accessor: an alias for `Reg<DHR12L2_SPEC>`"]
    pub type DHR12L2 = crate::Reg<dhr12l2::DHR12L2_SPEC>;
    #[doc = "DAC channel2 12-bit left aligned data holding register"]
    pub mod dhr12l2 {
        #[doc = "Register `DHR12L2` reader"]
        pub struct R(crate::R<DHR12L2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR12L2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR12L2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR12L2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR12L2` writer"]
        pub struct W(crate::W<DHR12L2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR12L2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR12L2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR12L2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC channel2 12-bit left aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12l2](index.html) module"]
        pub struct DHR12L2_SPEC;
        impl crate::RegisterSpec for DHR12L2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr12l2::R](R) reader structure"]
        impl crate::Readable for DHR12L2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr12l2::W](W) writer structure"]
        impl crate::Writable for DHR12L2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR12L2 to value 0"]
        impl crate::Resettable for DHR12L2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR8R2 register accessor: an alias for `Reg<DHR8R2_SPEC>`"]
    pub type DHR8R2 = crate::Reg<dhr8r2::DHR8R2_SPEC>;
    #[doc = "DAC channel2 8-bit right-aligned data holding register"]
    pub mod dhr8r2 {
        #[doc = "Register `DHR8R2` reader"]
        pub struct R(crate::R<DHR8R2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR8R2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR8R2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR8R2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR8R2` writer"]
        pub struct W(crate::W<DHR8R2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR8R2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR8R2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR8R2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC channel2 8-bit right-aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr8r2](index.html) module"]
        pub struct DHR8R2_SPEC;
        impl crate::RegisterSpec for DHR8R2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr8r2::R](R) reader structure"]
        impl crate::Readable for DHR8R2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr8r2::W](W) writer structure"]
        impl crate::Writable for DHR8R2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR8R2 to value 0"]
        impl crate::Resettable for DHR8R2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR12RD register accessor: an alias for `Reg<DHR12RD_SPEC>`"]
    pub type DHR12RD = crate::Reg<dhr12rd::DHR12RD_SPEC>;
    #[doc = "Dual DAC 12-bit right-aligned data holding register"]
    pub mod dhr12rd {
        #[doc = "Register `DHR12RD` reader"]
        pub struct R(crate::R<DHR12RD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR12RD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR12RD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR12RD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR12RD` writer"]
        pub struct W(crate::W<DHR12RD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR12RD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR12RD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR12RD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Dual DAC 12-bit right-aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12rd](index.html) module"]
        pub struct DHR12RD_SPEC;
        impl crate::RegisterSpec for DHR12RD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr12rd::R](R) reader structure"]
        impl crate::Readable for DHR12RD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr12rd::W](W) writer structure"]
        impl crate::Writable for DHR12RD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR12RD to value 0"]
        impl crate::Resettable for DHR12RD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR12LD register accessor: an alias for `Reg<DHR12LD_SPEC>`"]
    pub type DHR12LD = crate::Reg<dhr12ld::DHR12LD_SPEC>;
    #[doc = "DUAL DAC 12-bit left aligned data holding register"]
    pub mod dhr12ld {
        #[doc = "Register `DHR12LD` reader"]
        pub struct R(crate::R<DHR12LD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR12LD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR12LD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR12LD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR12LD` writer"]
        pub struct W(crate::W<DHR12LD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR12LD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR12LD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR12LD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DUAL DAC 12-bit left aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12ld](index.html) module"]
        pub struct DHR12LD_SPEC;
        impl crate::RegisterSpec for DHR12LD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr12ld::R](R) reader structure"]
        impl crate::Readable for DHR12LD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr12ld::W](W) writer structure"]
        impl crate::Writable for DHR12LD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR12LD to value 0"]
        impl crate::Resettable for DHR12LD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DHR8RD register accessor: an alias for `Reg<DHR8RD_SPEC>`"]
    pub type DHR8RD = crate::Reg<dhr8rd::DHR8RD_SPEC>;
    #[doc = "DUAL DAC 8-bit right aligned data holding register"]
    pub mod dhr8rd {
        #[doc = "Register `DHR8RD` reader"]
        pub struct R(crate::R<DHR8RD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DHR8RD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DHR8RD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DHR8RD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DHR8RD` writer"]
        pub struct W(crate::W<DHR8RD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DHR8RD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DHR8RD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DHR8RD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DUAL DAC 8-bit right aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr8rd](index.html) module"]
        pub struct DHR8RD_SPEC;
        impl crate::RegisterSpec for DHR8RD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dhr8rd::R](R) reader structure"]
        impl crate::Readable for DHR8RD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dhr8rd::W](W) writer structure"]
        impl crate::Writable for DHR8RD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DHR8RD to value 0"]
        impl crate::Resettable for DHR8RD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DOR1 register accessor: an alias for `Reg<DOR1_SPEC>`"]
    pub type DOR1 = crate::Reg<dor1::DOR1_SPEC>;
    #[doc = "DAC channel1 data output register"]
    pub mod dor1 {
        #[doc = "Register `DOR1` reader"]
        pub struct R(crate::R<DOR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DOR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DOR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DOR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "DAC channel1 data output register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dor1](index.html) module"]
        pub struct DOR1_SPEC;
        impl crate::RegisterSpec for DOR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dor1::R](R) reader structure"]
        impl crate::Readable for DOR1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets DOR1 to value 0"]
        impl crate::Resettable for DOR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DOR2 register accessor: an alias for `Reg<DOR2_SPEC>`"]
    pub type DOR2 = crate::Reg<dor2::DOR2_SPEC>;
    #[doc = "DAC channel2 data output register"]
    pub mod dor2 {
        #[doc = "Register `DOR2` reader"]
        pub struct R(crate::R<DOR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DOR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DOR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DOR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "DAC channel2 data output register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dor2](index.html) module"]
        pub struct DOR2_SPEC;
        impl crate::RegisterSpec for DOR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dor2::R](R) reader structure"]
        impl crate::Readable for DOR2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets DOR2 to value 0"]
        impl crate::Resettable for DOR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "DAC status register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR register accessor: an alias for `Reg<CCR_SPEC>`"]
    pub type CCR = crate::Reg<ccr::CCR_SPEC>;
    #[doc = "DAC calibration control register"]
    pub mod ccr {
        #[doc = "Register `CCR` reader"]
        pub struct R(crate::R<CCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR` writer"]
        pub struct W(crate::W<CCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC calibration control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](index.html) module"]
        pub struct CCR_SPEC;
        impl crate::RegisterSpec for CCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr::R](R) reader structure"]
        impl crate::Readable for CCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr::W](W) writer structure"]
        impl crate::Writable for CCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR to value 0"]
        impl crate::Resettable for CCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MCR register accessor: an alias for `Reg<MCR_SPEC>`"]
    pub type MCR = crate::Reg<mcr::MCR_SPEC>;
    #[doc = "DAC mode control register"]
    pub mod mcr {
        #[doc = "Register `MCR` reader"]
        pub struct R(crate::R<MCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MCR` writer"]
        pub struct W(crate::W<MCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcr](index.html) module"]
        pub struct MCR_SPEC;
        impl crate::RegisterSpec for MCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [mcr::R](R) reader structure"]
        impl crate::Readable for MCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [mcr::W](W) writer structure"]
        impl crate::Writable for MCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MCR to value 0"]
        impl crate::Resettable for MCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SHSR1 register accessor: an alias for `Reg<SHSR1_SPEC>`"]
    pub type SHSR1 = crate::Reg<shsr1::SHSR1_SPEC>;
    #[doc = "DAC Sample and Hold sample time register 1"]
    pub mod shsr1 {
        #[doc = "Register `SHSR1` reader"]
        pub struct R(crate::R<SHSR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SHSR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SHSR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SHSR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SHSR1` writer"]
        pub struct W(crate::W<SHSR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SHSR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SHSR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SHSR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC Sample and Hold sample time register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shsr1](index.html) module"]
        pub struct SHSR1_SPEC;
        impl crate::RegisterSpec for SHSR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [shsr1::R](R) reader structure"]
        impl crate::Readable for SHSR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [shsr1::W](W) writer structure"]
        impl crate::Writable for SHSR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SHSR1 to value 0"]
        impl crate::Resettable for SHSR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SHSR2 register accessor: an alias for `Reg<SHSR2_SPEC>`"]
    pub type SHSR2 = crate::Reg<shsr2::SHSR2_SPEC>;
    #[doc = "DAC Sample and Hold sample time register 2"]
    pub mod shsr2 {
        #[doc = "Register `SHSR2` reader"]
        pub struct R(crate::R<SHSR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SHSR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SHSR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SHSR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SHSR2` writer"]
        pub struct W(crate::W<SHSR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SHSR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SHSR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SHSR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC Sample and Hold sample time register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shsr2](index.html) module"]
        pub struct SHSR2_SPEC;
        impl crate::RegisterSpec for SHSR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [shsr2::R](R) reader structure"]
        impl crate::Readable for SHSR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [shsr2::W](W) writer structure"]
        impl crate::Writable for SHSR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SHSR2 to value 0"]
        impl crate::Resettable for SHSR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SHHR register accessor: an alias for `Reg<SHHR_SPEC>`"]
    pub type SHHR = crate::Reg<shhr::SHHR_SPEC>;
    #[doc = "DAC Sample and Hold hold time register"]
    pub mod shhr {
        #[doc = "Register `SHHR` reader"]
        pub struct R(crate::R<SHHR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SHHR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SHHR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SHHR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SHHR` writer"]
        pub struct W(crate::W<SHHR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SHHR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SHHR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SHHR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC Sample and Hold hold time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shhr](index.html) module"]
        pub struct SHHR_SPEC;
        impl crate::RegisterSpec for SHHR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [shhr::R](R) reader structure"]
        impl crate::Readable for SHHR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [shhr::W](W) writer structure"]
        impl crate::Writable for SHHR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SHHR to value 0x0001_0001"]
        impl crate::Resettable for SHHR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0001_0001
            }
        }
    }
    #[doc = "SHRR register accessor: an alias for `Reg<SHRR_SPEC>`"]
    pub type SHRR = crate::Reg<shrr::SHRR_SPEC>;
    #[doc = "DAC Sample and Hold refresh time register"]
    pub mod shrr {
        #[doc = "Register `SHRR` reader"]
        pub struct R(crate::R<SHRR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SHRR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SHRR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SHRR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SHRR` writer"]
        pub struct W(crate::W<SHRR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SHRR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SHRR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SHRR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAC Sample and Hold refresh time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shrr](index.html) module"]
        pub struct SHRR_SPEC;
        impl crate::RegisterSpec for SHRR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [shrr::R](R) reader structure"]
        impl crate::Readable for SHRR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [shrr::W](W) writer structure"]
        impl crate::Writable for SHRR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SHRR to value 0x0001_0001"]
        impl crate::Resettable for SHRR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0001_0001
            }
        }
    }
}
#[doc = "CAN1"]
pub struct CAN1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAN1 {}
impl CAN1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can1::RegisterBlock = 0x4000_6400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAN1 {
    type Target = can1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN1").finish()
    }
}
#[doc = "CAN1"]
pub mod can1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - CAN_MOD"]
        pub can_mod: crate::Reg<can_mod::CAN_MOD_SPEC>,
        #[doc = "0x04 - CAN_CMR"]
        pub can_cmr: crate::Reg<can_cmr::CAN_CMR_SPEC>,
        #[doc = "0x08 - CAN_SR"]
        pub can_sr: crate::Reg<can_sr::CAN_SR_SPEC>,
        #[doc = "0x0c - CAN_IR"]
        pub can_ir: crate::Reg<can_ir::CAN_IR_SPEC>,
        #[doc = "0x10 - CAN_IER"]
        pub can_ier: crate::Reg<can_ier::CAN_IER_SPEC>,
        _reserved5: [u8; 0x04],
        #[doc = "0x18 - CAN_BTR0"]
        pub can_btr0: crate::Reg<can_btr0::CAN_BTR0_SPEC>,
        #[doc = "0x1c - CAN_BTR1"]
        pub can_btr1: crate::Reg<can_btr1::CAN_BTR1_SPEC>,
        #[doc = "0x20 - CAN_OCR"]
        pub can_ocr: crate::Reg<can_ocr::CAN_OCR_SPEC>,
        _reserved8: [u8; 0x08],
        #[doc = "0x2c - CAN_ALC"]
        pub can_alc: crate::Reg<can_alc::CAN_ALC_SPEC>,
        #[doc = "0x30 - CAN_ECC"]
        pub can_ecc: crate::Reg<can_ecc::CAN_ECC_SPEC>,
        #[doc = "0x34 - CAN_EWLR"]
        pub can_ewlr: crate::Reg<can_ewlr::CAN_EWLR_SPEC>,
        #[doc = "0x38 - CAN_RXERR"]
        pub can_rxerr: crate::Reg<can_rxerr::CAN_RXERR_SPEC>,
        #[doc = "0x3c - CAN_TXERR"]
        pub can_txerr: crate::Reg<can_txerr::CAN_TXERR_SPEC>,
        _reserved_13_can: [u8; 0x04],
        _reserved_14_can: [u8; 0x04],
        _reserved_15_can: [u8; 0x04],
        _reserved_16_can: [u8; 0x04],
        _reserved_17_can: [u8; 0x04],
        _reserved_18_can: [u8; 0x04],
        _reserved_19_can: [u8; 0x04],
        _reserved_20_can: [u8; 0x04],
        #[doc = "0x60 - CAN_BUFF8"]
        pub can_buff8: crate::Reg<can_buff8::CAN_BUFF8_SPEC>,
        #[doc = "0x64 - CAN_BUFF9"]
        pub can_buff9: crate::Reg<can_buff9::CAN_BUFF9_SPEC>,
        #[doc = "0x68 - CAN_BUFF10"]
        pub can_buff10: crate::Reg<can_buff10::CAN_BUFF10_SPEC>,
        #[doc = "0x6c - CAN_BUFF11"]
        pub can_buff11: crate::Reg<can_buff11::CAN_BUFF11_SPEC>,
        #[doc = "0x70 - CAN_BUFF12"]
        pub can_buff12: crate::Reg<can_buff12::CAN_BUFF12_SPEC>,
        #[doc = "0x74 - CAN_RMC"]
        pub can_rmc: crate::Reg<can_rmc::CAN_RMC_SPEC>,
        #[doc = "0x78 - CAN_RBSA"]
        pub can_rbsa: crate::Reg<can_rbsa::CAN_RBSA_SPEC>,
        #[doc = "0x7c - CAN_CDR"]
        pub can_cdr: crate::Reg<can_cdr::CAN_CDR_SPEC>,
        #[doc = "0x80 - CAN_RXFIFO"]
        pub can_rxfifo: crate::Reg<can_rxfifo::CAN_RXFIFO_SPEC>,
        _reserved30: [u8; 0xfc],
        #[doc = "0x180 - CAN_TXFIFO"]
        pub can_txfifo: crate::Reg<can_txfifo::CAN_TXFIFO_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x40 - CAN_ACR0"]
        #[inline(always)]
        pub fn can_acr0(&self) -> &crate::Reg<can_acr0::CAN_ACR0_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(64usize)
                    as *const crate::Reg<can_acr0::CAN_ACR0_SPEC>)
            }
        }
        #[doc = "0x40 - CAN_BUFF0"]
        #[inline(always)]
        pub fn can_buff0(&self) -> &crate::Reg<can_buff0::CAN_BUFF0_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(64usize)
                    as *const crate::Reg<can_buff0::CAN_BUFF0_SPEC>)
            }
        }
        #[doc = "0x44 - CAN_ACR1"]
        #[inline(always)]
        pub fn can_acr1(&self) -> &crate::Reg<can_acr1::CAN_ACR1_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(68usize)
                    as *const crate::Reg<can_acr1::CAN_ACR1_SPEC>)
            }
        }
        #[doc = "0x44 - CAN_BUFF1"]
        #[inline(always)]
        pub fn can_buff1(&self) -> &crate::Reg<can_buff1::CAN_BUFF1_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(68usize)
                    as *const crate::Reg<can_buff1::CAN_BUFF1_SPEC>)
            }
        }
        #[doc = "0x48 - CAN_ACR2"]
        #[inline(always)]
        pub fn can_acr2(&self) -> &crate::Reg<can_acr2::CAN_ACR2_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(72usize)
                    as *const crate::Reg<can_acr2::CAN_ACR2_SPEC>)
            }
        }
        #[doc = "0x48 - CAN_BUFF2"]
        #[inline(always)]
        pub fn can_buff2(&self) -> &crate::Reg<can_buff2::CAN_BUFF2_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(72usize)
                    as *const crate::Reg<can_buff2::CAN_BUFF2_SPEC>)
            }
        }
        #[doc = "0x4c - CAN_ACR3"]
        #[inline(always)]
        pub fn can_acr3(&self) -> &crate::Reg<can_acr3::CAN_ACR3_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(76usize)
                    as *const crate::Reg<can_acr3::CAN_ACR3_SPEC>)
            }
        }
        #[doc = "0x4c - CAN_BUFF3"]
        #[inline(always)]
        pub fn can_buff3(&self) -> &crate::Reg<can_buff3::CAN_BUFF3_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(76usize)
                    as *const crate::Reg<can_buff3::CAN_BUFF3_SPEC>)
            }
        }
        #[doc = "0x50 - CAN_AMR0"]
        #[inline(always)]
        pub fn can_amr0(&self) -> &crate::Reg<can_amr0::CAN_AMR0_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(80usize)
                    as *const crate::Reg<can_amr0::CAN_AMR0_SPEC>)
            }
        }
        #[doc = "0x50 - CAN_BUFF4"]
        #[inline(always)]
        pub fn can_buff4(&self) -> &crate::Reg<can_buff4::CAN_BUFF4_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(80usize)
                    as *const crate::Reg<can_buff4::CAN_BUFF4_SPEC>)
            }
        }
        #[doc = "0x54 - CAN_AMR1"]
        #[inline(always)]
        pub fn can_amr1(&self) -> &crate::Reg<can_amr1::CAN_AMR1_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(84usize)
                    as *const crate::Reg<can_amr1::CAN_AMR1_SPEC>)
            }
        }
        #[doc = "0x54 - CAN_BUFF5"]
        #[inline(always)]
        pub fn can_buff5(&self) -> &crate::Reg<can_buff5::CAN_BUFF5_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(84usize)
                    as *const crate::Reg<can_buff5::CAN_BUFF5_SPEC>)
            }
        }
        #[doc = "0x58 - CAN_AMR2"]
        #[inline(always)]
        pub fn can_amr2(&self) -> &crate::Reg<can_amr2::CAN_AMR2_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(88usize)
                    as *const crate::Reg<can_amr2::CAN_AMR2_SPEC>)
            }
        }
        #[doc = "0x58 - CAN_BUFF6"]
        #[inline(always)]
        pub fn can_buff6(&self) -> &crate::Reg<can_buff6::CAN_BUFF6_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(88usize)
                    as *const crate::Reg<can_buff6::CAN_BUFF6_SPEC>)
            }
        }
        #[doc = "0x5c - CAN_AMR3"]
        #[inline(always)]
        pub fn can_amr3(&self) -> &crate::Reg<can_amr3::CAN_AMR3_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(92usize)
                    as *const crate::Reg<can_amr3::CAN_AMR3_SPEC>)
            }
        }
        #[doc = "0x5c - CAN_BUFF7"]
        #[inline(always)]
        pub fn can_buff7(&self) -> &crate::Reg<can_buff7::CAN_BUFF7_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(92usize)
                    as *const crate::Reg<can_buff7::CAN_BUFF7_SPEC>)
            }
        }
    }
    #[doc = "CAN_MOD register accessor: an alias for `Reg<CAN_MOD_SPEC>`"]
    pub type CAN_MOD = crate::Reg<can_mod::CAN_MOD_SPEC>;
    #[doc = "CAN_MOD"]
    pub mod can_mod {
        #[doc = "Register `CAN_MOD` reader"]
        pub struct R(crate::R<CAN_MOD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_MOD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_MOD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_MOD` writer"]
        pub struct W(crate::W<CAN_MOD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_MOD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_MOD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_MOD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_MOD\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_mod](index.html) module"]
        pub struct CAN_MOD_SPEC;
        impl crate::RegisterSpec for CAN_MOD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_mod::R](R) reader structure"]
        impl crate::Readable for CAN_MOD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_mod::W](W) writer structure"]
        impl crate::Writable for CAN_MOD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_MOD to value 0x03"]
        impl crate::Resettable for CAN_MOD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x03
            }
        }
    }
    #[doc = "CAN_CMR register accessor: an alias for `Reg<CAN_CMR_SPEC>`"]
    pub type CAN_CMR = crate::Reg<can_cmr::CAN_CMR_SPEC>;
    #[doc = "CAN_CMR"]
    pub mod can_cmr {
        #[doc = "Register `CAN_CMR` reader"]
        pub struct R(crate::R<CAN_CMR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_CMR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_CMR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_CMR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_CMR` writer"]
        pub struct W(crate::W<CAN_CMR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_CMR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_CMR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_CMR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_CMR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_cmr](index.html) module"]
        pub struct CAN_CMR_SPEC;
        impl crate::RegisterSpec for CAN_CMR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_cmr::R](R) reader structure"]
        impl crate::Readable for CAN_CMR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_cmr::W](W) writer structure"]
        impl crate::Writable for CAN_CMR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_CMR to value 0"]
        impl crate::Resettable for CAN_CMR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_SR register accessor: an alias for `Reg<CAN_SR_SPEC>`"]
    pub type CAN_SR = crate::Reg<can_sr::CAN_SR_SPEC>;
    #[doc = "CAN_SR"]
    pub mod can_sr {
        #[doc = "Register `CAN_SR` reader"]
        pub struct R(crate::R<CAN_SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CAN_SR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_sr](index.html) module"]
        pub struct CAN_SR_SPEC;
        impl crate::RegisterSpec for CAN_SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_sr::R](R) reader structure"]
        impl crate::Readable for CAN_SR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CAN_SR to value 0x3c"]
        impl crate::Resettable for CAN_SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x3c
            }
        }
    }
    #[doc = "CAN_IR register accessor: an alias for `Reg<CAN_IR_SPEC>`"]
    pub type CAN_IR = crate::Reg<can_ir::CAN_IR_SPEC>;
    #[doc = "CAN_IR"]
    pub mod can_ir {
        #[doc = "Register `CAN_IR` reader"]
        pub struct R(crate::R<CAN_IR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_IR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_IR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_IR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CAN_IR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_ir](index.html) module"]
        pub struct CAN_IR_SPEC;
        impl crate::RegisterSpec for CAN_IR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_ir::R](R) reader structure"]
        impl crate::Readable for CAN_IR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CAN_IR to value 0"]
        impl crate::Resettable for CAN_IR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_IER register accessor: an alias for `Reg<CAN_IER_SPEC>`"]
    pub type CAN_IER = crate::Reg<can_ier::CAN_IER_SPEC>;
    #[doc = "CAN_IER"]
    pub mod can_ier {
        #[doc = "Register `CAN_IER` reader"]
        pub struct R(crate::R<CAN_IER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_IER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_IER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_IER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_IER` writer"]
        pub struct W(crate::W<CAN_IER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_IER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_IER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_IER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_IER\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_ier](index.html) module"]
        pub struct CAN_IER_SPEC;
        impl crate::RegisterSpec for CAN_IER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_ier::R](R) reader structure"]
        impl crate::Readable for CAN_IER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_ier::W](W) writer structure"]
        impl crate::Writable for CAN_IER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_IER to value 0"]
        impl crate::Resettable for CAN_IER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BTR0 register accessor: an alias for `Reg<CAN_BTR0_SPEC>`"]
    pub type CAN_BTR0 = crate::Reg<can_btr0::CAN_BTR0_SPEC>;
    #[doc = "CAN_BTR0"]
    pub mod can_btr0 {
        #[doc = "Register `CAN_BTR0` reader"]
        pub struct R(crate::R<CAN_BTR0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BTR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BTR0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BTR0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BTR0` writer"]
        pub struct W(crate::W<CAN_BTR0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BTR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BTR0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BTR0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BTR0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_btr0](index.html) module"]
        pub struct CAN_BTR0_SPEC;
        impl crate::RegisterSpec for CAN_BTR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_btr0::R](R) reader structure"]
        impl crate::Readable for CAN_BTR0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_btr0::W](W) writer structure"]
        impl crate::Writable for CAN_BTR0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BTR0 to value 0"]
        impl crate::Resettable for CAN_BTR0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BTR1 register accessor: an alias for `Reg<CAN_BTR1_SPEC>`"]
    pub type CAN_BTR1 = crate::Reg<can_btr1::CAN_BTR1_SPEC>;
    #[doc = "CAN_BTR1"]
    pub mod can_btr1 {
        #[doc = "Register `CAN_BTR1` reader"]
        pub struct R(crate::R<CAN_BTR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BTR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BTR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BTR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BTR1` writer"]
        pub struct W(crate::W<CAN_BTR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BTR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BTR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BTR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BTR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_btr1](index.html) module"]
        pub struct CAN_BTR1_SPEC;
        impl crate::RegisterSpec for CAN_BTR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_btr1::R](R) reader structure"]
        impl crate::Readable for CAN_BTR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_btr1::W](W) writer structure"]
        impl crate::Writable for CAN_BTR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BTR1 to value 0"]
        impl crate::Resettable for CAN_BTR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_OCR register accessor: an alias for `Reg<CAN_OCR_SPEC>`"]
    pub type CAN_OCR = crate::Reg<can_ocr::CAN_OCR_SPEC>;
    #[doc = "CAN_OCR"]
    pub mod can_ocr {
        #[doc = "Register `CAN_OCR` reader"]
        pub struct R(crate::R<CAN_OCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_OCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_OCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_OCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_OCR` writer"]
        pub struct W(crate::W<CAN_OCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_OCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_OCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_OCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_OCR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_ocr](index.html) module"]
        pub struct CAN_OCR_SPEC;
        impl crate::RegisterSpec for CAN_OCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_ocr::R](R) reader structure"]
        impl crate::Readable for CAN_OCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_ocr::W](W) writer structure"]
        impl crate::Writable for CAN_OCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_OCR to value 0"]
        impl crate::Resettable for CAN_OCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_ALC register accessor: an alias for `Reg<CAN_ALC_SPEC>`"]
    pub type CAN_ALC = crate::Reg<can_alc::CAN_ALC_SPEC>;
    #[doc = "CAN_ALC"]
    pub mod can_alc {
        #[doc = "Register `CAN_ALC` reader"]
        pub struct R(crate::R<CAN_ALC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_ALC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_ALC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_ALC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CAN_ALC\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_alc](index.html) module"]
        pub struct CAN_ALC_SPEC;
        impl crate::RegisterSpec for CAN_ALC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_alc::R](R) reader structure"]
        impl crate::Readable for CAN_ALC_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CAN_ALC to value 0"]
        impl crate::Resettable for CAN_ALC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_ECC register accessor: an alias for `Reg<CAN_ECC_SPEC>`"]
    pub type CAN_ECC = crate::Reg<can_ecc::CAN_ECC_SPEC>;
    #[doc = "CAN_ECC"]
    pub mod can_ecc {
        #[doc = "Register `CAN_ECC` reader"]
        pub struct R(crate::R<CAN_ECC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_ECC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_ECC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_ECC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CAN_ECC\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_ecc](index.html) module"]
        pub struct CAN_ECC_SPEC;
        impl crate::RegisterSpec for CAN_ECC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_ecc::R](R) reader structure"]
        impl crate::Readable for CAN_ECC_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CAN_ECC to value 0"]
        impl crate::Resettable for CAN_ECC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_EWLR register accessor: an alias for `Reg<CAN_EWLR_SPEC>`"]
    pub type CAN_EWLR = crate::Reg<can_ewlr::CAN_EWLR_SPEC>;
    #[doc = "CAN_EWLR"]
    pub mod can_ewlr {
        #[doc = "Register `CAN_EWLR` reader"]
        pub struct R(crate::R<CAN_EWLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_EWLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_EWLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_EWLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_EWLR` writer"]
        pub struct W(crate::W<CAN_EWLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_EWLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_EWLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_EWLR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_EWLR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_ewlr](index.html) module"]
        pub struct CAN_EWLR_SPEC;
        impl crate::RegisterSpec for CAN_EWLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_ewlr::R](R) reader structure"]
        impl crate::Readable for CAN_EWLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_ewlr::W](W) writer structure"]
        impl crate::Writable for CAN_EWLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_EWLR to value 0"]
        impl crate::Resettable for CAN_EWLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_RXERR register accessor: an alias for `Reg<CAN_RXERR_SPEC>`"]
    pub type CAN_RXERR = crate::Reg<can_rxerr::CAN_RXERR_SPEC>;
    #[doc = "CAN_RXERR"]
    pub mod can_rxerr {
        #[doc = "Register `CAN_RXERR` reader"]
        pub struct R(crate::R<CAN_RXERR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_RXERR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_RXERR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_RXERR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_RXERR` writer"]
        pub struct W(crate::W<CAN_RXERR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_RXERR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_RXERR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_RXERR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_RXERR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_rxerr](index.html) module"]
        pub struct CAN_RXERR_SPEC;
        impl crate::RegisterSpec for CAN_RXERR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_rxerr::R](R) reader structure"]
        impl crate::Readable for CAN_RXERR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_rxerr::W](W) writer structure"]
        impl crate::Writable for CAN_RXERR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_RXERR to value 0"]
        impl crate::Resettable for CAN_RXERR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_TXERR register accessor: an alias for `Reg<CAN_TXERR_SPEC>`"]
    pub type CAN_TXERR = crate::Reg<can_txerr::CAN_TXERR_SPEC>;
    #[doc = "CAN_TXERR"]
    pub mod can_txerr {
        #[doc = "Register `CAN_TXERR` reader"]
        pub struct R(crate::R<CAN_TXERR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_TXERR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_TXERR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_TXERR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_TXERR` writer"]
        pub struct W(crate::W<CAN_TXERR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_TXERR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_TXERR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_TXERR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_TXERR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_txerr](index.html) module"]
        pub struct CAN_TXERR_SPEC;
        impl crate::RegisterSpec for CAN_TXERR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_txerr::R](R) reader structure"]
        impl crate::Readable for CAN_TXERR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_txerr::W](W) writer structure"]
        impl crate::Writable for CAN_TXERR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_TXERR to value 0"]
        impl crate::Resettable for CAN_TXERR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF0 register accessor: an alias for `Reg<CAN_BUFF0_SPEC>`"]
    pub type CAN_BUFF0 = crate::Reg<can_buff0::CAN_BUFF0_SPEC>;
    #[doc = "CAN_BUFF0"]
    pub mod can_buff0 {
        #[doc = "Register `CAN_BUFF0` reader"]
        pub struct R(crate::R<CAN_BUFF0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF0` writer"]
        pub struct W(crate::W<CAN_BUFF0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff0](index.html) module"]
        pub struct CAN_BUFF0_SPEC;
        impl crate::RegisterSpec for CAN_BUFF0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff0::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff0::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF0 to value 0"]
        impl crate::Resettable for CAN_BUFF0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF1 register accessor: an alias for `Reg<CAN_BUFF1_SPEC>`"]
    pub type CAN_BUFF1 = crate::Reg<can_buff1::CAN_BUFF1_SPEC>;
    #[doc = "CAN_BUFF1"]
    pub mod can_buff1 {
        #[doc = "Register `CAN_BUFF1` reader"]
        pub struct R(crate::R<CAN_BUFF1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF1` writer"]
        pub struct W(crate::W<CAN_BUFF1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff1](index.html) module"]
        pub struct CAN_BUFF1_SPEC;
        impl crate::RegisterSpec for CAN_BUFF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff1::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff1::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF1 to value 0"]
        impl crate::Resettable for CAN_BUFF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF2 register accessor: an alias for `Reg<CAN_BUFF2_SPEC>`"]
    pub type CAN_BUFF2 = crate::Reg<can_buff2::CAN_BUFF2_SPEC>;
    #[doc = "CAN_BUFF2"]
    pub mod can_buff2 {
        #[doc = "Register `CAN_BUFF2` reader"]
        pub struct R(crate::R<CAN_BUFF2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF2` writer"]
        pub struct W(crate::W<CAN_BUFF2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff2](index.html) module"]
        pub struct CAN_BUFF2_SPEC;
        impl crate::RegisterSpec for CAN_BUFF2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff2::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff2::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF2 to value 0x0001_0001"]
        impl crate::Resettable for CAN_BUFF2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0001_0001
            }
        }
    }
    #[doc = "CAN_BUFF3 register accessor: an alias for `Reg<CAN_BUFF3_SPEC>`"]
    pub type CAN_BUFF3 = crate::Reg<can_buff3::CAN_BUFF3_SPEC>;
    #[doc = "CAN_BUFF3"]
    pub mod can_buff3 {
        #[doc = "Register `CAN_BUFF3` reader"]
        pub struct R(crate::R<CAN_BUFF3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF3` writer"]
        pub struct W(crate::W<CAN_BUFF3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff3](index.html) module"]
        pub struct CAN_BUFF3_SPEC;
        impl crate::RegisterSpec for CAN_BUFF3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff3::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff3::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF3 to value 0x0001_0001"]
        impl crate::Resettable for CAN_BUFF3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0001_0001
            }
        }
    }
    #[doc = "CAN_BUFF4 register accessor: an alias for `Reg<CAN_BUFF4_SPEC>`"]
    pub type CAN_BUFF4 = crate::Reg<can_buff4::CAN_BUFF4_SPEC>;
    #[doc = "CAN_BUFF4"]
    pub mod can_buff4 {
        #[doc = "Register `CAN_BUFF4` reader"]
        pub struct R(crate::R<CAN_BUFF4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF4` writer"]
        pub struct W(crate::W<CAN_BUFF4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF4_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF4\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff4](index.html) module"]
        pub struct CAN_BUFF4_SPEC;
        impl crate::RegisterSpec for CAN_BUFF4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff4::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff4::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF4 to value 0x0001_0001"]
        impl crate::Resettable for CAN_BUFF4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0001_0001
            }
        }
    }
    #[doc = "CAN_BUFF5 register accessor: an alias for `Reg<CAN_BUFF5_SPEC>`"]
    pub type CAN_BUFF5 = crate::Reg<can_buff5::CAN_BUFF5_SPEC>;
    #[doc = "CAN_BUFF5"]
    pub mod can_buff5 {
        #[doc = "Register `CAN_BUFF5` reader"]
        pub struct R(crate::R<CAN_BUFF5_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF5_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF5_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF5` writer"]
        pub struct W(crate::W<CAN_BUFF5_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF5_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF5_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF5\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff5](index.html) module"]
        pub struct CAN_BUFF5_SPEC;
        impl crate::RegisterSpec for CAN_BUFF5_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff5::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF5_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff5::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF5_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF5 to value 0"]
        impl crate::Resettable for CAN_BUFF5_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF6 register accessor: an alias for `Reg<CAN_BUFF6_SPEC>`"]
    pub type CAN_BUFF6 = crate::Reg<can_buff6::CAN_BUFF6_SPEC>;
    #[doc = "CAN_BUFF6"]
    pub mod can_buff6 {
        #[doc = "Register `CAN_BUFF6` reader"]
        pub struct R(crate::R<CAN_BUFF6_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF6_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF6_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF6` writer"]
        pub struct W(crate::W<CAN_BUFF6_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF6_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF6_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF6\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff6](index.html) module"]
        pub struct CAN_BUFF6_SPEC;
        impl crate::RegisterSpec for CAN_BUFF6_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff6::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF6_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff6::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF6_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF6 to value 0"]
        impl crate::Resettable for CAN_BUFF6_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF7 register accessor: an alias for `Reg<CAN_BUFF7_SPEC>`"]
    pub type CAN_BUFF7 = crate::Reg<can_buff7::CAN_BUFF7_SPEC>;
    #[doc = "CAN_BUFF7"]
    pub mod can_buff7 {
        #[doc = "Register `CAN_BUFF7` reader"]
        pub struct R(crate::R<CAN_BUFF7_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF7_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF7_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF7` writer"]
        pub struct W(crate::W<CAN_BUFF7_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF7_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF7_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF7\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff7](index.html) module"]
        pub struct CAN_BUFF7_SPEC;
        impl crate::RegisterSpec for CAN_BUFF7_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff7::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF7_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff7::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF7_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF7 to value 0"]
        impl crate::Resettable for CAN_BUFF7_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF8 register accessor: an alias for `Reg<CAN_BUFF8_SPEC>`"]
    pub type CAN_BUFF8 = crate::Reg<can_buff8::CAN_BUFF8_SPEC>;
    #[doc = "CAN_BUFF8"]
    pub mod can_buff8 {
        #[doc = "Register `CAN_BUFF8` reader"]
        pub struct R(crate::R<CAN_BUFF8_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF8_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF8_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF8_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF8` writer"]
        pub struct W(crate::W<CAN_BUFF8_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF8_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF8_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF8_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF8\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff8](index.html) module"]
        pub struct CAN_BUFF8_SPEC;
        impl crate::RegisterSpec for CAN_BUFF8_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff8::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF8_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff8::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF8_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF8 to value 0"]
        impl crate::Resettable for CAN_BUFF8_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF9 register accessor: an alias for `Reg<CAN_BUFF9_SPEC>`"]
    pub type CAN_BUFF9 = crate::Reg<can_buff9::CAN_BUFF9_SPEC>;
    #[doc = "CAN_BUFF9"]
    pub mod can_buff9 {
        #[doc = "Register `CAN_BUFF9` reader"]
        pub struct R(crate::R<CAN_BUFF9_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF9_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF9_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF9_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF9` writer"]
        pub struct W(crate::W<CAN_BUFF9_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF9_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF9_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF9_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF9\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff9](index.html) module"]
        pub struct CAN_BUFF9_SPEC;
        impl crate::RegisterSpec for CAN_BUFF9_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff9::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF9_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff9::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF9_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF9 to value 0"]
        impl crate::Resettable for CAN_BUFF9_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF10 register accessor: an alias for `Reg<CAN_BUFF10_SPEC>`"]
    pub type CAN_BUFF10 = crate::Reg<can_buff10::CAN_BUFF10_SPEC>;
    #[doc = "CAN_BUFF10"]
    pub mod can_buff10 {
        #[doc = "Register `CAN_BUFF10` reader"]
        pub struct R(crate::R<CAN_BUFF10_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF10_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF10_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF10_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF10` writer"]
        pub struct W(crate::W<CAN_BUFF10_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF10_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF10_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF10_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF10\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff10](index.html) module"]
        pub struct CAN_BUFF10_SPEC;
        impl crate::RegisterSpec for CAN_BUFF10_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff10::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF10_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff10::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF10_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF10 to value 0"]
        impl crate::Resettable for CAN_BUFF10_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF11 register accessor: an alias for `Reg<CAN_BUFF11_SPEC>`"]
    pub type CAN_BUFF11 = crate::Reg<can_buff11::CAN_BUFF11_SPEC>;
    #[doc = "CAN_BUFF11"]
    pub mod can_buff11 {
        #[doc = "Register `CAN_BUFF11` reader"]
        pub struct R(crate::R<CAN_BUFF11_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF11_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF11_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF11_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF11` writer"]
        pub struct W(crate::W<CAN_BUFF11_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF11_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF11_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF11_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF11\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff11](index.html) module"]
        pub struct CAN_BUFF11_SPEC;
        impl crate::RegisterSpec for CAN_BUFF11_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff11::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF11_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff11::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF11_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF11 to value 0"]
        impl crate::Resettable for CAN_BUFF11_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_BUFF12 register accessor: an alias for `Reg<CAN_BUFF12_SPEC>`"]
    pub type CAN_BUFF12 = crate::Reg<can_buff12::CAN_BUFF12_SPEC>;
    #[doc = "CAN_BUFF12"]
    pub mod can_buff12 {
        #[doc = "Register `CAN_BUFF12` reader"]
        pub struct R(crate::R<CAN_BUFF12_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_BUFF12_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_BUFF12_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_BUFF12_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_BUFF12` writer"]
        pub struct W(crate::W<CAN_BUFF12_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_BUFF12_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_BUFF12_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_BUFF12_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_BUFF12\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_buff12](index.html) module"]
        pub struct CAN_BUFF12_SPEC;
        impl crate::RegisterSpec for CAN_BUFF12_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_buff12::R](R) reader structure"]
        impl crate::Readable for CAN_BUFF12_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_buff12::W](W) writer structure"]
        impl crate::Writable for CAN_BUFF12_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_BUFF12 to value 0"]
        impl crate::Resettable for CAN_BUFF12_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_ACR0 register accessor: an alias for `Reg<CAN_ACR0_SPEC>`"]
    pub type CAN_ACR0 = crate::Reg<can_acr0::CAN_ACR0_SPEC>;
    #[doc = "CAN_ACR0"]
    pub mod can_acr0 {
        #[doc = "Register `CAN_ACR0` reader"]
        pub struct R(crate::R<CAN_ACR0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_ACR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_ACR0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_ACR0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_ACR0` writer"]
        pub struct W(crate::W<CAN_ACR0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_ACR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_ACR0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_ACR0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_ACR0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_acr0](index.html) module"]
        pub struct CAN_ACR0_SPEC;
        impl crate::RegisterSpec for CAN_ACR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_acr0::R](R) reader structure"]
        impl crate::Readable for CAN_ACR0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_acr0::W](W) writer structure"]
        impl crate::Writable for CAN_ACR0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_ACR0 to value 0"]
        impl crate::Resettable for CAN_ACR0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_ACR1 register accessor: an alias for `Reg<CAN_ACR1_SPEC>`"]
    pub type CAN_ACR1 = crate::Reg<can_acr1::CAN_ACR1_SPEC>;
    #[doc = "CAN_ACR1"]
    pub mod can_acr1 {
        #[doc = "Register `CAN_ACR1` reader"]
        pub struct R(crate::R<CAN_ACR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_ACR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_ACR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_ACR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_ACR1` writer"]
        pub struct W(crate::W<CAN_ACR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_ACR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_ACR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_ACR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_ACR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_acr1](index.html) module"]
        pub struct CAN_ACR1_SPEC;
        impl crate::RegisterSpec for CAN_ACR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_acr1::R](R) reader structure"]
        impl crate::Readable for CAN_ACR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_acr1::W](W) writer structure"]
        impl crate::Writable for CAN_ACR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_ACR1 to value 0"]
        impl crate::Resettable for CAN_ACR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_ACR2 register accessor: an alias for `Reg<CAN_ACR2_SPEC>`"]
    pub type CAN_ACR2 = crate::Reg<can_acr2::CAN_ACR2_SPEC>;
    #[doc = "CAN_ACR2"]
    pub mod can_acr2 {
        #[doc = "Register `CAN_ACR2` reader"]
        pub struct R(crate::R<CAN_ACR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_ACR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_ACR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_ACR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_ACR2` writer"]
        pub struct W(crate::W<CAN_ACR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_ACR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_ACR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_ACR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_ACR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_acr2](index.html) module"]
        pub struct CAN_ACR2_SPEC;
        impl crate::RegisterSpec for CAN_ACR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_acr2::R](R) reader structure"]
        impl crate::Readable for CAN_ACR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_acr2::W](W) writer structure"]
        impl crate::Writable for CAN_ACR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_ACR2 to value 0"]
        impl crate::Resettable for CAN_ACR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_ACR3 register accessor: an alias for `Reg<CAN_ACR3_SPEC>`"]
    pub type CAN_ACR3 = crate::Reg<can_acr3::CAN_ACR3_SPEC>;
    #[doc = "CAN_ACR3"]
    pub mod can_acr3 {
        #[doc = "Register `CAN_ACR3` reader"]
        pub struct R(crate::R<CAN_ACR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_ACR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_ACR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_ACR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_ACR3` writer"]
        pub struct W(crate::W<CAN_ACR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_ACR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_ACR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_ACR3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_ACR3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_acr3](index.html) module"]
        pub struct CAN_ACR3_SPEC;
        impl crate::RegisterSpec for CAN_ACR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_acr3::R](R) reader structure"]
        impl crate::Readable for CAN_ACR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_acr3::W](W) writer structure"]
        impl crate::Writable for CAN_ACR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_ACR3 to value 0"]
        impl crate::Resettable for CAN_ACR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_AMR0 register accessor: an alias for `Reg<CAN_AMR0_SPEC>`"]
    pub type CAN_AMR0 = crate::Reg<can_amr0::CAN_AMR0_SPEC>;
    #[doc = "CAN_AMR0"]
    pub mod can_amr0 {
        #[doc = "Register `CAN_AMR0` reader"]
        pub struct R(crate::R<CAN_AMR0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_AMR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_AMR0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_AMR0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_AMR0` writer"]
        pub struct W(crate::W<CAN_AMR0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_AMR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_AMR0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_AMR0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_AMR0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_amr0](index.html) module"]
        pub struct CAN_AMR0_SPEC;
        impl crate::RegisterSpec for CAN_AMR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_amr0::R](R) reader structure"]
        impl crate::Readable for CAN_AMR0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_amr0::W](W) writer structure"]
        impl crate::Writable for CAN_AMR0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_AMR0 to value 0"]
        impl crate::Resettable for CAN_AMR0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_AMR1 register accessor: an alias for `Reg<CAN_AMR1_SPEC>`"]
    pub type CAN_AMR1 = crate::Reg<can_amr1::CAN_AMR1_SPEC>;
    #[doc = "CAN_AMR1"]
    pub mod can_amr1 {
        #[doc = "Register `CAN_AMR1` reader"]
        pub struct R(crate::R<CAN_AMR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_AMR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_AMR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_AMR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_AMR1` writer"]
        pub struct W(crate::W<CAN_AMR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_AMR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_AMR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_AMR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_AMR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_amr1](index.html) module"]
        pub struct CAN_AMR1_SPEC;
        impl crate::RegisterSpec for CAN_AMR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_amr1::R](R) reader structure"]
        impl crate::Readable for CAN_AMR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_amr1::W](W) writer structure"]
        impl crate::Writable for CAN_AMR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_AMR1 to value 0"]
        impl crate::Resettable for CAN_AMR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_AMR2 register accessor: an alias for `Reg<CAN_AMR2_SPEC>`"]
    pub type CAN_AMR2 = crate::Reg<can_amr2::CAN_AMR2_SPEC>;
    #[doc = "CAN_AMR2"]
    pub mod can_amr2 {
        #[doc = "Register `CAN_AMR2` reader"]
        pub struct R(crate::R<CAN_AMR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_AMR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_AMR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_AMR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_AMR2` writer"]
        pub struct W(crate::W<CAN_AMR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_AMR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_AMR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_AMR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_AMR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_amr2](index.html) module"]
        pub struct CAN_AMR2_SPEC;
        impl crate::RegisterSpec for CAN_AMR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_amr2::R](R) reader structure"]
        impl crate::Readable for CAN_AMR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_amr2::W](W) writer structure"]
        impl crate::Writable for CAN_AMR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_AMR2 to value 0"]
        impl crate::Resettable for CAN_AMR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_AMR3 register accessor: an alias for `Reg<CAN_AMR3_SPEC>`"]
    pub type CAN_AMR3 = crate::Reg<can_amr3::CAN_AMR3_SPEC>;
    #[doc = "CAN_AMR3"]
    pub mod can_amr3 {
        #[doc = "Register `CAN_AMR3` reader"]
        pub struct R(crate::R<CAN_AMR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_AMR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_AMR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_AMR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_AMR3` writer"]
        pub struct W(crate::W<CAN_AMR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_AMR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_AMR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_AMR3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_AMR3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_amr3](index.html) module"]
        pub struct CAN_AMR3_SPEC;
        impl crate::RegisterSpec for CAN_AMR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_amr3::R](R) reader structure"]
        impl crate::Readable for CAN_AMR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_amr3::W](W) writer structure"]
        impl crate::Writable for CAN_AMR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_AMR3 to value 0"]
        impl crate::Resettable for CAN_AMR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_RMC register accessor: an alias for `Reg<CAN_RMC_SPEC>`"]
    pub type CAN_RMC = crate::Reg<can_rmc::CAN_RMC_SPEC>;
    #[doc = "CAN_RMC"]
    pub mod can_rmc {
        #[doc = "Register `CAN_RMC` reader"]
        pub struct R(crate::R<CAN_RMC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_RMC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_RMC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_RMC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CAN_RMC\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_rmc](index.html) module"]
        pub struct CAN_RMC_SPEC;
        impl crate::RegisterSpec for CAN_RMC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_rmc::R](R) reader structure"]
        impl crate::Readable for CAN_RMC_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CAN_RMC to value 0"]
        impl crate::Resettable for CAN_RMC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_RBSA register accessor: an alias for `Reg<CAN_RBSA_SPEC>`"]
    pub type CAN_RBSA = crate::Reg<can_rbsa::CAN_RBSA_SPEC>;
    #[doc = "CAN_RBSA"]
    pub mod can_rbsa {
        #[doc = "Register `CAN_RBSA` reader"]
        pub struct R(crate::R<CAN_RBSA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_RBSA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_RBSA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_RBSA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_RBSA` writer"]
        pub struct W(crate::W<CAN_RBSA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_RBSA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_RBSA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_RBSA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_RBSA\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_rbsa](index.html) module"]
        pub struct CAN_RBSA_SPEC;
        impl crate::RegisterSpec for CAN_RBSA_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_rbsa::R](R) reader structure"]
        impl crate::Readable for CAN_RBSA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_rbsa::W](W) writer structure"]
        impl crate::Writable for CAN_RBSA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_RBSA to value 0"]
        impl crate::Resettable for CAN_RBSA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_CDR register accessor: an alias for `Reg<CAN_CDR_SPEC>`"]
    pub type CAN_CDR = crate::Reg<can_cdr::CAN_CDR_SPEC>;
    #[doc = "CAN_CDR"]
    pub mod can_cdr {
        #[doc = "Register `CAN_CDR` reader"]
        pub struct R(crate::R<CAN_CDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_CDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_CDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_CDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_CDR` writer"]
        pub struct W(crate::W<CAN_CDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_CDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_CDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_CDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_CDR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_cdr](index.html) module"]
        pub struct CAN_CDR_SPEC;
        impl crate::RegisterSpec for CAN_CDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_cdr::R](R) reader structure"]
        impl crate::Readable for CAN_CDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_cdr::W](W) writer structure"]
        impl crate::Writable for CAN_CDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_CDR to value 0"]
        impl crate::Resettable for CAN_CDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_RXFIFO register accessor: an alias for `Reg<CAN_RXFIFO_SPEC>`"]
    pub type CAN_RXFIFO = crate::Reg<can_rxfifo::CAN_RXFIFO_SPEC>;
    #[doc = "CAN_RXFIFO"]
    pub mod can_rxfifo {
        #[doc = "Register `CAN_RXFIFO` reader"]
        pub struct R(crate::R<CAN_RXFIFO_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_RXFIFO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_RXFIFO_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_RXFIFO_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_RXFIFO` writer"]
        pub struct W(crate::W<CAN_RXFIFO_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_RXFIFO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_RXFIFO_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_RXFIFO_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_RXFIFO\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_rxfifo](index.html) module"]
        pub struct CAN_RXFIFO_SPEC;
        impl crate::RegisterSpec for CAN_RXFIFO_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_rxfifo::R](R) reader structure"]
        impl crate::Readable for CAN_RXFIFO_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_rxfifo::W](W) writer structure"]
        impl crate::Writable for CAN_RXFIFO_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_RXFIFO to value 0"]
        impl crate::Resettable for CAN_RXFIFO_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CAN_TXFIFO register accessor: an alias for `Reg<CAN_TXFIFO_SPEC>`"]
    pub type CAN_TXFIFO = crate::Reg<can_txfifo::CAN_TXFIFO_SPEC>;
    #[doc = "CAN_TXFIFO"]
    pub mod can_txfifo {
        #[doc = "Register `CAN_TXFIFO` reader"]
        pub struct R(crate::R<CAN_TXFIFO_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CAN_TXFIFO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CAN_TXFIFO_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CAN_TXFIFO_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CAN_TXFIFO` writer"]
        pub struct W(crate::W<CAN_TXFIFO_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CAN_TXFIFO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CAN_TXFIFO_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CAN_TXFIFO_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CAN_TXFIFO\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [can_txfifo](index.html) module"]
        pub struct CAN_TXFIFO_SPEC;
        impl crate::RegisterSpec for CAN_TXFIFO_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [can_txfifo::R](R) reader structure"]
        impl crate::Readable for CAN_TXFIFO_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [can_txfifo::W](W) writer structure"]
        impl crate::Writable for CAN_TXFIFO_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CAN_TXFIFO to value 0"]
        impl crate::Resettable for CAN_TXFIFO_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "CAN2"]
pub struct CAN2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAN2 {}
impl CAN2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can1::RegisterBlock = 0x4000_6800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAN2 {
    type Target = can1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN2").finish()
    }
}
#[doc = "CAN2"]
pub use can1 as can2;
#[doc = "GPIO1"]
pub struct GPIO1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO1 {}
impl GPIO1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio1::RegisterBlock = 0x4001_f000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO1 {
    type Target = gpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO1").finish()
    }
}
#[doc = "GPIO1"]
pub mod gpio1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO_DIR"]
        pub gpio_dir: crate::Reg<gpio_dir::GPIO_DIR_SPEC>,
        _reserved1: [u8; 0x04],
        #[doc = "0x08 - GPIO_CLR"]
        pub gpio_set: crate::Reg<gpio_set::GPIO_SET_SPEC>,
        #[doc = "0x0c - GPIO_CLR"]
        pub gpio_clr: crate::Reg<gpio_clr::GPIO_CLR_SPEC>,
        #[doc = "0x10 - GPIO_ODATA"]
        pub gpio_odata: crate::Reg<gpio_odata::GPIO_ODATA_SPEC>,
        #[doc = "0x14 - GPIO_IDATA"]
        pub gpio_idata: crate::Reg<gpio_idata::GPIO_IDATA_SPEC>,
        #[doc = "0x18 - GPIO_IEN"]
        pub gpio_ien: crate::Reg<gpio_ien::GPIO_IEN_SPEC>,
        #[doc = "0x1c - GPIO_IS"]
        pub gpio_is: crate::Reg<gpio_is::GPIO_IS_SPEC>,
        #[doc = "0x20 - CAN_ALC"]
        pub gpio_ibe: crate::Reg<gpio_ibe::GPIO_IBE_SPEC>,
        #[doc = "0x24 - GPIO_IEV"]
        pub gpio_iev: crate::Reg<gpio_iev::GPIO_IEV_SPEC>,
        #[doc = "0x28 - GPIO_IC"]
        pub gpio_ic: crate::Reg<gpio_ic::GPIO_IC_SPEC>,
        #[doc = "0x2c - GPIO_RIS"]
        pub gpio_ris: crate::Reg<gpio_ris::GPIO_RIS_SPEC>,
        #[doc = "0x30 - GPIO_MIS"]
        pub gpio_mis: crate::Reg<gpio_mis::GPIO_MIS_SPEC>,
    }
    #[doc = "GPIO_DIR register accessor: an alias for `Reg<GPIO_DIR_SPEC>`"]
    pub type GPIO_DIR = crate::Reg<gpio_dir::GPIO_DIR_SPEC>;
    #[doc = "GPIO_DIR"]
    pub mod gpio_dir {
        #[doc = "Register `GPIO_DIR` reader"]
        pub struct R(crate::R<GPIO_DIR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_DIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_DIR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_DIR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPIO_DIR` writer"]
        pub struct W(crate::W<GPIO_DIR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_DIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_DIR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_DIR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH15` writer - "]
        pub type PH15_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 31>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` writer - "]
        pub type PH14_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 30>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` writer - "]
        pub type PH13_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 29>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` writer - "]
        pub type PH12_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 28>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` writer - "]
        pub type PH11_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 27>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` writer - "]
        pub type PH10_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 26>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` writer - "]
        pub type PH9_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 25>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` writer - "]
        pub type PH8_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 24>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` writer - "]
        pub type PH7_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 23>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` writer - "]
        pub type PH6_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 22>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` writer - "]
        pub type PH5_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 21>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` writer - "]
        pub type PH4_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 20>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` writer - "]
        pub type PH3_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 19>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` writer - "]
        pub type PH2_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 18>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` writer - "]
        pub type PH1_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 17>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` writer - "]
        pub type PH0_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 16>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` writer - "]
        pub type PL15_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 15>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` writer - "]
        pub type PL14_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 14>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` writer - "]
        pub type PL13_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 13>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` writer - "]
        pub type PL12_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 12>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` writer - "]
        pub type PL11_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 11>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` writer - "]
        pub type PL10_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 10>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` writer - "]
        pub type PL9_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 9>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` writer - "]
        pub type PL8_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 8>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` writer - "]
        pub type PL7_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 7>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` writer - "]
        pub type PL6_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 6>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` writer - "]
        pub type PL5_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 5>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` writer - "]
        pub type PL4_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 4>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` writer - "]
        pub type PL3_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 3>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` writer - "]
        pub type PL2_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 2>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` writer - "]
        pub type PL1_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 1>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` writer - "]
        pub type PL0_W<'a> = crate::BitWriter<'a, u32, GPIO_DIR_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&mut self) -> PH15_W {
                PH15_W::new(self)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&mut self) -> PH14_W {
                PH14_W::new(self)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&mut self) -> PH13_W {
                PH13_W::new(self)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&mut self) -> PH12_W {
                PH12_W::new(self)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&mut self) -> PH11_W {
                PH11_W::new(self)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&mut self) -> PH10_W {
                PH10_W::new(self)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&mut self) -> PH9_W {
                PH9_W::new(self)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&mut self) -> PH8_W {
                PH8_W::new(self)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&mut self) -> PH7_W {
                PH7_W::new(self)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&mut self) -> PH6_W {
                PH6_W::new(self)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&mut self) -> PH5_W {
                PH5_W::new(self)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&mut self) -> PH4_W {
                PH4_W::new(self)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&mut self) -> PH3_W {
                PH3_W::new(self)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&mut self) -> PH2_W {
                PH2_W::new(self)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&mut self) -> PH1_W {
                PH1_W::new(self)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&mut self) -> PH0_W {
                PH0_W::new(self)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&mut self) -> PL15_W {
                PL15_W::new(self)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&mut self) -> PL14_W {
                PL14_W::new(self)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&mut self) -> PL13_W {
                PL13_W::new(self)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&mut self) -> PL12_W {
                PL12_W::new(self)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&mut self) -> PL11_W {
                PL11_W::new(self)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&mut self) -> PL10_W {
                PL10_W::new(self)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&mut self) -> PL9_W {
                PL9_W::new(self)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&mut self) -> PL8_W {
                PL8_W::new(self)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&mut self) -> PL7_W {
                PL7_W::new(self)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&mut self) -> PL6_W {
                PL6_W::new(self)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&mut self) -> PL5_W {
                PL5_W::new(self)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&mut self) -> PL4_W {
                PL4_W::new(self)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&mut self) -> PL3_W {
                PL3_W::new(self)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&mut self) -> PL2_W {
                PL2_W::new(self)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&mut self) -> PL1_W {
                PL1_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&mut self) -> PL0_W {
                PL0_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO_DIR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_dir](index.html) module"]
        pub struct GPIO_DIR_SPEC;
        impl crate::RegisterSpec for GPIO_DIR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_dir::R](R) reader structure"]
        impl crate::Readable for GPIO_DIR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_dir::W](W) writer structure"]
        impl crate::Writable for GPIO_DIR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GPIO_DIR to value 0x03"]
        impl crate::Resettable for GPIO_DIR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x03
            }
        }
    }
    #[doc = "GPIO_SET register accessor: an alias for `Reg<GPIO_SET_SPEC>`"]
    pub type GPIO_SET = crate::Reg<gpio_set::GPIO_SET_SPEC>;
    #[doc = "GPIO_CLR"]
    pub mod gpio_set {
        #[doc = "Register `GPIO_SET` writer"]
        pub struct W(crate::W<GPIO_SET_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_SET_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_SET_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_SET_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PH15` writer - "]
        pub type PH15_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 31>;
        #[doc = "Field `PH14` writer - "]
        pub type PH14_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 30>;
        #[doc = "Field `PH13` writer - "]
        pub type PH13_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 29>;
        #[doc = "Field `PH12` writer - "]
        pub type PH12_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 28>;
        #[doc = "Field `PH11` writer - "]
        pub type PH11_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 27>;
        #[doc = "Field `PH10` writer - "]
        pub type PH10_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 26>;
        #[doc = "Field `PH9` writer - "]
        pub type PH9_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 25>;
        #[doc = "Field `PH8` writer - "]
        pub type PH8_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 24>;
        #[doc = "Field `PH7` writer - "]
        pub type PH7_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 23>;
        #[doc = "Field `PH6` writer - "]
        pub type PH6_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 22>;
        #[doc = "Field `PH5` writer - "]
        pub type PH5_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 21>;
        #[doc = "Field `PH4` writer - "]
        pub type PH4_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 20>;
        #[doc = "Field `PH3` writer - "]
        pub type PH3_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 19>;
        #[doc = "Field `PH2` writer - "]
        pub type PH2_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 18>;
        #[doc = "Field `PH1` writer - "]
        pub type PH1_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 17>;
        #[doc = "Field `PH0` writer - "]
        pub type PH0_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 16>;
        #[doc = "Field `PL15` writer - "]
        pub type PL15_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 15>;
        #[doc = "Field `PL14` writer - "]
        pub type PL14_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 14>;
        #[doc = "Field `PL13` writer - "]
        pub type PL13_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 13>;
        #[doc = "Field `PL12` writer - "]
        pub type PL12_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 12>;
        #[doc = "Field `PL11` writer - "]
        pub type PL11_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 11>;
        #[doc = "Field `PL10` writer - "]
        pub type PL10_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 10>;
        #[doc = "Field `PL9` writer - "]
        pub type PL9_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 9>;
        #[doc = "Field `PL8` writer - "]
        pub type PL8_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 8>;
        #[doc = "Field `PL7` writer - "]
        pub type PL7_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 7>;
        #[doc = "Field `PL6` writer - "]
        pub type PL6_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 6>;
        #[doc = "Field `PL5` writer - "]
        pub type PL5_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 5>;
        #[doc = "Field `PL4` writer - "]
        pub type PL4_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 4>;
        #[doc = "Field `PL3` writer - "]
        pub type PL3_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 3>;
        #[doc = "Field `PL2` writer - "]
        pub type PL2_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 2>;
        #[doc = "Field `PL1` writer - "]
        pub type PL1_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 1>;
        #[doc = "Field `PL0` writer - "]
        pub type PL0_W<'a> = crate::BitWriter<'a, u32, GPIO_SET_SPEC, bool, 0>;
        impl W {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&mut self) -> PH15_W {
                PH15_W::new(self)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&mut self) -> PH14_W {
                PH14_W::new(self)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&mut self) -> PH13_W {
                PH13_W::new(self)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&mut self) -> PH12_W {
                PH12_W::new(self)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&mut self) -> PH11_W {
                PH11_W::new(self)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&mut self) -> PH10_W {
                PH10_W::new(self)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&mut self) -> PH9_W {
                PH9_W::new(self)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&mut self) -> PH8_W {
                PH8_W::new(self)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&mut self) -> PH7_W {
                PH7_W::new(self)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&mut self) -> PH6_W {
                PH6_W::new(self)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&mut self) -> PH5_W {
                PH5_W::new(self)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&mut self) -> PH4_W {
                PH4_W::new(self)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&mut self) -> PH3_W {
                PH3_W::new(self)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&mut self) -> PH2_W {
                PH2_W::new(self)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&mut self) -> PH1_W {
                PH1_W::new(self)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&mut self) -> PH0_W {
                PH0_W::new(self)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&mut self) -> PL15_W {
                PL15_W::new(self)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&mut self) -> PL14_W {
                PL14_W::new(self)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&mut self) -> PL13_W {
                PL13_W::new(self)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&mut self) -> PL12_W {
                PL12_W::new(self)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&mut self) -> PL11_W {
                PL11_W::new(self)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&mut self) -> PL10_W {
                PL10_W::new(self)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&mut self) -> PL9_W {
                PL9_W::new(self)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&mut self) -> PL8_W {
                PL8_W::new(self)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&mut self) -> PL7_W {
                PL7_W::new(self)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&mut self) -> PL6_W {
                PL6_W::new(self)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&mut self) -> PL5_W {
                PL5_W::new(self)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&mut self) -> PL4_W {
                PL4_W::new(self)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&mut self) -> PL3_W {
                PL3_W::new(self)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&mut self) -> PL2_W {
                PL2_W::new(self)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&mut self) -> PL1_W {
                PL1_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&mut self) -> PL0_W {
                PL0_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO_CLR\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_set](index.html) module"]
        pub struct GPIO_SET_SPEC;
        impl crate::RegisterSpec for GPIO_SET_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_set::W](W) writer structure"]
        impl crate::Writable for GPIO_SET_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GPIO_SET to value 0x3c"]
        impl crate::Resettable for GPIO_SET_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x3c
            }
        }
    }
    #[doc = "GPIO_CLR register accessor: an alias for `Reg<GPIO_CLR_SPEC>`"]
    pub type GPIO_CLR = crate::Reg<gpio_clr::GPIO_CLR_SPEC>;
    #[doc = "GPIO_CLR"]
    pub mod gpio_clr {
        #[doc = "Register `GPIO_CLR` writer"]
        pub struct W(crate::W<GPIO_CLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_CLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_CLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_CLR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PH15` writer - "]
        pub type PH15_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 31>;
        #[doc = "Field `PH14` writer - "]
        pub type PH14_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 30>;
        #[doc = "Field `PH13` writer - "]
        pub type PH13_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 29>;
        #[doc = "Field `PH12` writer - "]
        pub type PH12_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 28>;
        #[doc = "Field `PH11` writer - "]
        pub type PH11_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 27>;
        #[doc = "Field `PH10` writer - "]
        pub type PH10_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 26>;
        #[doc = "Field `PH9` writer - "]
        pub type PH9_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 25>;
        #[doc = "Field `PH8` writer - "]
        pub type PH8_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 24>;
        #[doc = "Field `PH7` writer - "]
        pub type PH7_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 23>;
        #[doc = "Field `PH6` writer - "]
        pub type PH6_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 22>;
        #[doc = "Field `PH5` writer - "]
        pub type PH5_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 21>;
        #[doc = "Field `PH4` writer - "]
        pub type PH4_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 20>;
        #[doc = "Field `PH3` writer - "]
        pub type PH3_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 19>;
        #[doc = "Field `PH2` writer - "]
        pub type PH2_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 18>;
        #[doc = "Field `PH1` writer - "]
        pub type PH1_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 17>;
        #[doc = "Field `PH0` writer - "]
        pub type PH0_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 16>;
        #[doc = "Field `PL15` writer - "]
        pub type PL15_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 15>;
        #[doc = "Field `PL14` writer - "]
        pub type PL14_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 14>;
        #[doc = "Field `PL13` writer - "]
        pub type PL13_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 13>;
        #[doc = "Field `PL12` writer - "]
        pub type PL12_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 12>;
        #[doc = "Field `PL11` writer - "]
        pub type PL11_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 11>;
        #[doc = "Field `PL10` writer - "]
        pub type PL10_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 10>;
        #[doc = "Field `PL9` writer - "]
        pub type PL9_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 9>;
        #[doc = "Field `PL8` writer - "]
        pub type PL8_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 8>;
        #[doc = "Field `PL7` writer - "]
        pub type PL7_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 7>;
        #[doc = "Field `PL6` writer - "]
        pub type PL6_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 6>;
        #[doc = "Field `PL5` writer - "]
        pub type PL5_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 5>;
        #[doc = "Field `PL4` writer - "]
        pub type PL4_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 4>;
        #[doc = "Field `PL3` writer - "]
        pub type PL3_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 3>;
        #[doc = "Field `PL2` writer - "]
        pub type PL2_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 2>;
        #[doc = "Field `PL1` writer - "]
        pub type PL1_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 1>;
        #[doc = "Field `PL0` writer - "]
        pub type PL0_W<'a> = crate::BitWriter<'a, u32, GPIO_CLR_SPEC, bool, 0>;
        impl W {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&mut self) -> PH15_W {
                PH15_W::new(self)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&mut self) -> PH14_W {
                PH14_W::new(self)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&mut self) -> PH13_W {
                PH13_W::new(self)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&mut self) -> PH12_W {
                PH12_W::new(self)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&mut self) -> PH11_W {
                PH11_W::new(self)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&mut self) -> PH10_W {
                PH10_W::new(self)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&mut self) -> PH9_W {
                PH9_W::new(self)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&mut self) -> PH8_W {
                PH8_W::new(self)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&mut self) -> PH7_W {
                PH7_W::new(self)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&mut self) -> PH6_W {
                PH6_W::new(self)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&mut self) -> PH5_W {
                PH5_W::new(self)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&mut self) -> PH4_W {
                PH4_W::new(self)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&mut self) -> PH3_W {
                PH3_W::new(self)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&mut self) -> PH2_W {
                PH2_W::new(self)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&mut self) -> PH1_W {
                PH1_W::new(self)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&mut self) -> PH0_W {
                PH0_W::new(self)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&mut self) -> PL15_W {
                PL15_W::new(self)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&mut self) -> PL14_W {
                PL14_W::new(self)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&mut self) -> PL13_W {
                PL13_W::new(self)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&mut self) -> PL12_W {
                PL12_W::new(self)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&mut self) -> PL11_W {
                PL11_W::new(self)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&mut self) -> PL10_W {
                PL10_W::new(self)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&mut self) -> PL9_W {
                PL9_W::new(self)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&mut self) -> PL8_W {
                PL8_W::new(self)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&mut self) -> PL7_W {
                PL7_W::new(self)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&mut self) -> PL6_W {
                PL6_W::new(self)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&mut self) -> PL5_W {
                PL5_W::new(self)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&mut self) -> PL4_W {
                PL4_W::new(self)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&mut self) -> PL3_W {
                PL3_W::new(self)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&mut self) -> PL2_W {
                PL2_W::new(self)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&mut self) -> PL1_W {
                PL1_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&mut self) -> PL0_W {
                PL0_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO_CLR\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_clr](index.html) module"]
        pub struct GPIO_CLR_SPEC;
        impl crate::RegisterSpec for GPIO_CLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_clr::W](W) writer structure"]
        impl crate::Writable for GPIO_CLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GPIO_CLR to value 0"]
        impl crate::Resettable for GPIO_CLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_ODATA register accessor: an alias for `Reg<GPIO_ODATA_SPEC>`"]
    pub type GPIO_ODATA = crate::Reg<gpio_odata::GPIO_ODATA_SPEC>;
    #[doc = "GPIO_ODATA"]
    pub mod gpio_odata {
        #[doc = "Register `GPIO_ODATA` reader"]
        pub struct R(crate::R<GPIO_ODATA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_ODATA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_ODATA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_ODATA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPIO_ODATA` writer"]
        pub struct W(crate::W<GPIO_ODATA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_ODATA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_ODATA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_ODATA_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH15` writer - "]
        pub type PH15_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 31>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` writer - "]
        pub type PH14_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 30>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` writer - "]
        pub type PH13_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 29>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` writer - "]
        pub type PH12_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 28>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` writer - "]
        pub type PH11_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 27>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` writer - "]
        pub type PH10_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 26>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` writer - "]
        pub type PH9_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 25>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` writer - "]
        pub type PH8_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 24>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` writer - "]
        pub type PH7_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 23>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` writer - "]
        pub type PH6_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 22>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` writer - "]
        pub type PH5_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 21>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` writer - "]
        pub type PH4_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 20>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` writer - "]
        pub type PH3_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 19>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` writer - "]
        pub type PH2_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 18>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` writer - "]
        pub type PH1_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 17>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` writer - "]
        pub type PH0_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 16>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` writer - "]
        pub type PL15_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 15>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` writer - "]
        pub type PL14_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 14>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` writer - "]
        pub type PL13_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 13>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` writer - "]
        pub type PL12_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 12>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` writer - "]
        pub type PL11_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 11>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` writer - "]
        pub type PL10_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 10>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` writer - "]
        pub type PL9_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 9>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` writer - "]
        pub type PL8_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 8>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` writer - "]
        pub type PL7_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 7>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` writer - "]
        pub type PL6_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 6>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` writer - "]
        pub type PL5_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 5>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` writer - "]
        pub type PL4_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 4>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` writer - "]
        pub type PL3_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 3>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` writer - "]
        pub type PL2_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 2>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` writer - "]
        pub type PL1_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 1>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` writer - "]
        pub type PL0_W<'a> = crate::BitWriter<'a, u32, GPIO_ODATA_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&mut self) -> PH15_W {
                PH15_W::new(self)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&mut self) -> PH14_W {
                PH14_W::new(self)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&mut self) -> PH13_W {
                PH13_W::new(self)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&mut self) -> PH12_W {
                PH12_W::new(self)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&mut self) -> PH11_W {
                PH11_W::new(self)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&mut self) -> PH10_W {
                PH10_W::new(self)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&mut self) -> PH9_W {
                PH9_W::new(self)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&mut self) -> PH8_W {
                PH8_W::new(self)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&mut self) -> PH7_W {
                PH7_W::new(self)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&mut self) -> PH6_W {
                PH6_W::new(self)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&mut self) -> PH5_W {
                PH5_W::new(self)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&mut self) -> PH4_W {
                PH4_W::new(self)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&mut self) -> PH3_W {
                PH3_W::new(self)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&mut self) -> PH2_W {
                PH2_W::new(self)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&mut self) -> PH1_W {
                PH1_W::new(self)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&mut self) -> PH0_W {
                PH0_W::new(self)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&mut self) -> PL15_W {
                PL15_W::new(self)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&mut self) -> PL14_W {
                PL14_W::new(self)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&mut self) -> PL13_W {
                PL13_W::new(self)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&mut self) -> PL12_W {
                PL12_W::new(self)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&mut self) -> PL11_W {
                PL11_W::new(self)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&mut self) -> PL10_W {
                PL10_W::new(self)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&mut self) -> PL9_W {
                PL9_W::new(self)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&mut self) -> PL8_W {
                PL8_W::new(self)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&mut self) -> PL7_W {
                PL7_W::new(self)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&mut self) -> PL6_W {
                PL6_W::new(self)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&mut self) -> PL5_W {
                PL5_W::new(self)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&mut self) -> PL4_W {
                PL4_W::new(self)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&mut self) -> PL3_W {
                PL3_W::new(self)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&mut self) -> PL2_W {
                PL2_W::new(self)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&mut self) -> PL1_W {
                PL1_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&mut self) -> PL0_W {
                PL0_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO_ODATA\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_odata](index.html) module"]
        pub struct GPIO_ODATA_SPEC;
        impl crate::RegisterSpec for GPIO_ODATA_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_odata::R](R) reader structure"]
        impl crate::Readable for GPIO_ODATA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_odata::W](W) writer structure"]
        impl crate::Writable for GPIO_ODATA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GPIO_ODATA to value 0"]
        impl crate::Resettable for GPIO_ODATA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_IDATA register accessor: an alias for `Reg<GPIO_IDATA_SPEC>`"]
    pub type GPIO_IDATA = crate::Reg<gpio_idata::GPIO_IDATA_SPEC>;
    #[doc = "GPIO_IDATA"]
    pub mod gpio_idata {
        #[doc = "Register `GPIO_IDATA` reader"]
        pub struct R(crate::R<GPIO_IDATA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_IDATA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_IDATA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_IDATA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        #[doc = "GPIO_IDATA\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_idata](index.html) module"]
        pub struct GPIO_IDATA_SPEC;
        impl crate::RegisterSpec for GPIO_IDATA_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_idata::R](R) reader structure"]
        impl crate::Readable for GPIO_IDATA_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GPIO_IDATA to value 0"]
        impl crate::Resettable for GPIO_IDATA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_IEN register accessor: an alias for `Reg<GPIO_IEN_SPEC>`"]
    pub type GPIO_IEN = crate::Reg<gpio_ien::GPIO_IEN_SPEC>;
    #[doc = "GPIO_IEN"]
    pub mod gpio_ien {
        #[doc = "Register `GPIO_IEN` reader"]
        pub struct R(crate::R<GPIO_IEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_IEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_IEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_IEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPIO_IEN` writer"]
        pub struct W(crate::W<GPIO_IEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_IEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_IEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_IEN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH15` writer - "]
        pub type PH15_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 31>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` writer - "]
        pub type PH14_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 30>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` writer - "]
        pub type PH13_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 29>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` writer - "]
        pub type PH12_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 28>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` writer - "]
        pub type PH11_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 27>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` writer - "]
        pub type PH10_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 26>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` writer - "]
        pub type PH9_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 25>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` writer - "]
        pub type PH8_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 24>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` writer - "]
        pub type PH7_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 23>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` writer - "]
        pub type PH6_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 22>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` writer - "]
        pub type PH5_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 21>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` writer - "]
        pub type PH4_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 20>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` writer - "]
        pub type PH3_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 19>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` writer - "]
        pub type PH2_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 18>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` writer - "]
        pub type PH1_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 17>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` writer - "]
        pub type PH0_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 16>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` writer - "]
        pub type PL15_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 15>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` writer - "]
        pub type PL14_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 14>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` writer - "]
        pub type PL13_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 13>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` writer - "]
        pub type PL12_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 12>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` writer - "]
        pub type PL11_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 11>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` writer - "]
        pub type PL10_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 10>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` writer - "]
        pub type PL9_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 9>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` writer - "]
        pub type PL8_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 8>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` writer - "]
        pub type PL7_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 7>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` writer - "]
        pub type PL6_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 6>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` writer - "]
        pub type PL5_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 5>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` writer - "]
        pub type PL4_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 4>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` writer - "]
        pub type PL3_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 3>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` writer - "]
        pub type PL2_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 2>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` writer - "]
        pub type PL1_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 1>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` writer - "]
        pub type PL0_W<'a> = crate::BitWriter<'a, u32, GPIO_IEN_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&mut self) -> PH15_W {
                PH15_W::new(self)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&mut self) -> PH14_W {
                PH14_W::new(self)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&mut self) -> PH13_W {
                PH13_W::new(self)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&mut self) -> PH12_W {
                PH12_W::new(self)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&mut self) -> PH11_W {
                PH11_W::new(self)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&mut self) -> PH10_W {
                PH10_W::new(self)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&mut self) -> PH9_W {
                PH9_W::new(self)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&mut self) -> PH8_W {
                PH8_W::new(self)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&mut self) -> PH7_W {
                PH7_W::new(self)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&mut self) -> PH6_W {
                PH6_W::new(self)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&mut self) -> PH5_W {
                PH5_W::new(self)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&mut self) -> PH4_W {
                PH4_W::new(self)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&mut self) -> PH3_W {
                PH3_W::new(self)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&mut self) -> PH2_W {
                PH2_W::new(self)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&mut self) -> PH1_W {
                PH1_W::new(self)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&mut self) -> PH0_W {
                PH0_W::new(self)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&mut self) -> PL15_W {
                PL15_W::new(self)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&mut self) -> PL14_W {
                PL14_W::new(self)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&mut self) -> PL13_W {
                PL13_W::new(self)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&mut self) -> PL12_W {
                PL12_W::new(self)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&mut self) -> PL11_W {
                PL11_W::new(self)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&mut self) -> PL10_W {
                PL10_W::new(self)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&mut self) -> PL9_W {
                PL9_W::new(self)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&mut self) -> PL8_W {
                PL8_W::new(self)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&mut self) -> PL7_W {
                PL7_W::new(self)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&mut self) -> PL6_W {
                PL6_W::new(self)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&mut self) -> PL5_W {
                PL5_W::new(self)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&mut self) -> PL4_W {
                PL4_W::new(self)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&mut self) -> PL3_W {
                PL3_W::new(self)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&mut self) -> PL2_W {
                PL2_W::new(self)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&mut self) -> PL1_W {
                PL1_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&mut self) -> PL0_W {
                PL0_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO_IEN\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_ien](index.html) module"]
        pub struct GPIO_IEN_SPEC;
        impl crate::RegisterSpec for GPIO_IEN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_ien::R](R) reader structure"]
        impl crate::Readable for GPIO_IEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_ien::W](W) writer structure"]
        impl crate::Writable for GPIO_IEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GPIO_IEN to value 0"]
        impl crate::Resettable for GPIO_IEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_IS register accessor: an alias for `Reg<GPIO_IS_SPEC>`"]
    pub type GPIO_IS = crate::Reg<gpio_is::GPIO_IS_SPEC>;
    #[doc = "GPIO_IS"]
    pub mod gpio_is {
        #[doc = "Register `GPIO_IS` reader"]
        pub struct R(crate::R<GPIO_IS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_IS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_IS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_IS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPIO_IS` writer"]
        pub struct W(crate::W<GPIO_IS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_IS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_IS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_IS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH15` writer - "]
        pub type PH15_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 31>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` writer - "]
        pub type PH14_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 30>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` writer - "]
        pub type PH13_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 29>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` writer - "]
        pub type PH12_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 28>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` writer - "]
        pub type PH11_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 27>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` writer - "]
        pub type PH10_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 26>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` writer - "]
        pub type PH9_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 25>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` writer - "]
        pub type PH8_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 24>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` writer - "]
        pub type PH7_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 23>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` writer - "]
        pub type PH6_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 22>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` writer - "]
        pub type PH5_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 21>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` writer - "]
        pub type PH4_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 20>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` writer - "]
        pub type PH3_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 19>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` writer - "]
        pub type PH2_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 18>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` writer - "]
        pub type PH1_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 17>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` writer - "]
        pub type PH0_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 16>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` writer - "]
        pub type PL15_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 15>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` writer - "]
        pub type PL14_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 14>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` writer - "]
        pub type PL13_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 13>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` writer - "]
        pub type PL12_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 12>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` writer - "]
        pub type PL11_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 11>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` writer - "]
        pub type PL10_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 10>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` writer - "]
        pub type PL9_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 9>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` writer - "]
        pub type PL8_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 8>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` writer - "]
        pub type PL7_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 7>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` writer - "]
        pub type PL6_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 6>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` writer - "]
        pub type PL5_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 5>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` writer - "]
        pub type PL4_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 4>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` writer - "]
        pub type PL3_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 3>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` writer - "]
        pub type PL2_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 2>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` writer - "]
        pub type PL1_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 1>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` writer - "]
        pub type PL0_W<'a> = crate::BitWriter<'a, u32, GPIO_IS_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&mut self) -> PH15_W {
                PH15_W::new(self)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&mut self) -> PH14_W {
                PH14_W::new(self)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&mut self) -> PH13_W {
                PH13_W::new(self)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&mut self) -> PH12_W {
                PH12_W::new(self)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&mut self) -> PH11_W {
                PH11_W::new(self)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&mut self) -> PH10_W {
                PH10_W::new(self)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&mut self) -> PH9_W {
                PH9_W::new(self)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&mut self) -> PH8_W {
                PH8_W::new(self)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&mut self) -> PH7_W {
                PH7_W::new(self)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&mut self) -> PH6_W {
                PH6_W::new(self)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&mut self) -> PH5_W {
                PH5_W::new(self)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&mut self) -> PH4_W {
                PH4_W::new(self)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&mut self) -> PH3_W {
                PH3_W::new(self)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&mut self) -> PH2_W {
                PH2_W::new(self)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&mut self) -> PH1_W {
                PH1_W::new(self)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&mut self) -> PH0_W {
                PH0_W::new(self)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&mut self) -> PL15_W {
                PL15_W::new(self)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&mut self) -> PL14_W {
                PL14_W::new(self)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&mut self) -> PL13_W {
                PL13_W::new(self)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&mut self) -> PL12_W {
                PL12_W::new(self)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&mut self) -> PL11_W {
                PL11_W::new(self)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&mut self) -> PL10_W {
                PL10_W::new(self)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&mut self) -> PL9_W {
                PL9_W::new(self)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&mut self) -> PL8_W {
                PL8_W::new(self)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&mut self) -> PL7_W {
                PL7_W::new(self)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&mut self) -> PL6_W {
                PL6_W::new(self)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&mut self) -> PL5_W {
                PL5_W::new(self)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&mut self) -> PL4_W {
                PL4_W::new(self)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&mut self) -> PL3_W {
                PL3_W::new(self)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&mut self) -> PL2_W {
                PL2_W::new(self)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&mut self) -> PL1_W {
                PL1_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&mut self) -> PL0_W {
                PL0_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO_IS\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_is](index.html) module"]
        pub struct GPIO_IS_SPEC;
        impl crate::RegisterSpec for GPIO_IS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_is::R](R) reader structure"]
        impl crate::Readable for GPIO_IS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_is::W](W) writer structure"]
        impl crate::Writable for GPIO_IS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GPIO_IS to value 0"]
        impl crate::Resettable for GPIO_IS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_IBE register accessor: an alias for `Reg<GPIO_IBE_SPEC>`"]
    pub type GPIO_IBE = crate::Reg<gpio_ibe::GPIO_IBE_SPEC>;
    #[doc = "CAN_ALC"]
    pub mod gpio_ibe {
        #[doc = "Register `GPIO_IBE` reader"]
        pub struct R(crate::R<GPIO_IBE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_IBE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_IBE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_IBE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        #[doc = "CAN_ALC\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_ibe](index.html) module"]
        pub struct GPIO_IBE_SPEC;
        impl crate::RegisterSpec for GPIO_IBE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_ibe::R](R) reader structure"]
        impl crate::Readable for GPIO_IBE_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GPIO_IBE to value 0"]
        impl crate::Resettable for GPIO_IBE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_IEV register accessor: an alias for `Reg<GPIO_IEV_SPEC>`"]
    pub type GPIO_IEV = crate::Reg<gpio_iev::GPIO_IEV_SPEC>;
    #[doc = "GPIO_IEV"]
    pub mod gpio_iev {
        #[doc = "Register `GPIO_IEV` reader"]
        pub struct R(crate::R<GPIO_IEV_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_IEV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_IEV_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_IEV_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        #[doc = "GPIO_IEV\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_iev](index.html) module"]
        pub struct GPIO_IEV_SPEC;
        impl crate::RegisterSpec for GPIO_IEV_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_iev::R](R) reader structure"]
        impl crate::Readable for GPIO_IEV_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GPIO_IEV to value 0"]
        impl crate::Resettable for GPIO_IEV_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_IC register accessor: an alias for `Reg<GPIO_IC_SPEC>`"]
    pub type GPIO_IC = crate::Reg<gpio_ic::GPIO_IC_SPEC>;
    #[doc = "GPIO_IC"]
    pub mod gpio_ic {
        #[doc = "Register `GPIO_IC` writer"]
        pub struct W(crate::W<GPIO_IC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_IC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_IC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_IC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PH15` writer - "]
        pub type PH15_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 31>;
        #[doc = "Field `PH14` writer - "]
        pub type PH14_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 30>;
        #[doc = "Field `PH13` writer - "]
        pub type PH13_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 29>;
        #[doc = "Field `PH12` writer - "]
        pub type PH12_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 28>;
        #[doc = "Field `PH11` writer - "]
        pub type PH11_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 27>;
        #[doc = "Field `PH10` writer - "]
        pub type PH10_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 26>;
        #[doc = "Field `PH9` writer - "]
        pub type PH9_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 25>;
        #[doc = "Field `PH8` writer - "]
        pub type PH8_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 24>;
        #[doc = "Field `PH7` writer - "]
        pub type PH7_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 23>;
        #[doc = "Field `PH6` writer - "]
        pub type PH6_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 22>;
        #[doc = "Field `PH5` writer - "]
        pub type PH5_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 21>;
        #[doc = "Field `PH4` writer - "]
        pub type PH4_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 20>;
        #[doc = "Field `PH3` writer - "]
        pub type PH3_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 19>;
        #[doc = "Field `PH2` writer - "]
        pub type PH2_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 18>;
        #[doc = "Field `PH1` writer - "]
        pub type PH1_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 17>;
        #[doc = "Field `PH0` writer - "]
        pub type PH0_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 16>;
        #[doc = "Field `PL15` writer - "]
        pub type PL15_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 15>;
        #[doc = "Field `PL14` writer - "]
        pub type PL14_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 14>;
        #[doc = "Field `PL13` writer - "]
        pub type PL13_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 13>;
        #[doc = "Field `PL12` writer - "]
        pub type PL12_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 12>;
        #[doc = "Field `PL11` writer - "]
        pub type PL11_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 11>;
        #[doc = "Field `PL10` writer - "]
        pub type PL10_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 10>;
        #[doc = "Field `PL9` writer - "]
        pub type PL9_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 9>;
        #[doc = "Field `PL8` writer - "]
        pub type PL8_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 8>;
        #[doc = "Field `PL7` writer - "]
        pub type PL7_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 7>;
        #[doc = "Field `PL6` writer - "]
        pub type PL6_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 6>;
        #[doc = "Field `PL5` writer - "]
        pub type PL5_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 5>;
        #[doc = "Field `PL4` writer - "]
        pub type PL4_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 4>;
        #[doc = "Field `PL3` writer - "]
        pub type PL3_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 3>;
        #[doc = "Field `PL2` writer - "]
        pub type PL2_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 2>;
        #[doc = "Field `PL1` writer - "]
        pub type PL1_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 1>;
        #[doc = "Field `PL0` writer - "]
        pub type PL0_W<'a> = crate::BitWriter<'a, u32, GPIO_IC_SPEC, bool, 0>;
        impl W {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&mut self) -> PH15_W {
                PH15_W::new(self)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&mut self) -> PH14_W {
                PH14_W::new(self)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&mut self) -> PH13_W {
                PH13_W::new(self)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&mut self) -> PH12_W {
                PH12_W::new(self)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&mut self) -> PH11_W {
                PH11_W::new(self)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&mut self) -> PH10_W {
                PH10_W::new(self)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&mut self) -> PH9_W {
                PH9_W::new(self)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&mut self) -> PH8_W {
                PH8_W::new(self)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&mut self) -> PH7_W {
                PH7_W::new(self)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&mut self) -> PH6_W {
                PH6_W::new(self)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&mut self) -> PH5_W {
                PH5_W::new(self)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&mut self) -> PH4_W {
                PH4_W::new(self)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&mut self) -> PH3_W {
                PH3_W::new(self)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&mut self) -> PH2_W {
                PH2_W::new(self)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&mut self) -> PH1_W {
                PH1_W::new(self)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&mut self) -> PH0_W {
                PH0_W::new(self)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&mut self) -> PL15_W {
                PL15_W::new(self)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&mut self) -> PL14_W {
                PL14_W::new(self)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&mut self) -> PL13_W {
                PL13_W::new(self)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&mut self) -> PL12_W {
                PL12_W::new(self)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&mut self) -> PL11_W {
                PL11_W::new(self)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&mut self) -> PL10_W {
                PL10_W::new(self)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&mut self) -> PL9_W {
                PL9_W::new(self)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&mut self) -> PL8_W {
                PL8_W::new(self)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&mut self) -> PL7_W {
                PL7_W::new(self)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&mut self) -> PL6_W {
                PL6_W::new(self)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&mut self) -> PL5_W {
                PL5_W::new(self)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&mut self) -> PL4_W {
                PL4_W::new(self)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&mut self) -> PL3_W {
                PL3_W::new(self)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&mut self) -> PL2_W {
                PL2_W::new(self)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&mut self) -> PL1_W {
                PL1_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&mut self) -> PL0_W {
                PL0_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO_IC\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_ic](index.html) module"]
        pub struct GPIO_IC_SPEC;
        impl crate::RegisterSpec for GPIO_IC_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_ic::W](W) writer structure"]
        impl crate::Writable for GPIO_IC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GPIO_IC to value 0"]
        impl crate::Resettable for GPIO_IC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_RIS register accessor: an alias for `Reg<GPIO_RIS_SPEC>`"]
    pub type GPIO_RIS = crate::Reg<gpio_ris::GPIO_RIS_SPEC>;
    #[doc = "GPIO_RIS"]
    pub mod gpio_ris {
        #[doc = "Register `GPIO_RIS` reader"]
        pub struct R(crate::R<GPIO_RIS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_RIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_RIS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_RIS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        #[doc = "GPIO_RIS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_ris](index.html) module"]
        pub struct GPIO_RIS_SPEC;
        impl crate::RegisterSpec for GPIO_RIS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_ris::R](R) reader structure"]
        impl crate::Readable for GPIO_RIS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GPIO_RIS to value 0"]
        impl crate::Resettable for GPIO_RIS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GPIO_MIS register accessor: an alias for `Reg<GPIO_MIS_SPEC>`"]
    pub type GPIO_MIS = crate::Reg<gpio_mis::GPIO_MIS_SPEC>;
    #[doc = "GPIO_MIS"]
    pub mod gpio_mis {
        #[doc = "Register `GPIO_MIS` reader"]
        pub struct R(crate::R<GPIO_MIS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_MIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_MIS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_MIS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `PH15` reader - "]
        pub type PH15_R = crate::BitReader<bool>;
        #[doc = "Field `PH14` reader - "]
        pub type PH14_R = crate::BitReader<bool>;
        #[doc = "Field `PH13` reader - "]
        pub type PH13_R = crate::BitReader<bool>;
        #[doc = "Field `PH12` reader - "]
        pub type PH12_R = crate::BitReader<bool>;
        #[doc = "Field `PH11` reader - "]
        pub type PH11_R = crate::BitReader<bool>;
        #[doc = "Field `PH10` reader - "]
        pub type PH10_R = crate::BitReader<bool>;
        #[doc = "Field `PH9` reader - "]
        pub type PH9_R = crate::BitReader<bool>;
        #[doc = "Field `PH8` reader - "]
        pub type PH8_R = crate::BitReader<bool>;
        #[doc = "Field `PH7` reader - "]
        pub type PH7_R = crate::BitReader<bool>;
        #[doc = "Field `PH6` reader - "]
        pub type PH6_R = crate::BitReader<bool>;
        #[doc = "Field `PH5` reader - "]
        pub type PH5_R = crate::BitReader<bool>;
        #[doc = "Field `PH4` reader - "]
        pub type PH4_R = crate::BitReader<bool>;
        #[doc = "Field `PH3` reader - "]
        pub type PH3_R = crate::BitReader<bool>;
        #[doc = "Field `PH2` reader - "]
        pub type PH2_R = crate::BitReader<bool>;
        #[doc = "Field `PH1` reader - "]
        pub type PH1_R = crate::BitReader<bool>;
        #[doc = "Field `PH0` reader - "]
        pub type PH0_R = crate::BitReader<bool>;
        #[doc = "Field `PL15` reader - "]
        pub type PL15_R = crate::BitReader<bool>;
        #[doc = "Field `PL14` reader - "]
        pub type PL14_R = crate::BitReader<bool>;
        #[doc = "Field `PL13` reader - "]
        pub type PL13_R = crate::BitReader<bool>;
        #[doc = "Field `PL12` reader - "]
        pub type PL12_R = crate::BitReader<bool>;
        #[doc = "Field `PL11` reader - "]
        pub type PL11_R = crate::BitReader<bool>;
        #[doc = "Field `PL10` reader - "]
        pub type PL10_R = crate::BitReader<bool>;
        #[doc = "Field `PL9` reader - "]
        pub type PL9_R = crate::BitReader<bool>;
        #[doc = "Field `PL8` reader - "]
        pub type PL8_R = crate::BitReader<bool>;
        #[doc = "Field `PL7` reader - "]
        pub type PL7_R = crate::BitReader<bool>;
        #[doc = "Field `PL6` reader - "]
        pub type PL6_R = crate::BitReader<bool>;
        #[doc = "Field `PL5` reader - "]
        pub type PL5_R = crate::BitReader<bool>;
        #[doc = "Field `PL4` reader - "]
        pub type PL4_R = crate::BitReader<bool>;
        #[doc = "Field `PL3` reader - "]
        pub type PL3_R = crate::BitReader<bool>;
        #[doc = "Field `PL2` reader - "]
        pub type PL2_R = crate::BitReader<bool>;
        #[doc = "Field `PL1` reader - "]
        pub type PL1_R = crate::BitReader<bool>;
        #[doc = "Field `PL0` reader - "]
        pub type PL0_R = crate::BitReader<bool>;
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn ph15(&self) -> PH15_R {
                PH15_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn ph14(&self) -> PH14_R {
                PH14_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn ph13(&self) -> PH13_R {
                PH13_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn ph12(&self) -> PH12_R {
                PH12_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn ph11(&self) -> PH11_R {
                PH11_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn ph10(&self) -> PH10_R {
                PH10_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn ph9(&self) -> PH9_R {
                PH9_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn ph8(&self) -> PH8_R {
                PH8_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23"]
            #[inline(always)]
            pub fn ph7(&self) -> PH7_R {
                PH7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22"]
            #[inline(always)]
            pub fn ph6(&self) -> PH6_R {
                PH6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn ph5(&self) -> PH5_R {
                PH5_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn ph4(&self) -> PH4_R {
                PH4_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19"]
            #[inline(always)]
            pub fn ph3(&self) -> PH3_R {
                PH3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18"]
            #[inline(always)]
            pub fn ph2(&self) -> PH2_R {
                PH2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17"]
            #[inline(always)]
            pub fn ph1(&self) -> PH1_R {
                PH1_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ph0(&self) -> PH0_R {
                PH0_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn pl15(&self) -> PL15_R {
                PL15_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn pl14(&self) -> PL14_R {
                PL14_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn pl13(&self) -> PL13_R {
                PL13_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn pl12(&self) -> PL12_R {
                PL12_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn pl11(&self) -> PL11_R {
                PL11_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn pl10(&self) -> PL10_R {
                PL10_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn pl9(&self) -> PL9_R {
                PL9_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn pl8(&self) -> PL8_R {
                PL8_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn pl7(&self) -> PL7_R {
                PL7_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pl6(&self) -> PL6_R {
                PL6_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn pl5(&self) -> PL5_R {
                PL5_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn pl4(&self) -> PL4_R {
                PL4_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn pl3(&self) -> PL3_R {
                PL3_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn pl2(&self) -> PL2_R {
                PL2_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn pl1(&self) -> PL1_R {
                PL1_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn pl0(&self) -> PL0_R {
                PL0_R::new((self.bits & 1) != 0)
            }
        }
        #[doc = "GPIO_MIS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_mis](index.html) module"]
        pub struct GPIO_MIS_SPEC;
        impl crate::RegisterSpec for GPIO_MIS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_mis::R](R) reader structure"]
        impl crate::Readable for GPIO_MIS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GPIO_MIS to value 0"]
        impl crate::Resettable for GPIO_MIS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "GPIO2"]
pub struct GPIO2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO2 {}
impl GPIO2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio1::RegisterBlock = 0x4001_f400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO2 {
    type Target = gpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO2").finish()
    }
}
#[doc = "GPIO2"]
pub use gpio1 as gpio2;
#[doc = "GPIO3"]
pub struct GPIO3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO3 {}
impl GPIO3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio1::RegisterBlock = 0x4001_f800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO3 {
    type Target = gpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO3").finish()
    }
}
#[doc = "GPIO3"]
pub use gpio1 as gpio3;
#[doc = "EXTI"]
pub struct EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EXTI {}
impl EXTI {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const exti::RegisterBlock = 0x4001_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
#[doc = "EXTI"]
pub mod exti {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - IENR"]
        pub ienr: crate::Reg<ienr::IENR_SPEC>,
        #[doc = "0x04 - EENR"]
        pub eenr: crate::Reg<eenr::EENR_SPEC>,
        #[doc = "0x08 - RTENR"]
        pub rtenr: crate::Reg<rtenr::RTENR_SPEC>,
        #[doc = "0x0c - FTENR"]
        pub ftenr: crate::Reg<ftenr::FTENR_SPEC>,
        #[doc = "0x10 - SWIER"]
        pub swier: crate::Reg<swier::SWIER_SPEC>,
        #[doc = "0x14 - PDR"]
        pub pdr: crate::Reg<pdr::PDR_SPEC>,
        #[doc = "0x18 - EXTICR1"]
        pub exticr1: crate::Reg<exticr1::EXTICR1_SPEC>,
        #[doc = "0x1c - CAN_ALC"]
        pub exticr2: crate::Reg<exticr2::EXTICR2_SPEC>,
    }
    #[doc = "IENR register accessor: an alias for `Reg<IENR_SPEC>`"]
    pub type IENR = crate::Reg<ienr::IENR_SPEC>;
    #[doc = "IENR"]
    pub mod ienr {
        #[doc = "Register `IENR` reader"]
        pub struct R(crate::R<IENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IENR` writer"]
        pub struct W(crate::W<IENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IENR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IENR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ienr](index.html) module"]
        pub struct IENR_SPEC;
        impl crate::RegisterSpec for IENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ienr::R](R) reader structure"]
        impl crate::Readable for IENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ienr::W](W) writer structure"]
        impl crate::Writable for IENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IENR to value 0"]
        impl crate::Resettable for IENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EENR register accessor: an alias for `Reg<EENR_SPEC>`"]
    pub type EENR = crate::Reg<eenr::EENR_SPEC>;
    #[doc = "EENR"]
    pub mod eenr {
        #[doc = "Register `EENR` reader"]
        pub struct R(crate::R<EENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EENR` writer"]
        pub struct W(crate::W<EENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EENR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "EENR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [eenr](index.html) module"]
        pub struct EENR_SPEC;
        impl crate::RegisterSpec for EENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [eenr::R](R) reader structure"]
        impl crate::Readable for EENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [eenr::W](W) writer structure"]
        impl crate::Writable for EENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EENR to value 0"]
        impl crate::Resettable for EENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RTENR register accessor: an alias for `Reg<RTENR_SPEC>`"]
    pub type RTENR = crate::Reg<rtenr::RTENR_SPEC>;
    #[doc = "RTENR"]
    pub mod rtenr {
        #[doc = "Register `RTENR` reader"]
        pub struct R(crate::R<RTENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RTENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RTENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RTENR` writer"]
        pub struct W(crate::W<RTENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RTENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RTENR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RTENR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtenr](index.html) module"]
        pub struct RTENR_SPEC;
        impl crate::RegisterSpec for RTENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rtenr::R](R) reader structure"]
        impl crate::Readable for RTENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rtenr::W](W) writer structure"]
        impl crate::Writable for RTENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RTENR to value 0"]
        impl crate::Resettable for RTENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FTENR register accessor: an alias for `Reg<FTENR_SPEC>`"]
    pub type FTENR = crate::Reg<ftenr::FTENR_SPEC>;
    #[doc = "FTENR"]
    pub mod ftenr {
        #[doc = "Register `FTENR` reader"]
        pub struct R(crate::R<FTENR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FTENR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FTENR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FTENR` writer"]
        pub struct W(crate::W<FTENR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FTENR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FTENR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FTENR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FTENR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ftenr](index.html) module"]
        pub struct FTENR_SPEC;
        impl crate::RegisterSpec for FTENR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ftenr::R](R) reader structure"]
        impl crate::Readable for FTENR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ftenr::W](W) writer structure"]
        impl crate::Writable for FTENR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FTENR to value 0"]
        impl crate::Resettable for FTENR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SWIER register accessor: an alias for `Reg<SWIER_SPEC>`"]
    pub type SWIER = crate::Reg<swier::SWIER_SPEC>;
    #[doc = "SWIER"]
    pub mod swier {
        #[doc = "Register `SWIER` reader"]
        pub struct R(crate::R<SWIER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SWIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SWIER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SWIER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SWIER` writer"]
        pub struct W(crate::W<SWIER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SWIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SWIER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SWIER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SWIER\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swier](index.html) module"]
        pub struct SWIER_SPEC;
        impl crate::RegisterSpec for SWIER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [swier::R](R) reader structure"]
        impl crate::Readable for SWIER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [swier::W](W) writer structure"]
        impl crate::Writable for SWIER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SWIER to value 0"]
        impl crate::Resettable for SWIER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PDR register accessor: an alias for `Reg<PDR_SPEC>`"]
    pub type PDR = crate::Reg<pdr::PDR_SPEC>;
    #[doc = "PDR"]
    pub mod pdr {
        #[doc = "Register `PDR` reader"]
        pub struct R(crate::R<PDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PDR` writer"]
        pub struct W(crate::W<PDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "PDR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdr](index.html) module"]
        pub struct PDR_SPEC;
        impl crate::RegisterSpec for PDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pdr::R](R) reader structure"]
        impl crate::Readable for PDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pdr::W](W) writer structure"]
        impl crate::Writable for PDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PDR to value 0"]
        impl crate::Resettable for PDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EXTICR1 register accessor: an alias for `Reg<EXTICR1_SPEC>`"]
    pub type EXTICR1 = crate::Reg<exticr1::EXTICR1_SPEC>;
    #[doc = "EXTICR1"]
    pub mod exticr1 {
        #[doc = "Register `EXTICR1` reader"]
        pub struct R(crate::R<EXTICR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXTICR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXTICR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXTICR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXTICR1` writer"]
        pub struct W(crate::W<EXTICR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXTICR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXTICR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXTICR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "EXTICR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr1](index.html) module"]
        pub struct EXTICR1_SPEC;
        impl crate::RegisterSpec for EXTICR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [exticr1::R](R) reader structure"]
        impl crate::Readable for EXTICR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [exticr1::W](W) writer structure"]
        impl crate::Writable for EXTICR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EXTICR1 to value 0"]
        impl crate::Resettable for EXTICR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EXTICR2 register accessor: an alias for `Reg<EXTICR2_SPEC>`"]
    pub type EXTICR2 = crate::Reg<exticr2::EXTICR2_SPEC>;
    #[doc = "CAN_ALC"]
    pub mod exticr2 {
        #[doc = "Register `EXTICR2` reader"]
        pub struct R(crate::R<EXTICR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXTICR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXTICR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXTICR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CAN_ALC\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr2](index.html) module"]
        pub struct EXTICR2_SPEC;
        impl crate::RegisterSpec for EXTICR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [exticr2::R](R) reader structure"]
        impl crate::Readable for EXTICR2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets EXTICR2 to value 0"]
        impl crate::Resettable for EXTICR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "WDT"]
pub struct WDT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDT {}
impl WDT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdt::RegisterBlock = 0x4000_2c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdt::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDT {
    type Target = wdt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDT").finish()
    }
}
#[doc = "WDT"]
pub mod wdt {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - WDTLOAD"]
        pub wdtload: crate::Reg<wdtload::WDTLOAD_SPEC>,
        #[doc = "0x04 - WDTCOUNT"]
        pub wdtcount: crate::Reg<wdtcount::WDTCOUNT_SPEC>,
        #[doc = "0x08 - WDTCTRL"]
        pub wdtctrl: crate::Reg<wdtctrl::WDTCTRL_SPEC>,
        #[doc = "0x0c - WDTFEED"]
        pub wdtfeed: crate::Reg<wdtfeed::WDTFEED_SPEC>,
        #[doc = "0x10 - WDTINTCLRTIME"]
        pub wdtintclrtime: crate::Reg<wdtintclrtime::WDTINTCLRTIME_SPEC>,
        #[doc = "0x14 - WDTRIS"]
        pub wdtris: crate::Reg<wdtris::WDTRIS_SPEC>,
    }
    #[doc = "WDTLOAD register accessor: an alias for `Reg<WDTLOAD_SPEC>`"]
    pub type WDTLOAD = crate::Reg<wdtload::WDTLOAD_SPEC>;
    #[doc = "WDTLOAD"]
    pub mod wdtload {
        #[doc = "Register `WDTLOAD` reader"]
        pub struct R(crate::R<WDTLOAD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WDTLOAD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WDTLOAD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WDTLOAD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WDTLOAD` writer"]
        pub struct W(crate::W<WDTLOAD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WDTLOAD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WDTLOAD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WDTLOAD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "WDTLOAD\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdtload](index.html) module"]
        pub struct WDTLOAD_SPEC;
        impl crate::RegisterSpec for WDTLOAD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wdtload::R](R) reader structure"]
        impl crate::Readable for WDTLOAD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [wdtload::W](W) writer structure"]
        impl crate::Writable for WDTLOAD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WDTLOAD to value 0xffff_ffff"]
        impl crate::Resettable for WDTLOAD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xffff_ffff
            }
        }
    }
    #[doc = "WDTCOUNT register accessor: an alias for `Reg<WDTCOUNT_SPEC>`"]
    pub type WDTCOUNT = crate::Reg<wdtcount::WDTCOUNT_SPEC>;
    #[doc = "WDTCOUNT"]
    pub mod wdtcount {
        #[doc = "Register `WDTCOUNT` reader"]
        pub struct R(crate::R<WDTCOUNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WDTCOUNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WDTCOUNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WDTCOUNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WDTCOUNT` writer"]
        pub struct W(crate::W<WDTCOUNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WDTCOUNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WDTCOUNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WDTCOUNT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "WDTCOUNT\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdtcount](index.html) module"]
        pub struct WDTCOUNT_SPEC;
        impl crate::RegisterSpec for WDTCOUNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wdtcount::R](R) reader structure"]
        impl crate::Readable for WDTCOUNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [wdtcount::W](W) writer structure"]
        impl crate::Writable for WDTCOUNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WDTCOUNT to value 0xffff_ffff"]
        impl crate::Resettable for WDTCOUNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xffff_ffff
            }
        }
    }
    #[doc = "WDTCTRL register accessor: an alias for `Reg<WDTCTRL_SPEC>`"]
    pub type WDTCTRL = crate::Reg<wdtctrl::WDTCTRL_SPEC>;
    #[doc = "WDTCTRL"]
    pub mod wdtctrl {
        #[doc = "Register `WDTCTRL` reader"]
        pub struct R(crate::R<WDTCTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WDTCTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WDTCTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WDTCTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WDTCTRL` writer"]
        pub struct W(crate::W<WDTCTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WDTCTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WDTCTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WDTCTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "WDTCTRL\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdtctrl](index.html) module"]
        pub struct WDTCTRL_SPEC;
        impl crate::RegisterSpec for WDTCTRL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wdtctrl::R](R) reader structure"]
        impl crate::Readable for WDTCTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [wdtctrl::W](W) writer structure"]
        impl crate::Writable for WDTCTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WDTCTRL to value 0"]
        impl crate::Resettable for WDTCTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "WDTFEED register accessor: an alias for `Reg<WDTFEED_SPEC>`"]
    pub type WDTFEED = crate::Reg<wdtfeed::WDTFEED_SPEC>;
    #[doc = "WDTFEED"]
    pub mod wdtfeed {
        #[doc = "Register `WDTFEED` writer"]
        pub struct W(crate::W<WDTFEED_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WDTFEED_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WDTFEED_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WDTFEED_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "WDTFEED\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdtfeed](index.html) module"]
        pub struct WDTFEED_SPEC;
        impl crate::RegisterSpec for WDTFEED_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [wdtfeed::W](W) writer structure"]
        impl crate::Writable for WDTFEED_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WDTFEED to value 0"]
        impl crate::Resettable for WDTFEED_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "WDTINTCLRTIME register accessor: an alias for `Reg<WDTINTCLRTIME_SPEC>`"]
    pub type WDTINTCLRTIME = crate::Reg<wdtintclrtime::WDTINTCLRTIME_SPEC>;
    #[doc = "WDTINTCLRTIME"]
    pub mod wdtintclrtime {
        #[doc = "Register `WDTINTCLRTIME` reader"]
        pub struct R(crate::R<WDTINTCLRTIME_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WDTINTCLRTIME_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WDTINTCLRTIME_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WDTINTCLRTIME_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WDTINTCLRTIME` writer"]
        pub struct W(crate::W<WDTINTCLRTIME_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WDTINTCLRTIME_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WDTINTCLRTIME_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WDTINTCLRTIME_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "WDTINTCLRTIME\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdtintclrtime](index.html) module"]
        pub struct WDTINTCLRTIME_SPEC;
        impl crate::RegisterSpec for WDTINTCLRTIME_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wdtintclrtime::R](R) reader structure"]
        impl crate::Readable for WDTINTCLRTIME_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [wdtintclrtime::W](W) writer structure"]
        impl crate::Writable for WDTINTCLRTIME_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WDTINTCLRTIME to value 0x1000"]
        impl crate::Resettable for WDTINTCLRTIME_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x1000
            }
        }
    }
    #[doc = "WDTRIS register accessor: an alias for `Reg<WDTRIS_SPEC>`"]
    pub type WDTRIS = crate::Reg<wdtris::WDTRIS_SPEC>;
    #[doc = "WDTRIS"]
    pub mod wdtris {
        #[doc = "Register `WDTRIS` reader"]
        pub struct R(crate::R<WDTRIS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WDTRIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WDTRIS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WDTRIS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "WDTRIS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdtris](index.html) module"]
        pub struct WDTRIS_SPEC;
        impl crate::RegisterSpec for WDTRIS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wdtris::R](R) reader structure"]
        impl crate::Readable for WDTRIS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets WDTRIS to value 0"]
        impl crate::Resettable for WDTRIS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "IWDT"]
pub struct IWDT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IWDT {}
impl IWDT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iwdt::RegisterBlock = 0x4000_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iwdt::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IWDT {
    type Target = iwdt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IWDT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDT").finish()
    }
}
#[doc = "IWDT"]
pub mod iwdt {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - IWDT_CMDR"]
        pub iwdt_cmdr: crate::Reg<iwdt_cmdr::IWDT_CMDR_SPEC>,
        #[doc = "0x04 - WDTCOUNT"]
        pub iwdt_pr: crate::Reg<iwdt_pr::IWDT_PR_SPEC>,
        #[doc = "0x08 - IWDT_RLR"]
        pub iwdt_rlr: crate::Reg<iwdt_rlr::IWDT_RLR_SPEC>,
        #[doc = "0x0c - IWDT_SR"]
        pub iwdt_sr: crate::Reg<iwdt_sr::IWDT_SR_SPEC>,
        #[doc = "0x10 - IWDT_WINR"]
        pub iwdt_winr: crate::Reg<iwdt_winr::IWDT_WINR_SPEC>,
        #[doc = "0x14 - IWDT_WUTR"]
        pub iwdt_wutr: crate::Reg<iwdt_wutr::IWDT_WUTR_SPEC>,
    }
    #[doc = "IWDT_CMDR register accessor: an alias for `Reg<IWDT_CMDR_SPEC>`"]
    pub type IWDT_CMDR = crate::Reg<iwdt_cmdr::IWDT_CMDR_SPEC>;
    #[doc = "IWDT_CMDR"]
    pub mod iwdt_cmdr {
        #[doc = "Register `IWDT_CMDR` writer"]
        pub struct W(crate::W<IWDT_CMDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IWDT_CMDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IWDT_CMDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IWDT_CMDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IWDT_CMDR\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iwdt_cmdr](index.html) module"]
        pub struct IWDT_CMDR_SPEC;
        impl crate::RegisterSpec for IWDT_CMDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [iwdt_cmdr::W](W) writer structure"]
        impl crate::Writable for IWDT_CMDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IWDT_CMDR to value 0"]
        impl crate::Resettable for IWDT_CMDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IWDT_PR register accessor: an alias for `Reg<IWDT_PR_SPEC>`"]
    pub type IWDT_PR = crate::Reg<iwdt_pr::IWDT_PR_SPEC>;
    #[doc = "WDTCOUNT"]
    pub mod iwdt_pr {
        #[doc = "Register `IWDT_PR` reader"]
        pub struct R(crate::R<IWDT_PR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IWDT_PR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IWDT_PR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IWDT_PR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IWDT_PR` writer"]
        pub struct W(crate::W<IWDT_PR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IWDT_PR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IWDT_PR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IWDT_PR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "WDTCOUNT\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iwdt_pr](index.html) module"]
        pub struct IWDT_PR_SPEC;
        impl crate::RegisterSpec for IWDT_PR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iwdt_pr::R](R) reader structure"]
        impl crate::Readable for IWDT_PR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iwdt_pr::W](W) writer structure"]
        impl crate::Writable for IWDT_PR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IWDT_PR to value 0"]
        impl crate::Resettable for IWDT_PR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IWDT_RLR register accessor: an alias for `Reg<IWDT_RLR_SPEC>`"]
    pub type IWDT_RLR = crate::Reg<iwdt_rlr::IWDT_RLR_SPEC>;
    #[doc = "IWDT_RLR"]
    pub mod iwdt_rlr {
        #[doc = "Register `IWDT_RLR` reader"]
        pub struct R(crate::R<IWDT_RLR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IWDT_RLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IWDT_RLR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IWDT_RLR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IWDT_RLR` writer"]
        pub struct W(crate::W<IWDT_RLR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IWDT_RLR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IWDT_RLR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IWDT_RLR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IWDT_RLR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iwdt_rlr](index.html) module"]
        pub struct IWDT_RLR_SPEC;
        impl crate::RegisterSpec for IWDT_RLR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iwdt_rlr::R](R) reader structure"]
        impl crate::Readable for IWDT_RLR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iwdt_rlr::W](W) writer structure"]
        impl crate::Writable for IWDT_RLR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IWDT_RLR to value 0x0fff"]
        impl crate::Resettable for IWDT_RLR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0fff
            }
        }
    }
    #[doc = "IWDT_SR register accessor: an alias for `Reg<IWDT_SR_SPEC>`"]
    pub type IWDT_SR = crate::Reg<iwdt_sr::IWDT_SR_SPEC>;
    #[doc = "IWDT_SR"]
    pub mod iwdt_sr {
        #[doc = "Register `IWDT_SR` reader"]
        pub struct R(crate::R<IWDT_SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IWDT_SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IWDT_SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IWDT_SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "IWDT_SR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iwdt_sr](index.html) module"]
        pub struct IWDT_SR_SPEC;
        impl crate::RegisterSpec for IWDT_SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iwdt_sr::R](R) reader structure"]
        impl crate::Readable for IWDT_SR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets IWDT_SR to value 0"]
        impl crate::Resettable for IWDT_SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IWDT_WINR register accessor: an alias for `Reg<IWDT_WINR_SPEC>`"]
    pub type IWDT_WINR = crate::Reg<iwdt_winr::IWDT_WINR_SPEC>;
    #[doc = "IWDT_WINR"]
    pub mod iwdt_winr {
        #[doc = "Register `IWDT_WINR` reader"]
        pub struct R(crate::R<IWDT_WINR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IWDT_WINR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IWDT_WINR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IWDT_WINR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IWDT_WINR` writer"]
        pub struct W(crate::W<IWDT_WINR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IWDT_WINR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IWDT_WINR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IWDT_WINR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IWDT_WINR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iwdt_winr](index.html) module"]
        pub struct IWDT_WINR_SPEC;
        impl crate::RegisterSpec for IWDT_WINR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iwdt_winr::R](R) reader structure"]
        impl crate::Readable for IWDT_WINR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iwdt_winr::W](W) writer structure"]
        impl crate::Writable for IWDT_WINR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IWDT_WINR to value 0x0fff"]
        impl crate::Resettable for IWDT_WINR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0fff
            }
        }
    }
    #[doc = "IWDT_WUTR register accessor: an alias for `Reg<IWDT_WUTR_SPEC>`"]
    pub type IWDT_WUTR = crate::Reg<iwdt_wutr::IWDT_WUTR_SPEC>;
    #[doc = "IWDT_WUTR"]
    pub mod iwdt_wutr {
        #[doc = "Register `IWDT_WUTR` reader"]
        pub struct R(crate::R<IWDT_WUTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IWDT_WUTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IWDT_WUTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IWDT_WUTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IWDT_WUTR` writer"]
        pub struct W(crate::W<IWDT_WUTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IWDT_WUTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IWDT_WUTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IWDT_WUTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IWDT_WUTR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iwdt_wutr](index.html) module"]
        pub struct IWDT_WUTR_SPEC;
        impl crate::RegisterSpec for IWDT_WUTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iwdt_wutr::R](R) reader structure"]
        impl crate::Readable for IWDT_WUTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iwdt_wutr::W](W) writer structure"]
        impl crate::Writable for IWDT_WUTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IWDT_WUTR to value 0x0fff"]
        impl crate::Resettable for IWDT_WUTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0fff
            }
        }
    }
}
#[doc = "LPUART"]
pub struct LPUART {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART {}
impl LPUART {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart::RegisterBlock = 0x4000_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART {
    type Target = lpuart::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART").finish()
    }
}
#[doc = "LPUART"]
pub mod lpuart {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - LPUART_RXDR"]
        pub lpuart_rxdr: crate::Reg<lpuart_rxdr::LPUART_RXDR_SPEC>,
        #[doc = "0x04 - LPUART_TXDR"]
        pub lpuart_txdr: crate::Reg<lpuart_txdr::LPUART_TXDR_SPEC>,
        #[doc = "0x08 - IWDT_RLR"]
        pub lpuart_lcr: crate::Reg<lpuart_lcr::LPUART_LCR_SPEC>,
        #[doc = "0x0c - LPUART_CR"]
        pub lpuart_cr: crate::Reg<lpuart_cr::LPUART_CR_SPEC>,
        #[doc = "0x10 - LPUART_IBAUD"]
        pub lpuart_ibaud: crate::Reg<lpuart_ibaud::LPUART_IBAUD_SPEC>,
        #[doc = "0x14 - LPUART_FBAUD"]
        pub lpuart_fbaud: crate::Reg<lpuart_fbaud::LPUART_FBAUD_SPEC>,
        #[doc = "0x18 - LPUART_IE"]
        pub lpuart_ie: crate::Reg<lpuart_ie::LPUART_IE_SPEC>,
        #[doc = "0x1c - LPUART_SR"]
        pub lpuart_sr: crate::Reg<lpuart_sr::LPUART_SR_SPEC>,
        #[doc = "0x20 - LPUART_ADDR"]
        pub lpuart_addr: crate::Reg<lpuart_addr::LPUART_ADDR_SPEC>,
    }
    #[doc = "LPUART_RXDR register accessor: an alias for `Reg<LPUART_RXDR_SPEC>`"]
    pub type LPUART_RXDR = crate::Reg<lpuart_rxdr::LPUART_RXDR_SPEC>;
    #[doc = "LPUART_RXDR"]
    pub mod lpuart_rxdr {
        #[doc = "Register `LPUART_RXDR` reader"]
        pub struct R(crate::R<LPUART_RXDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LPUART_RXDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LPUART_RXDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LPUART_RXDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "LPUART_RXDR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_rxdr](index.html) module"]
        pub struct LPUART_RXDR_SPEC;
        impl crate::RegisterSpec for LPUART_RXDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lpuart_rxdr::R](R) reader structure"]
        impl crate::Readable for LPUART_RXDR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets LPUART_RXDR to value 0"]
        impl crate::Resettable for LPUART_RXDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LPUART_TXDR register accessor: an alias for `Reg<LPUART_TXDR_SPEC>`"]
    pub type LPUART_TXDR = crate::Reg<lpuart_txdr::LPUART_TXDR_SPEC>;
    #[doc = "LPUART_TXDR"]
    pub mod lpuart_txdr {
        #[doc = "Register `LPUART_TXDR` writer"]
        pub struct W(crate::W<LPUART_TXDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LPUART_TXDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LPUART_TXDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LPUART_TXDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LPUART_TXDR\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_txdr](index.html) module"]
        pub struct LPUART_TXDR_SPEC;
        impl crate::RegisterSpec for LPUART_TXDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [lpuart_txdr::W](W) writer structure"]
        impl crate::Writable for LPUART_TXDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LPUART_TXDR to value 0"]
        impl crate::Resettable for LPUART_TXDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LPUART_LCR register accessor: an alias for `Reg<LPUART_LCR_SPEC>`"]
    pub type LPUART_LCR = crate::Reg<lpuart_lcr::LPUART_LCR_SPEC>;
    #[doc = "IWDT_RLR"]
    pub mod lpuart_lcr {
        #[doc = "Register `LPUART_LCR` reader"]
        pub struct R(crate::R<LPUART_LCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LPUART_LCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LPUART_LCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LPUART_LCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LPUART_LCR` writer"]
        pub struct W(crate::W<LPUART_LCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LPUART_LCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LPUART_LCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LPUART_LCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IWDT_RLR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_lcr](index.html) module"]
        pub struct LPUART_LCR_SPEC;
        impl crate::RegisterSpec for LPUART_LCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lpuart_lcr::R](R) reader structure"]
        impl crate::Readable for LPUART_LCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lpuart_lcr::W](W) writer structure"]
        impl crate::Writable for LPUART_LCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LPUART_LCR to value 0"]
        impl crate::Resettable for LPUART_LCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LPUART_CR register accessor: an alias for `Reg<LPUART_CR_SPEC>`"]
    pub type LPUART_CR = crate::Reg<lpuart_cr::LPUART_CR_SPEC>;
    #[doc = "LPUART_CR"]
    pub mod lpuart_cr {
        #[doc = "Register `LPUART_CR` reader"]
        pub struct R(crate::R<LPUART_CR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LPUART_CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LPUART_CR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LPUART_CR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LPUART_CR` writer"]
        pub struct W(crate::W<LPUART_CR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LPUART_CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LPUART_CR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LPUART_CR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LPUART_CR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_cr](index.html) module"]
        pub struct LPUART_CR_SPEC;
        impl crate::RegisterSpec for LPUART_CR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lpuart_cr::R](R) reader structure"]
        impl crate::Readable for LPUART_CR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lpuart_cr::W](W) writer structure"]
        impl crate::Writable for LPUART_CR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LPUART_CR to value 0"]
        impl crate::Resettable for LPUART_CR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LPUART_IBAUD register accessor: an alias for `Reg<LPUART_IBAUD_SPEC>`"]
    pub type LPUART_IBAUD = crate::Reg<lpuart_ibaud::LPUART_IBAUD_SPEC>;
    #[doc = "LPUART_IBAUD"]
    pub mod lpuart_ibaud {
        #[doc = "Register `LPUART_IBAUD` reader"]
        pub struct R(crate::R<LPUART_IBAUD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LPUART_IBAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LPUART_IBAUD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LPUART_IBAUD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LPUART_IBAUD` writer"]
        pub struct W(crate::W<LPUART_IBAUD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LPUART_IBAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LPUART_IBAUD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LPUART_IBAUD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LPUART_IBAUD\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_ibaud](index.html) module"]
        pub struct LPUART_IBAUD_SPEC;
        impl crate::RegisterSpec for LPUART_IBAUD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lpuart_ibaud::R](R) reader structure"]
        impl crate::Readable for LPUART_IBAUD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lpuart_ibaud::W](W) writer structure"]
        impl crate::Writable for LPUART_IBAUD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LPUART_IBAUD to value 0"]
        impl crate::Resettable for LPUART_IBAUD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LPUART_FBAUD register accessor: an alias for `Reg<LPUART_FBAUD_SPEC>`"]
    pub type LPUART_FBAUD = crate::Reg<lpuart_fbaud::LPUART_FBAUD_SPEC>;
    #[doc = "LPUART_FBAUD"]
    pub mod lpuart_fbaud {
        #[doc = "Register `LPUART_FBAUD` reader"]
        pub struct R(crate::R<LPUART_FBAUD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LPUART_FBAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LPUART_FBAUD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LPUART_FBAUD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LPUART_FBAUD` writer"]
        pub struct W(crate::W<LPUART_FBAUD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LPUART_FBAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LPUART_FBAUD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LPUART_FBAUD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LPUART_FBAUD\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_fbaud](index.html) module"]
        pub struct LPUART_FBAUD_SPEC;
        impl crate::RegisterSpec for LPUART_FBAUD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lpuart_fbaud::R](R) reader structure"]
        impl crate::Readable for LPUART_FBAUD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lpuart_fbaud::W](W) writer structure"]
        impl crate::Writable for LPUART_FBAUD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LPUART_FBAUD to value 0"]
        impl crate::Resettable for LPUART_FBAUD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LPUART_IE register accessor: an alias for `Reg<LPUART_IE_SPEC>`"]
    pub type LPUART_IE = crate::Reg<lpuart_ie::LPUART_IE_SPEC>;
    #[doc = "LPUART_IE"]
    pub mod lpuart_ie {
        #[doc = "Register `LPUART_IE` reader"]
        pub struct R(crate::R<LPUART_IE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LPUART_IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LPUART_IE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LPUART_IE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LPUART_IE` writer"]
        pub struct W(crate::W<LPUART_IE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LPUART_IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LPUART_IE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LPUART_IE_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LPUART_IE\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_ie](index.html) module"]
        pub struct LPUART_IE_SPEC;
        impl crate::RegisterSpec for LPUART_IE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lpuart_ie::R](R) reader structure"]
        impl crate::Readable for LPUART_IE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lpuart_ie::W](W) writer structure"]
        impl crate::Writable for LPUART_IE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LPUART_IE to value 0"]
        impl crate::Resettable for LPUART_IE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LPUART_SR register accessor: an alias for `Reg<LPUART_SR_SPEC>`"]
    pub type LPUART_SR = crate::Reg<lpuart_sr::LPUART_SR_SPEC>;
    #[doc = "LPUART_SR"]
    pub mod lpuart_sr {
        #[doc = "Register `LPUART_SR` reader"]
        pub struct R(crate::R<LPUART_SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LPUART_SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LPUART_SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LPUART_SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "LPUART_SR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_sr](index.html) module"]
        pub struct LPUART_SR_SPEC;
        impl crate::RegisterSpec for LPUART_SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lpuart_sr::R](R) reader structure"]
        impl crate::Readable for LPUART_SR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets LPUART_SR to value 0"]
        impl crate::Resettable for LPUART_SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LPUART_ADDR register accessor: an alias for `Reg<LPUART_ADDR_SPEC>`"]
    pub type LPUART_ADDR = crate::Reg<lpuart_addr::LPUART_ADDR_SPEC>;
    #[doc = "LPUART_ADDR"]
    pub mod lpuart_addr {
        #[doc = "Register `LPUART_ADDR` reader"]
        pub struct R(crate::R<LPUART_ADDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LPUART_ADDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LPUART_ADDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LPUART_ADDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LPUART_ADDR` writer"]
        pub struct W(crate::W<LPUART_ADDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LPUART_ADDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LPUART_ADDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LPUART_ADDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LPUART_ADDR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpuart_addr](index.html) module"]
        pub struct LPUART_ADDR_SPEC;
        impl crate::RegisterSpec for LPUART_ADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lpuart_addr::R](R) reader structure"]
        impl crate::Readable for LPUART_ADDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lpuart_addr::W](W) writer structure"]
        impl crate::Writable for LPUART_ADDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LPUART_ADDR to value 0"]
        impl crate::Resettable for LPUART_ADDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "I2C1"]
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_5400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
#[doc = "I2C1"]
pub mod i2c1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - I2C Device Address register1"]
        pub slave_addr1: crate::Reg<slave_addr1::SLAVE_ADDR1_SPEC>,
        #[doc = "0x04 - I2C Clock Division register"]
        pub clk_div: crate::Reg<clk_div::CLK_DIV_SPEC>,
        #[doc = "0x08 - I2C Control register"]
        pub cr: crate::Reg<cr::CR_SPEC>,
        #[doc = "0x0c - I2C State register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x10 - I2C Data register"]
        pub dr: crate::Reg<dr::DR_SPEC>,
        #[doc = "0x14 - I2C Device Address register2_3"]
        pub slave_arr2_3: crate::Reg<slave_arr2_3::SLAVE_ARR2_3_SPEC>,
        _reserved6: [u8; 0x04],
        #[doc = "0x1c - FILTER"]
        pub filter: crate::Reg<filter::FILTER_SPEC>,
        _reserved7: [u8; 0x04],
        #[doc = "0x24 - I2C Config Timeout register"]
        pub timeout: crate::Reg<timeout::TIMEOUT_SPEC>,
    }
    #[doc = "SLAVE_ADDR1 register accessor: an alias for `Reg<SLAVE_ADDR1_SPEC>`"]
    pub type SLAVE_ADDR1 = crate::Reg<slave_addr1::SLAVE_ADDR1_SPEC>;
    #[doc = "I2C Device Address register1"]
    pub mod slave_addr1 {
        #[doc = "Register `SLAVE_ADDR1` reader"]
        pub struct R(crate::R<SLAVE_ADDR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SLAVE_ADDR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SLAVE_ADDR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SLAVE_ADDR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SLAVE_ADDR1` writer"]
        pub struct W(crate::W<SLAVE_ADDR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SLAVE_ADDR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SLAVE_ADDR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SLAVE_ADDR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "I2C Device Address register1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [slave_addr1](index.html) module"]
        pub struct SLAVE_ADDR1_SPEC;
        impl crate::RegisterSpec for SLAVE_ADDR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [slave_addr1::R](R) reader structure"]
        impl crate::Readable for SLAVE_ADDR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [slave_addr1::W](W) writer structure"]
        impl crate::Writable for SLAVE_ADDR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SLAVE_ADDR1 to value 0"]
        impl crate::Resettable for SLAVE_ADDR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CLK_DIV register accessor: an alias for `Reg<CLK_DIV_SPEC>`"]
    pub type CLK_DIV = crate::Reg<clk_div::CLK_DIV_SPEC>;
    #[doc = "I2C Clock Division register"]
    pub mod clk_div {
        #[doc = "Register `CLK_DIV` reader"]
        pub struct R(crate::R<CLK_DIV_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLK_DIV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLK_DIV_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLK_DIV_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CLK_DIV` writer"]
        pub struct W(crate::W<CLK_DIV_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CLK_DIV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CLK_DIV_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CLK_DIV_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "I2C Clock Division register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clk_div](index.html) module"]
        pub struct CLK_DIV_SPEC;
        impl crate::RegisterSpec for CLK_DIV_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clk_div::R](R) reader structure"]
        impl crate::Readable for CLK_DIV_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [clk_div::W](W) writer structure"]
        impl crate::Writable for CLK_DIV_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CLK_DIV to value 0"]
        impl crate::Resettable for CLK_DIV_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR register accessor: an alias for `Reg<CR_SPEC>`"]
    pub type CR = crate::Reg<cr::CR_SPEC>;
    #[doc = "I2C Control register"]
    pub mod cr {
        #[doc = "Register `CR` reader"]
        pub struct R(crate::R<CR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR` writer"]
        pub struct W(crate::W<CR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "I2C Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](index.html) module"]
        pub struct CR_SPEC;
        impl crate::RegisterSpec for CR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr::R](R) reader structure"]
        impl crate::Readable for CR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr::W](W) writer structure"]
        impl crate::Writable for CR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR to value 0"]
        impl crate::Resettable for CR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "I2C State register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "I2C State register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0x01"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x01
            }
        }
    }
    #[doc = "DR register accessor: an alias for `Reg<DR_SPEC>`"]
    pub type DR = crate::Reg<dr::DR_SPEC>;
    #[doc = "I2C Data register"]
    pub mod dr {
        #[doc = "Register `DR` reader"]
        pub struct R(crate::R<DR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DR` writer"]
        pub struct W(crate::W<DR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "I2C Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](index.html) module"]
        pub struct DR_SPEC;
        impl crate::RegisterSpec for DR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dr::R](R) reader structure"]
        impl crate::Readable for DR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dr::W](W) writer structure"]
        impl crate::Writable for DR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DR to value 0"]
        impl crate::Resettable for DR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SLAVE_ARR2_3 register accessor: an alias for `Reg<SLAVE_ARR2_3_SPEC>`"]
    pub type SLAVE_ARR2_3 = crate::Reg<slave_arr2_3::SLAVE_ARR2_3_SPEC>;
    #[doc = "I2C Device Address register2_3"]
    pub mod slave_arr2_3 {
        #[doc = "Register `SLAVE_ARR2_3` reader"]
        pub struct R(crate::R<SLAVE_ARR2_3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SLAVE_ARR2_3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SLAVE_ARR2_3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SLAVE_ARR2_3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SLAVE_ARR2_3` writer"]
        pub struct W(crate::W<SLAVE_ARR2_3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SLAVE_ARR2_3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SLAVE_ARR2_3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SLAVE_ARR2_3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "I2C Device Address register2_3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [slave_arr2_3](index.html) module"]
        pub struct SLAVE_ARR2_3_SPEC;
        impl crate::RegisterSpec for SLAVE_ARR2_3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [slave_arr2_3::R](R) reader structure"]
        impl crate::Readable for SLAVE_ARR2_3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [slave_arr2_3::W](W) writer structure"]
        impl crate::Writable for SLAVE_ARR2_3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SLAVE_ARR2_3 to value 0"]
        impl crate::Resettable for SLAVE_ARR2_3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FILTER register accessor: an alias for `Reg<FILTER_SPEC>`"]
    pub type FILTER = crate::Reg<filter::FILTER_SPEC>;
    #[doc = "FILTER"]
    pub mod filter {
        #[doc = "Register `FILTER` reader"]
        pub struct R(crate::R<FILTER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FILTER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FILTER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FILTER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FILTER` writer"]
        pub struct W(crate::W<FILTER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FILTER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FILTER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FILTER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FILTER\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [filter](index.html) module"]
        pub struct FILTER_SPEC;
        impl crate::RegisterSpec for FILTER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [filter::R](R) reader structure"]
        impl crate::Readable for FILTER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [filter::W](W) writer structure"]
        impl crate::Writable for FILTER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FILTER to value 0"]
        impl crate::Resettable for FILTER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TIMEOUT register accessor: an alias for `Reg<TIMEOUT_SPEC>`"]
    pub type TIMEOUT = crate::Reg<timeout::TIMEOUT_SPEC>;
    #[doc = "I2C Config Timeout register"]
    pub mod timeout {
        #[doc = "Register `TIMEOUT` reader"]
        pub struct R(crate::R<TIMEOUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TIMEOUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TIMEOUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TIMEOUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TIMEOUT` writer"]
        pub struct W(crate::W<TIMEOUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TIMEOUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TIMEOUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TIMEOUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "I2C Config Timeout register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [timeout](index.html) module"]
        pub struct TIMEOUT_SPEC;
        impl crate::RegisterSpec for TIMEOUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [timeout::R](R) reader structure"]
        impl crate::Readable for TIMEOUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [timeout::W](W) writer structure"]
        impl crate::Writable for TIMEOUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TIMEOUT to value 0"]
        impl crate::Resettable for TIMEOUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "I2C2"]
pub struct I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C2 {}
impl I2C2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_5800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
#[doc = "I2C2"]
pub use i2c1 as i2c2;
#[doc = "RTC"]
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtc::RegisterBlock = 0x4000_2800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
#[doc = "RTC"]
pub mod rtc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - WP"]
        pub wp: crate::Reg<wp::WP_SPEC>,
        #[doc = "0x04 - IE"]
        pub ie: crate::Reg<ie::IE_SPEC>,
        #[doc = "0x08 - SR"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x0c - SEC"]
        pub sec: crate::Reg<sec::SEC_SPEC>,
        #[doc = "0x10 - MIN"]
        pub min: crate::Reg<min::MIN_SPEC>,
        #[doc = "0x14 - HOUR"]
        pub hour: crate::Reg<hour::HOUR_SPEC>,
        #[doc = "0x18 - DAY"]
        pub day: crate::Reg<day::DAY_SPEC>,
        #[doc = "0x1c - WEEK"]
        pub week: crate::Reg<week::WEEK_SPEC>,
        #[doc = "0x20 - MONTH"]
        pub month: crate::Reg<month::MONTH_SPEC>,
        #[doc = "0x24 - YEAR"]
        pub year: crate::Reg<year::YEAR_SPEC>,
        #[doc = "0x28 - ALM"]
        pub alm: crate::Reg<alm::ALM_SPEC>,
        #[doc = "0x2c - CR"]
        pub cr: crate::Reg<cr::CR_SPEC>,
        #[doc = "0x30 - ADJUST"]
        pub adjust: crate::Reg<adjust::ADJUST_SPEC>,
        _reserved13: [u8; 0x10],
        #[doc = "0x44 - CLKSR1"]
        pub clksr1: crate::Reg<clksr1::CLKSR1_SPEC>,
        #[doc = "0x48 - CALSR1"]
        pub calsr1: crate::Reg<calsr1::CALSR1_SPEC>,
        #[doc = "0x4c - CLKSF1"]
        pub clksf1: crate::Reg<clksf1::CLKSF1_SPEC>,
        #[doc = "0x50 - CALPF1"]
        pub calpf1: crate::Reg<calpf1::CALPF1_SPEC>,
        #[doc = "0x54 - CLKSR2"]
        pub clksr2: crate::Reg<clksr2::CLKSR2_SPEC>,
        #[doc = "0x58 - CALSR2"]
        pub calsr2: crate::Reg<calsr2::CALSR2_SPEC>,
        #[doc = "0x5c - CLKSF2"]
        pub clksf2: crate::Reg<clksf2::CLKSF2_SPEC>,
        #[doc = "0x60 - CALPF2"]
        pub calpf2: crate::Reg<calpf2::CALPF2_SPEC>,
        _reserved21: [u8; 0x0c],
        #[doc = "0x70 - BAKUP0"]
        pub bakup0: crate::Reg<bakup0::BAKUP0_SPEC>,
        #[doc = "0x74 - BAKUP1"]
        pub bakup1: crate::Reg<bakup1::BAKUP1_SPEC>,
        #[doc = "0x78 - BAKUP2"]
        pub bakup2: crate::Reg<bakup2::BAKUP2_SPEC>,
        #[doc = "0x7c - BAKUP3"]
        pub bakup3: crate::Reg<bakup3::BAKUP3_SPEC>,
        #[doc = "0x80 - BAKUP4"]
        pub bakup4: crate::Reg<bakup4::BAKUP4_SPEC>,
    }
    #[doc = "WP register accessor: an alias for `Reg<WP_SPEC>`"]
    pub type WP = crate::Reg<wp::WP_SPEC>;
    #[doc = "WP"]
    pub mod wp {
        #[doc = "Register `WP` reader"]
        pub struct R(crate::R<WP_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WP_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WP_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WP_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WP` writer"]
        pub struct W(crate::W<WP_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WP_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WP_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WP_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "WP\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wp](index.html) module"]
        pub struct WP_SPEC;
        impl crate::RegisterSpec for WP_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wp::R](R) reader structure"]
        impl crate::Readable for WP_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [wp::W](W) writer structure"]
        impl crate::Writable for WP_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WP to value 0"]
        impl crate::Resettable for WP_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IE register accessor: an alias for `Reg<IE_SPEC>`"]
    pub type IE = crate::Reg<ie::IE_SPEC>;
    #[doc = "IE"]
    pub mod ie {
        #[doc = "Register `IE` reader"]
        pub struct R(crate::R<IE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IE` writer"]
        pub struct W(crate::W<IE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IE_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IE\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ie](index.html) module"]
        pub struct IE_SPEC;
        impl crate::RegisterSpec for IE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ie::R](R) reader structure"]
        impl crate::Readable for IE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ie::W](W) writer structure"]
        impl crate::Writable for IE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IE to value 0"]
        impl crate::Resettable for IE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "SR"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SEC register accessor: an alias for `Reg<SEC_SPEC>`"]
    pub type SEC = crate::Reg<sec::SEC_SPEC>;
    #[doc = "SEC"]
    pub mod sec {
        #[doc = "Register `SEC` reader"]
        pub struct R(crate::R<SEC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SEC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SEC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SEC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SEC` writer"]
        pub struct W(crate::W<SEC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SEC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SEC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SEC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SEC\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sec](index.html) module"]
        pub struct SEC_SPEC;
        impl crate::RegisterSpec for SEC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sec::R](R) reader structure"]
        impl crate::Readable for SEC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sec::W](W) writer structure"]
        impl crate::Writable for SEC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SEC to value 0"]
        impl crate::Resettable for SEC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MIN register accessor: an alias for `Reg<MIN_SPEC>`"]
    pub type MIN = crate::Reg<min::MIN_SPEC>;
    #[doc = "MIN"]
    pub mod min {
        #[doc = "Register `MIN` reader"]
        pub struct R(crate::R<MIN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MIN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MIN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MIN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MIN` writer"]
        pub struct W(crate::W<MIN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MIN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MIN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MIN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "MIN\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [min](index.html) module"]
        pub struct MIN_SPEC;
        impl crate::RegisterSpec for MIN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [min::R](R) reader structure"]
        impl crate::Readable for MIN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [min::W](W) writer structure"]
        impl crate::Writable for MIN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MIN to value 0"]
        impl crate::Resettable for MIN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "HOUR register accessor: an alias for `Reg<HOUR_SPEC>`"]
    pub type HOUR = crate::Reg<hour::HOUR_SPEC>;
    #[doc = "HOUR"]
    pub mod hour {
        #[doc = "Register `HOUR` reader"]
        pub struct R(crate::R<HOUR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HOUR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HOUR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HOUR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `HOUR` writer"]
        pub struct W(crate::W<HOUR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<HOUR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<HOUR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<HOUR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "HOUR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hour](index.html) module"]
        pub struct HOUR_SPEC;
        impl crate::RegisterSpec for HOUR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hour::R](R) reader structure"]
        impl crate::Readable for HOUR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [hour::W](W) writer structure"]
        impl crate::Writable for HOUR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets HOUR to value 0"]
        impl crate::Resettable for HOUR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DAY register accessor: an alias for `Reg<DAY_SPEC>`"]
    pub type DAY = crate::Reg<day::DAY_SPEC>;
    #[doc = "DAY"]
    pub mod day {
        #[doc = "Register `DAY` reader"]
        pub struct R(crate::R<DAY_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DAY_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DAY_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DAY_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DAY` writer"]
        pub struct W(crate::W<DAY_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DAY_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DAY_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DAY_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DAY\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [day](index.html) module"]
        pub struct DAY_SPEC;
        impl crate::RegisterSpec for DAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [day::R](R) reader structure"]
        impl crate::Readable for DAY_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [day::W](W) writer structure"]
        impl crate::Writable for DAY_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DAY to value 0"]
        impl crate::Resettable for DAY_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "WEEK register accessor: an alias for `Reg<WEEK_SPEC>`"]
    pub type WEEK = crate::Reg<week::WEEK_SPEC>;
    #[doc = "WEEK"]
    pub mod week {
        #[doc = "Register `WEEK` reader"]
        pub struct R(crate::R<WEEK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WEEK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WEEK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WEEK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WEEK` writer"]
        pub struct W(crate::W<WEEK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WEEK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WEEK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WEEK_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "WEEK\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [week](index.html) module"]
        pub struct WEEK_SPEC;
        impl crate::RegisterSpec for WEEK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [week::R](R) reader structure"]
        impl crate::Readable for WEEK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [week::W](W) writer structure"]
        impl crate::Writable for WEEK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WEEK to value 0"]
        impl crate::Resettable for WEEK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MONTH register accessor: an alias for `Reg<MONTH_SPEC>`"]
    pub type MONTH = crate::Reg<month::MONTH_SPEC>;
    #[doc = "MONTH"]
    pub mod month {
        #[doc = "Register `MONTH` reader"]
        pub struct R(crate::R<MONTH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MONTH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MONTH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MONTH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MONTH` writer"]
        pub struct W(crate::W<MONTH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MONTH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MONTH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MONTH_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "MONTH\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [month](index.html) module"]
        pub struct MONTH_SPEC;
        impl crate::RegisterSpec for MONTH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [month::R](R) reader structure"]
        impl crate::Readable for MONTH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [month::W](W) writer structure"]
        impl crate::Writable for MONTH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MONTH to value 0"]
        impl crate::Resettable for MONTH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "YEAR register accessor: an alias for `Reg<YEAR_SPEC>`"]
    pub type YEAR = crate::Reg<year::YEAR_SPEC>;
    #[doc = "YEAR"]
    pub mod year {
        #[doc = "Register `YEAR` reader"]
        pub struct R(crate::R<YEAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<YEAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<YEAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<YEAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `YEAR` writer"]
        pub struct W(crate::W<YEAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<YEAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<YEAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<YEAR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "YEAR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [year](index.html) module"]
        pub struct YEAR_SPEC;
        impl crate::RegisterSpec for YEAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [year::R](R) reader structure"]
        impl crate::Readable for YEAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [year::W](W) writer structure"]
        impl crate::Writable for YEAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets YEAR to value 0"]
        impl crate::Resettable for YEAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ALM register accessor: an alias for `Reg<ALM_SPEC>`"]
    pub type ALM = crate::Reg<alm::ALM_SPEC>;
    #[doc = "ALM"]
    pub mod alm {
        #[doc = "Register `ALM` reader"]
        pub struct R(crate::R<ALM_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ALM_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ALM_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ALM_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ALM` writer"]
        pub struct W(crate::W<ALM_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ALM_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ALM_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ALM_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ALM\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alm](index.html) module"]
        pub struct ALM_SPEC;
        impl crate::RegisterSpec for ALM_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [alm::R](R) reader structure"]
        impl crate::Readable for ALM_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [alm::W](W) writer structure"]
        impl crate::Writable for ALM_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ALM to value 0"]
        impl crate::Resettable for ALM_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR register accessor: an alias for `Reg<CR_SPEC>`"]
    pub type CR = crate::Reg<cr::CR_SPEC>;
    #[doc = "CR"]
    pub mod cr {
        #[doc = "Register `CR` reader"]
        pub struct R(crate::R<CR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR` writer"]
        pub struct W(crate::W<CR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](index.html) module"]
        pub struct CR_SPEC;
        impl crate::RegisterSpec for CR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr::R](R) reader structure"]
        impl crate::Readable for CR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr::W](W) writer structure"]
        impl crate::Writable for CR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR to value 0x0040_0000"]
        impl crate::Resettable for CR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0040_0000
            }
        }
    }
    #[doc = "ADJUST register accessor: an alias for `Reg<ADJUST_SPEC>`"]
    pub type ADJUST = crate::Reg<adjust::ADJUST_SPEC>;
    #[doc = "ADJUST"]
    pub mod adjust {
        #[doc = "Register `ADJUST` reader"]
        pub struct R(crate::R<ADJUST_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ADJUST_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ADJUST_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ADJUST_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ADJUST` writer"]
        pub struct W(crate::W<ADJUST_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADJUST_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADJUST_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADJUST_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADJUST\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adjust](index.html) module"]
        pub struct ADJUST_SPEC;
        impl crate::RegisterSpec for ADJUST_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [adjust::R](R) reader structure"]
        impl crate::Readable for ADJUST_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [adjust::W](W) writer structure"]
        impl crate::Writable for ADJUST_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADJUST to value 0"]
        impl crate::Resettable for ADJUST_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CLKSR1 register accessor: an alias for `Reg<CLKSR1_SPEC>`"]
    pub type CLKSR1 = crate::Reg<clksr1::CLKSR1_SPEC>;
    #[doc = "CLKSR1"]
    pub mod clksr1 {
        #[doc = "Register `CLKSR1` reader"]
        pub struct R(crate::R<CLKSR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLKSR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLKSR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLKSR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CLKSR1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clksr1](index.html) module"]
        pub struct CLKSR1_SPEC;
        impl crate::RegisterSpec for CLKSR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clksr1::R](R) reader structure"]
        impl crate::Readable for CLKSR1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CLKSR1 to value 0"]
        impl crate::Resettable for CLKSR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CALSR1 register accessor: an alias for `Reg<CALSR1_SPEC>`"]
    pub type CALSR1 = crate::Reg<calsr1::CALSR1_SPEC>;
    #[doc = "CALSR1"]
    pub mod calsr1 {
        #[doc = "Register `CALSR1` reader"]
        pub struct R(crate::R<CALSR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CALSR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CALSR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CALSR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CALSR1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calsr1](index.html) module"]
        pub struct CALSR1_SPEC;
        impl crate::RegisterSpec for CALSR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [calsr1::R](R) reader structure"]
        impl crate::Readable for CALSR1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CALSR1 to value 0"]
        impl crate::Resettable for CALSR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CLKSF1 register accessor: an alias for `Reg<CLKSF1_SPEC>`"]
    pub type CLKSF1 = crate::Reg<clksf1::CLKSF1_SPEC>;
    #[doc = "CLKSF1"]
    pub mod clksf1 {
        #[doc = "Register `CLKSF1` reader"]
        pub struct R(crate::R<CLKSF1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLKSF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLKSF1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLKSF1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CLKSF1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clksf1](index.html) module"]
        pub struct CLKSF1_SPEC;
        impl crate::RegisterSpec for CLKSF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clksf1::R](R) reader structure"]
        impl crate::Readable for CLKSF1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CLKSF1 to value 0"]
        impl crate::Resettable for CLKSF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CALPF1 register accessor: an alias for `Reg<CALPF1_SPEC>`"]
    pub type CALPF1 = crate::Reg<calpf1::CALPF1_SPEC>;
    #[doc = "CALPF1"]
    pub mod calpf1 {
        #[doc = "Register `CALPF1` reader"]
        pub struct R(crate::R<CALPF1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CALPF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CALPF1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CALPF1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CALPF1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calpf1](index.html) module"]
        pub struct CALPF1_SPEC;
        impl crate::RegisterSpec for CALPF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [calpf1::R](R) reader structure"]
        impl crate::Readable for CALPF1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CALPF1 to value 0"]
        impl crate::Resettable for CALPF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CLKSR2 register accessor: an alias for `Reg<CLKSR2_SPEC>`"]
    pub type CLKSR2 = crate::Reg<clksr2::CLKSR2_SPEC>;
    #[doc = "CLKSR2"]
    pub mod clksr2 {
        #[doc = "Register `CLKSR2` reader"]
        pub struct R(crate::R<CLKSR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLKSR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLKSR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLKSR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CLKSR2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clksr2](index.html) module"]
        pub struct CLKSR2_SPEC;
        impl crate::RegisterSpec for CLKSR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clksr2::R](R) reader structure"]
        impl crate::Readable for CLKSR2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CLKSR2 to value 0"]
        impl crate::Resettable for CLKSR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CALSR2 register accessor: an alias for `Reg<CALSR2_SPEC>`"]
    pub type CALSR2 = crate::Reg<calsr2::CALSR2_SPEC>;
    #[doc = "CALSR2"]
    pub mod calsr2 {
        #[doc = "Register `CALSR2` reader"]
        pub struct R(crate::R<CALSR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CALSR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CALSR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CALSR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CALSR2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calsr2](index.html) module"]
        pub struct CALSR2_SPEC;
        impl crate::RegisterSpec for CALSR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [calsr2::R](R) reader structure"]
        impl crate::Readable for CALSR2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CALSR2 to value 0"]
        impl crate::Resettable for CALSR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CLKSF2 register accessor: an alias for `Reg<CLKSF2_SPEC>`"]
    pub type CLKSF2 = crate::Reg<clksf2::CLKSF2_SPEC>;
    #[doc = "CLKSF2"]
    pub mod clksf2 {
        #[doc = "Register `CLKSF2` reader"]
        pub struct R(crate::R<CLKSF2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLKSF2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLKSF2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLKSF2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CLKSF2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clksf2](index.html) module"]
        pub struct CLKSF2_SPEC;
        impl crate::RegisterSpec for CLKSF2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clksf2::R](R) reader structure"]
        impl crate::Readable for CLKSF2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CLKSF2 to value 0"]
        impl crate::Resettable for CLKSF2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CALPF2 register accessor: an alias for `Reg<CALPF2_SPEC>`"]
    pub type CALPF2 = crate::Reg<calpf2::CALPF2_SPEC>;
    #[doc = "CALPF2"]
    pub mod calpf2 {
        #[doc = "Register `CALPF2` reader"]
        pub struct R(crate::R<CALPF2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CALPF2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CALPF2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CALPF2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "CALPF2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calpf2](index.html) module"]
        pub struct CALPF2_SPEC;
        impl crate::RegisterSpec for CALPF2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [calpf2::R](R) reader structure"]
        impl crate::Readable for CALPF2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CALPF2 to value 0"]
        impl crate::Resettable for CALPF2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BAKUP0 register accessor: an alias for `Reg<BAKUP0_SPEC>`"]
    pub type BAKUP0 = crate::Reg<bakup0::BAKUP0_SPEC>;
    #[doc = "BAKUP0"]
    pub mod bakup0 {
        #[doc = "Register `BAKUP0` reader"]
        pub struct R(crate::R<BAKUP0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BAKUP0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BAKUP0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BAKUP0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BAKUP0` writer"]
        pub struct W(crate::W<BAKUP0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BAKUP0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BAKUP0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BAKUP0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "BAKUP0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bakup0](index.html) module"]
        pub struct BAKUP0_SPEC;
        impl crate::RegisterSpec for BAKUP0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bakup0::R](R) reader structure"]
        impl crate::Readable for BAKUP0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bakup0::W](W) writer structure"]
        impl crate::Writable for BAKUP0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BAKUP0 to value 0"]
        impl crate::Resettable for BAKUP0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BAKUP1 register accessor: an alias for `Reg<BAKUP1_SPEC>`"]
    pub type BAKUP1 = crate::Reg<bakup1::BAKUP1_SPEC>;
    #[doc = "BAKUP1"]
    pub mod bakup1 {
        #[doc = "Register `BAKUP1` reader"]
        pub struct R(crate::R<BAKUP1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BAKUP1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BAKUP1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BAKUP1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BAKUP1` writer"]
        pub struct W(crate::W<BAKUP1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BAKUP1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BAKUP1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BAKUP1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "BAKUP1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bakup1](index.html) module"]
        pub struct BAKUP1_SPEC;
        impl crate::RegisterSpec for BAKUP1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bakup1::R](R) reader structure"]
        impl crate::Readable for BAKUP1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bakup1::W](W) writer structure"]
        impl crate::Writable for BAKUP1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BAKUP1 to value 0"]
        impl crate::Resettable for BAKUP1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BAKUP2 register accessor: an alias for `Reg<BAKUP2_SPEC>`"]
    pub type BAKUP2 = crate::Reg<bakup2::BAKUP2_SPEC>;
    #[doc = "BAKUP2"]
    pub mod bakup2 {
        #[doc = "Register `BAKUP2` reader"]
        pub struct R(crate::R<BAKUP2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BAKUP2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BAKUP2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BAKUP2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BAKUP2` writer"]
        pub struct W(crate::W<BAKUP2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BAKUP2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BAKUP2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BAKUP2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "BAKUP2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bakup2](index.html) module"]
        pub struct BAKUP2_SPEC;
        impl crate::RegisterSpec for BAKUP2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bakup2::R](R) reader structure"]
        impl crate::Readable for BAKUP2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bakup2::W](W) writer structure"]
        impl crate::Writable for BAKUP2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BAKUP2 to value 0"]
        impl crate::Resettable for BAKUP2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BAKUP3 register accessor: an alias for `Reg<BAKUP3_SPEC>`"]
    pub type BAKUP3 = crate::Reg<bakup3::BAKUP3_SPEC>;
    #[doc = "BAKUP3"]
    pub mod bakup3 {
        #[doc = "Register `BAKUP3` reader"]
        pub struct R(crate::R<BAKUP3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BAKUP3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BAKUP3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BAKUP3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BAKUP3` writer"]
        pub struct W(crate::W<BAKUP3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BAKUP3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BAKUP3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BAKUP3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "BAKUP3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bakup3](index.html) module"]
        pub struct BAKUP3_SPEC;
        impl crate::RegisterSpec for BAKUP3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bakup3::R](R) reader structure"]
        impl crate::Readable for BAKUP3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bakup3::W](W) writer structure"]
        impl crate::Writable for BAKUP3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BAKUP3 to value 0"]
        impl crate::Resettable for BAKUP3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BAKUP4 register accessor: an alias for `Reg<BAKUP4_SPEC>`"]
    pub type BAKUP4 = crate::Reg<bakup4::BAKUP4_SPEC>;
    #[doc = "BAKUP4"]
    pub mod bakup4 {
        #[doc = "Register `BAKUP4` reader"]
        pub struct R(crate::R<BAKUP4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BAKUP4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BAKUP4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BAKUP4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BAKUP4` writer"]
        pub struct W(crate::W<BAKUP4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BAKUP4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BAKUP4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BAKUP4_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "BAKUP4\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bakup4](index.html) module"]
        pub struct BAKUP4_SPEC;
        impl crate::RegisterSpec for BAKUP4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bakup4::R](R) reader structure"]
        impl crate::Readable for BAKUP4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bakup4::W](W) writer structure"]
        impl crate::Writable for BAKUP4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BAKUP4 to value 0"]
        impl crate::Resettable for BAKUP4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "PMU"]
pub struct PMU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PMU {}
impl PMU {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pmu::RegisterBlock = 0x4000_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pmu::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PMU {
    type Target = pmu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PMU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PMU").finish()
    }
}
#[doc = "PMU"]
pub mod pmu {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - CR1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        #[doc = "0x04 - SR"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x08 - IOSEL"]
        pub iosel: crate::Reg<iosel::IOSEL_SPEC>,
        #[doc = "0x0c - IOCR"]
        pub iocr: crate::Reg<iocr::IOCR_SPEC>,
        #[doc = "0x10 - ANACR"]
        pub anacr: crate::Reg<anacr::ANACR_SPEC>,
        #[doc = "0x14 - CR2"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "CR1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "SR"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "SR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets SR to value 0x0001_0000"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0001_0000
            }
        }
    }
    #[doc = "IOSEL register accessor: an alias for `Reg<IOSEL_SPEC>`"]
    pub type IOSEL = crate::Reg<iosel::IOSEL_SPEC>;
    #[doc = "IOSEL"]
    pub mod iosel {
        #[doc = "Register `IOSEL` reader"]
        pub struct R(crate::R<IOSEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IOSEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IOSEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IOSEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IOSEL` writer"]
        pub struct W(crate::W<IOSEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IOSEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IOSEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IOSEL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IOSEL\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iosel](index.html) module"]
        pub struct IOSEL_SPEC;
        impl crate::RegisterSpec for IOSEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iosel::R](R) reader structure"]
        impl crate::Readable for IOSEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iosel::W](W) writer structure"]
        impl crate::Writable for IOSEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IOSEL to value 0"]
        impl crate::Resettable for IOSEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IOCR register accessor: an alias for `Reg<IOCR_SPEC>`"]
    pub type IOCR = crate::Reg<iocr::IOCR_SPEC>;
    #[doc = "IOCR"]
    pub mod iocr {
        #[doc = "Register `IOCR` reader"]
        pub struct R(crate::R<IOCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IOCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IOCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IOCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IOCR` writer"]
        pub struct W(crate::W<IOCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IOCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IOCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IOCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IOCR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocr](index.html) module"]
        pub struct IOCR_SPEC;
        impl crate::RegisterSpec for IOCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iocr::R](R) reader structure"]
        impl crate::Readable for IOCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iocr::W](W) writer structure"]
        impl crate::Writable for IOCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IOCR to value 0x0070_0000"]
        impl crate::Resettable for IOCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0070_0000
            }
        }
    }
    #[doc = "ANACR register accessor: an alias for `Reg<ANACR_SPEC>`"]
    pub type ANACR = crate::Reg<anacr::ANACR_SPEC>;
    #[doc = "ANACR"]
    pub mod anacr {
        #[doc = "Register `ANACR` reader"]
        pub struct R(crate::R<ANACR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ANACR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ANACR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ANACR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ANACR` writer"]
        pub struct W(crate::W<ANACR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ANACR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ANACR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ANACR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ANACR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [anacr](index.html) module"]
        pub struct ANACR_SPEC;
        impl crate::RegisterSpec for ANACR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [anacr::R](R) reader structure"]
        impl crate::Readable for ANACR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [anacr::W](W) writer structure"]
        impl crate::Writable for ANACR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ANACR to value 0x2040_8338"]
        impl crate::Resettable for ANACR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x2040_8338
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "CR2"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "system register"]
pub struct SCU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SCU {}
impl SCU {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const scu::RegisterBlock = 0x4001_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const scu::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SCU {
    type Target = scu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SCU").finish()
    }
}
#[doc = "system register"]
pub mod scu {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Reset control register"]
        pub rcr: crate::Reg<rcr::RCR_SPEC>,
        #[doc = "0x04 - Reset source register"]
        pub rsr: crate::Reg<rsr::RSR_SPEC>,
        #[doc = "0x08 - Peripheral reset control register 2"]
        pub iprstr2: crate::Reg<iprstr2::IPRSTR2_SPEC>,
        #[doc = "0x0c - Peripheral reset control register 1"]
        pub iprstr1: crate::Reg<iprstr1::IPRSTR1_SPEC>,
        #[doc = "0x10 - Clock control register 1"]
        pub ccr1: crate::Reg<ccr1::CCR1_SPEC>,
        #[doc = "0x14 - Clock control register 2"]
        pub ccr2: crate::Reg<ccr2::CCR2_SPEC>,
        #[doc = "0x18 - Clock interrupt register"]
        pub cir: crate::Reg<cir::CIR_SPEC>,
        #[doc = "0x1c - Peripheral enable control register 1"]
        pub ipckenr1: crate::Reg<ipckenr1::IPCKENR1_SPEC>,
        #[doc = "0x20 - Peripheral reset control register 2"]
        pub ipckenr2: crate::Reg<ipckenr2::IPCKENR2_SPEC>,
        #[doc = "0x24 - RCH control register"]
        pub rchcr: crate::Reg<rchcr::RCHCR_SPEC>,
        #[doc = "0x28 - XTH control register"]
        pub xthcr: crate::Reg<xthcr::XTHCR_SPEC>,
        #[doc = "0x2c - PLL control register"]
        pub pllcr: crate::Reg<pllcr::PLLCR_SPEC>,
        #[doc = "0x30 - LDO control register"]
        pub ldocr: crate::Reg<ldocr::LDOCR_SPEC>,
        _reserved13: [u8; 0x04],
        #[doc = "0x38 - Work mode register"]
        pub wmr: crate::Reg<wmr::WMR_SPEC>,
        #[doc = "0x3c - Clock output control register"]
        pub clkocr: crate::Reg<clkocr::CLKOCR_SPEC>,
        #[doc = "0x40 - Version register"]
        pub ver: crate::Reg<ver::VER_SPEC>,
        #[doc = "0x44 - System config register 1"]
        pub syscfg1: crate::Reg<syscfg1::SYSCFG1_SPEC>,
        #[doc = "0x48 - LVD config register"]
        pub lvdcfg: crate::Reg<lvdcfg::LVDCFG_SPEC>,
        #[doc = "0x4c - STOP mode config register"]
        pub stopcfg: crate::Reg<stopcfg::STOPCFG_SPEC>,
        _reserved19: [u8; 0x04],
        #[doc = "0x54 - USBPHY control register"]
        pub phycfg: crate::Reg<phycfg::PHYCFG_SPEC>,
        #[doc = "0x58 - Memory config register"]
        pub memcfg: crate::Reg<memcfg::MEMCFG_SPEC>,
        #[doc = "0x5c - Dummy register"]
        pub dummy: crate::Reg<dummy::DUMMY_SPEC>,
        #[doc = "0x60 - GPIOA function selection register 1"]
        pub pasel1: crate::Reg<pasel1::PASEL1_SPEC>,
        #[doc = "0x64 - GPIOA function selection register 2"]
        pub pasel2: crate::Reg<pasel2::PASEL2_SPEC>,
        #[doc = "0x68 - GPIOB function selection register 1"]
        pub pbsel1: crate::Reg<pbsel1::PBSEL1_SPEC>,
        #[doc = "0x6c - GPIOB function selection register 2"]
        pub pbsel2: crate::Reg<pbsel2::PBSEL2_SPEC>,
        #[doc = "0x70 - GPIOA GPIOB pull up config register"]
        pub pabpur: crate::Reg<pabpur::PABPUR_SPEC>,
        #[doc = "0x74 - GPIOA GPIOB pull down config register"]
        pub pabpdr: crate::Reg<pabpdr::PABPDR_SPEC>,
        #[doc = "0x78 - GPIOA output drive selection register"]
        pub pastr: crate::Reg<pastr::PASTR_SPEC>,
        #[doc = "0x7c - GPIOB output drive selection register"]
        pub pbstr: crate::Reg<pbstr::PBSTR_SPEC>,
        #[doc = "0x80 - GPIOA GPIOB SMT enable register"]
        pub pabsmtr: crate::Reg<pabsmtr::PABSMTR_SPEC>,
        #[doc = "0x84 - GPIOA GPIOB open drain enable register"]
        pub pabodr: crate::Reg<pabodr::PABODR_SPEC>,
        #[doc = "0x88 - GPIOA GPIOB digtal analog selection register"]
        pub pabads: crate::Reg<pabads::PABADS_SPEC>,
        _reserved33: [u8; 0x04],
        #[doc = "0x90 - GPIOC function selection register 1"]
        pub pcsel1: crate::Reg<pcsel1::PCSEL1_SPEC>,
        #[doc = "0x94 - GPIOC function selection register 2"]
        pub pcsel2: crate::Reg<pcsel2::PCSEL2_SPEC>,
        #[doc = "0x98 - GPIOD function selection register 1"]
        pub pdsel1: crate::Reg<pdsel1::PDSEL1_SPEC>,
        #[doc = "0x9c - GPIOD function selection register 2"]
        pub pdsel2: crate::Reg<pdsel2::PDSEL2_SPEC>,
        #[doc = "0xa0 - GPIOC GPIOD pull up config register"]
        pub pcdpur: crate::Reg<pcdpur::PCDPUR_SPEC>,
        #[doc = "0xa4 - GPIOC GPIOD pull down config register"]
        pub pcdpdr: crate::Reg<pcdpdr::PCDPDR_SPEC>,
        #[doc = "0xa8 - GPIOC output drive selection register"]
        pub pcstr: crate::Reg<pcstr::PCSTR_SPEC>,
        #[doc = "0xac - GPIOD output drive selection register"]
        pub pdstr: crate::Reg<pdstr::PDSTR_SPEC>,
        #[doc = "0xb0 - GPIOC GPIOD SMT enable register"]
        pub pcdsmtr: crate::Reg<pcdsmtr::PCDSMTR_SPEC>,
        #[doc = "0xb4 - GPIOC GPIOD open drain enable register"]
        pub pcdodr: crate::Reg<pcdodr::PCDODR_SPEC>,
        #[doc = "0xb8 - GPIOC GPIOD digtal analog selection register"]
        pub pcdads: crate::Reg<pcdads::PCDADS_SPEC>,
        _reserved44: [u8; 0x04],
        #[doc = "0xc0 - GPIOE function selection register 1"]
        pub pesel1: crate::Reg<pesel1::PESEL1_SPEC>,
        #[doc = "0xc4 - GPIOE function selection register 2"]
        pub pesel2: crate::Reg<pesel2::PESEL2_SPEC>,
        #[doc = "0xc8 - GPIOF function selection register 1"]
        pub pfsel1: crate::Reg<pfsel1::PFSEL1_SPEC>,
        _reserved47: [u8; 0x04],
        #[doc = "0xd0 - GPIOE GPIOF pull up config register"]
        pub pefpur: crate::Reg<pefpur::PEFPUR_SPEC>,
        #[doc = "0xd4 - GPIOE GPIOE pull down config register"]
        pub pefpdr: crate::Reg<pefpdr::PEFPDR_SPEC>,
        #[doc = "0xd8 - GPIOE output drive selection register"]
        pub pestr: crate::Reg<pestr::PESTR_SPEC>,
        #[doc = "0xdc - GPIOF output drive selection register"]
        pub pfstr: crate::Reg<pfstr::PFSTR_SPEC>,
        #[doc = "0xe0 - GPIOE GPIOF SMT enable register"]
        pub pefsmtr: crate::Reg<pefsmtr::PEFSMTR_SPEC>,
        #[doc = "0xe4 - GPIOE GPIOF open drain enable register"]
        pub pefodr: crate::Reg<pefodr::PEFODR_SPEC>,
        #[doc = "0xe8 - GPIOE GPIOF digtal analog selection register"]
        pub pefads: crate::Reg<pefads::PEFADS_SPEC>,
    }
    #[doc = "RCR register accessor: an alias for `Reg<RCR_SPEC>`"]
    pub type RCR = crate::Reg<rcr::RCR_SPEC>;
    #[doc = "Reset control register"]
    pub mod rcr {
        #[doc = "Register `RCR` reader"]
        pub struct R(crate::R<RCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RCR` writer"]
        pub struct W(crate::W<RCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RCR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SRST` reader - Soft Reset Enable"]
        pub type SRST_R = crate::BitReader<bool>;
        #[doc = "Field `SRST` writer - Soft Reset Enable"]
        pub type SRST_W<'a> = crate::BitWriter<'a, u32, RCR_SPEC, bool, 30>;
        #[doc = "Field `EFC_RST` reader - eFlash Reset Enable"]
        pub type EFC_RST_R = crate::BitReader<bool>;
        #[doc = "Field `EFC_RST` writer - eFlash Reset Enable"]
        pub type EFC_RST_W<'a> = crate::BitWriter<'a, u32, RCR_SPEC, bool, 29>;
        #[doc = "Field `RMAP_IMP` reader - eFlash Remap Enable"]
        pub type RMAP_IMP_R = crate::BitReader<bool>;
        #[doc = "Field `RMAP_IMP` writer - eFlash Remap Enable"]
        pub type RMAP_IMP_W<'a> = crate::BitWriter<'a, u32, RCR_SPEC, bool, 16>;
        #[doc = "Field `LOCKUPRST_EN` reader - Allowed LOCKUP Reset"]
        pub type LOCKUPRST_EN_R = crate::BitReader<bool>;
        #[doc = "Field `LOCKUPRST_EN` writer - Allowed LOCKUP Reset"]
        pub type LOCKUPRST_EN_W<'a> = crate::BitWriter<'a, u32, RCR_SPEC, bool, 3>;
        #[doc = "Field `IWDTRST_EN` reader - Allowed IWDT Reset"]
        pub type IWDTRST_EN_R = crate::BitReader<bool>;
        #[doc = "Field `IWDTRST_EN` writer - Allowed IWDT Reset"]
        pub type IWDTRST_EN_W<'a> = crate::BitWriter<'a, u32, RCR_SPEC, bool, 2>;
        #[doc = "Field `WDTRST_EN` reader - Allowed WDT Reset"]
        pub type WDTRST_EN_R = crate::BitReader<bool>;
        #[doc = "Field `WDTRST_EN` writer - Allowed WDT Reset"]
        pub type WDTRST_EN_W<'a> = crate::BitWriter<'a, u32, RCR_SPEC, bool, 1>;
        #[doc = "Field `LVDRST_EN` reader - Allowed LVD Reset"]
        pub type LVDRST_EN_R = crate::BitReader<bool>;
        #[doc = "Field `LVDRST_EN` writer - Allowed LVD Reset"]
        pub type LVDRST_EN_W<'a> = crate::BitWriter<'a, u32, RCR_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 30 - Soft Reset Enable"]
            #[inline(always)]
            pub fn srst(&self) -> SRST_R {
                SRST_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29 - eFlash Reset Enable"]
            #[inline(always)]
            pub fn efc_rst(&self) -> EFC_RST_R {
                EFC_RST_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 16 - eFlash Remap Enable"]
            #[inline(always)]
            pub fn rmap_imp(&self) -> RMAP_IMP_R {
                RMAP_IMP_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 3 - Allowed LOCKUP Reset"]
            #[inline(always)]
            pub fn lockuprst_en(&self) -> LOCKUPRST_EN_R {
                LOCKUPRST_EN_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - Allowed IWDT Reset"]
            #[inline(always)]
            pub fn iwdtrst_en(&self) -> IWDTRST_EN_R {
                IWDTRST_EN_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - Allowed WDT Reset"]
            #[inline(always)]
            pub fn wdtrst_en(&self) -> WDTRST_EN_R {
                WDTRST_EN_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - Allowed LVD Reset"]
            #[inline(always)]
            pub fn lvdrst_en(&self) -> LVDRST_EN_R {
                LVDRST_EN_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 30 - Soft Reset Enable"]
            #[inline(always)]
            pub fn srst(&mut self) -> SRST_W {
                SRST_W::new(self)
            }
            #[doc = "Bit 29 - eFlash Reset Enable"]
            #[inline(always)]
            pub fn efc_rst(&mut self) -> EFC_RST_W {
                EFC_RST_W::new(self)
            }
            #[doc = "Bit 16 - eFlash Remap Enable"]
            #[inline(always)]
            pub fn rmap_imp(&mut self) -> RMAP_IMP_W {
                RMAP_IMP_W::new(self)
            }
            #[doc = "Bit 3 - Allowed LOCKUP Reset"]
            #[inline(always)]
            pub fn lockuprst_en(&mut self) -> LOCKUPRST_EN_W {
                LOCKUPRST_EN_W::new(self)
            }
            #[doc = "Bit 2 - Allowed IWDT Reset"]
            #[inline(always)]
            pub fn iwdtrst_en(&mut self) -> IWDTRST_EN_W {
                IWDTRST_EN_W::new(self)
            }
            #[doc = "Bit 1 - Allowed WDT Reset"]
            #[inline(always)]
            pub fn wdtrst_en(&mut self) -> WDTRST_EN_W {
                WDTRST_EN_W::new(self)
            }
            #[doc = "Bit 0 - Allowed LVD Reset"]
            #[inline(always)]
            pub fn lvdrst_en(&mut self) -> LVDRST_EN_W {
                LVDRST_EN_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Reset control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](index.html) module"]
        pub struct RCR_SPEC;
        impl crate::RegisterSpec for RCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rcr::R](R) reader structure"]
        impl crate::Readable for RCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rcr::W](W) writer structure"]
        impl crate::Writable for RCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RCR to value 0"]
        impl crate::Resettable for RCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RSR register accessor: an alias for `Reg<RSR_SPEC>`"]
    pub type RSR = crate::Reg<rsr::RSR_SPEC>;
    #[doc = "Reset source register"]
    pub mod rsr {
        #[doc = "Register `RSR` reader"]
        pub struct R(crate::R<RSR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RSR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RSR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RSR` writer"]
        pub struct W(crate::W<RSR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RSR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RSR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Reset source register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rsr](index.html) module"]
        pub struct RSR_SPEC;
        impl crate::RegisterSpec for RSR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rsr::R](R) reader structure"]
        impl crate::Readable for RSR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rsr::W](W) writer structure"]
        impl crate::Writable for RSR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RSR to value 0"]
        impl crate::Resettable for RSR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPRSTR2 register accessor: an alias for `Reg<IPRSTR2_SPEC>`"]
    pub type IPRSTR2 = crate::Reg<iprstr2::IPRSTR2_SPEC>;
    #[doc = "Peripheral reset control register 2"]
    pub mod iprstr2 {
        #[doc = "Register `IPRSTR2` reader"]
        pub struct R(crate::R<IPRSTR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPRSTR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPRSTR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPRSTR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IPRSTR2` writer"]
        pub struct W(crate::W<IPRSTR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IPRSTR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IPRSTR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IPRSTR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Peripheral reset control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iprstr2](index.html) module"]
        pub struct IPRSTR2_SPEC;
        impl crate::RegisterSpec for IPRSTR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iprstr2::R](R) reader structure"]
        impl crate::Readable for IPRSTR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iprstr2::W](W) writer structure"]
        impl crate::Writable for IPRSTR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IPRSTR2 to value 0"]
        impl crate::Resettable for IPRSTR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPRSTR1 register accessor: an alias for `Reg<IPRSTR1_SPEC>`"]
    pub type IPRSTR1 = crate::Reg<iprstr1::IPRSTR1_SPEC>;
    #[doc = "Peripheral reset control register 1"]
    pub mod iprstr1 {
        #[doc = "Register `IPRSTR1` reader"]
        pub struct R(crate::R<IPRSTR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPRSTR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPRSTR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPRSTR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IPRSTR1` writer"]
        pub struct W(crate::W<IPRSTR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IPRSTR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IPRSTR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IPRSTR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Peripheral reset control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iprstr1](index.html) module"]
        pub struct IPRSTR1_SPEC;
        impl crate::RegisterSpec for IPRSTR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iprstr1::R](R) reader structure"]
        impl crate::Readable for IPRSTR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iprstr1::W](W) writer structure"]
        impl crate::Writable for IPRSTR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IPRSTR1 to value 0"]
        impl crate::Resettable for IPRSTR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR1 register accessor: an alias for `Reg<CCR1_SPEC>`"]
    pub type CCR1 = crate::Reg<ccr1::CCR1_SPEC>;
    #[doc = "Clock control register 1"]
    pub mod ccr1 {
        #[doc = "Register `CCR1` reader"]
        pub struct R(crate::R<CCR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR1` writer"]
        pub struct W(crate::W<CCR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SYS_CLK_SEL` reader - Select SYS_CLK: 000(RCH) 001(RC32K) 010(XTH) 011(XTL) 1xx(PLL)"]
        pub type SYS_CLK_SEL_R = crate::FieldReader<u8, u8>;
        #[doc = "Field `SYS_CLK_SEL` writer - Select SYS_CLK: 000(RCH) 001(RC32K) 010(XTH) 011(XTL) 1xx(PLL)"]
        pub type SYS_CLK_SEL_W<'a> = crate::FieldWriter<'a, u32, CCR1_SPEC, u8, u8, 3, 0>;
        impl R {
            #[doc = "Bits 0:2 - Select SYS_CLK: 000(RCH) 001(RC32K) 010(XTH) 011(XTL) 1xx(PLL)"]
            #[inline(always)]
            pub fn sys_clk_sel(&self) -> SYS_CLK_SEL_R {
                SYS_CLK_SEL_R::new((self.bits & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Select SYS_CLK: 000(RCH) 001(RC32K) 010(XTH) 011(XTL) 1xx(PLL)"]
            #[inline(always)]
            pub fn sys_clk_sel(&mut self) -> SYS_CLK_SEL_W {
                SYS_CLK_SEL_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](index.html) module"]
        pub struct CCR1_SPEC;
        impl crate::RegisterSpec for CCR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr1::R](R) reader structure"]
        impl crate::Readable for CCR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr1::W](W) writer structure"]
        impl crate::Writable for CCR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR1 to value 0"]
        impl crate::Resettable for CCR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR2 register accessor: an alias for `Reg<CCR2_SPEC>`"]
    pub type CCR2 = crate::Reg<ccr2::CCR2_SPEC>;
    #[doc = "Clock control register 2"]
    pub mod ccr2 {
        #[doc = "Register `CCR2` reader"]
        pub struct R(crate::R<CCR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR2` writer"]
        pub struct W(crate::W<CCR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DIVDONE` reader - SYSDIV 256 clock claim down"]
        pub type DIVDONE_R = crate::BitReader<bool>;
        #[doc = "Field `FLTCLK_SEL` reader - Select LVD/COMP filter 0(PCLK/32) 1(RC32K)"]
        pub type FLTCLK_SEL_R = crate::BitReader<bool>;
        #[doc = "Field `FLTCLK_SEL` writer - Select LVD/COMP filter 0(PCLK/32) 1(RC32K)"]
        pub type FLTCLK_SEL_W<'a> = crate::BitWriter<'a, u32, CCR2_SPEC, bool, 15>;
        #[doc = "Field `LPUCLK_SEL` reader - Select LUART CLOCKSRC 00(RC32K) 01(XTL) 10(PCLK/LPUARTDIV)"]
        pub type LPUCLK_SEL_R = crate::FieldReader<u8, u8>;
        #[doc = "Field `LPUCLK_SEL` writer - Select LUART CLOCKSRC 00(RC32K) 01(XTL) 10(PCLK/LPUARTDIV)"]
        pub type LPUCLK_SEL_W<'a> = crate::FieldWriter<'a, u32, CCR2_SPEC, u8, u8, 2, 13>;
        #[doc = "Field `LPUARTDIV` reader - Select LUART DIV (2^(2+val))"]
        pub type LPUARTDIV_R = crate::FieldReader<u8, u8>;
        #[doc = "Field `LPUARTDIV` writer - Select LUART DIV (2^(2+val))"]
        pub type LPUARTDIV_W<'a> = crate::FieldWriter<'a, u32, CCR2_SPEC, u8, u8, 2, 11>;
        #[doc = "Field `PCLKDIV` reader - Select PCLK DIV 0xx(NoDiv) 100(2) 101(4) 110(8) 111(16)"]
        pub type PCLKDIV_R = crate::FieldReader<u8, u8>;
        #[doc = "Field `PCLKDIV` writer - Select PCLK DIV 0xx(NoDiv) 100(2) 101(4) 110(8) 111(16)"]
        pub type PCLKDIV_W<'a> = crate::FieldWriter<'a, u32, CCR2_SPEC, u8, u8, 3, 8>;
        #[doc = "Field `SYSDIV1` reader - Select HCLK DIV (val+1)"]
        pub type SYSDIV1_R = crate::FieldReader<u8, u8>;
        #[doc = "Field `SYSDIV1` writer - Select HCLK DIV (val+1)"]
        pub type SYSDIV1_W<'a> = crate::FieldWriter<'a, u32, CCR2_SPEC, u8, u8, 4, 4>;
        #[doc = "Field `SYSDIV0` reader - Select SYS_CLK DIV (val+1)"]
        pub type SYSDIV0_R = crate::FieldReader<u8, u8>;
        #[doc = "Field `SYSDIV0` writer - Select SYS_CLK DIV (val+1)"]
        pub type SYSDIV0_W<'a> = crate::FieldWriter<'a, u32, CCR2_SPEC, u8, u8, 4, 0>;
        impl R {
            #[doc = "Bit 31 - SYSDIV 256 clock claim down"]
            #[inline(always)]
            pub fn divdone(&self) -> DIVDONE_R {
                DIVDONE_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 15 - Select LVD/COMP filter 0(PCLK/32) 1(RC32K)"]
            #[inline(always)]
            pub fn fltclk_sel(&self) -> FLTCLK_SEL_R {
                FLTCLK_SEL_R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 13:14 - Select LUART CLOCKSRC 00(RC32K) 01(XTL) 10(PCLK/LPUARTDIV)"]
            #[inline(always)]
            pub fn lpuclk_sel(&self) -> LPUCLK_SEL_R {
                LPUCLK_SEL_R::new(((self.bits >> 13) & 3) as u8)
            }
            #[doc = "Bits 11:12 - Select LUART DIV (2^(2+val))"]
            #[inline(always)]
            pub fn lpuartdiv(&self) -> LPUARTDIV_R {
                LPUARTDIV_R::new(((self.bits >> 11) & 3) as u8)
            }
            #[doc = "Bits 8:10 - Select PCLK DIV 0xx(NoDiv) 100(2) 101(4) 110(8) 111(16)"]
            #[inline(always)]
            pub fn pclkdiv(&self) -> PCLKDIV_R {
                PCLKDIV_R::new(((self.bits >> 8) & 7) as u8)
            }
            #[doc = "Bits 4:7 - Select HCLK DIV (val+1)"]
            #[inline(always)]
            pub fn sysdiv1(&self) -> SYSDIV1_R {
                SYSDIV1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Select SYS_CLK DIV (val+1)"]
            #[inline(always)]
            pub fn sysdiv0(&self) -> SYSDIV0_R {
                SYSDIV0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Select LVD/COMP filter 0(PCLK/32) 1(RC32K)"]
            #[inline(always)]
            pub fn fltclk_sel(&mut self) -> FLTCLK_SEL_W {
                FLTCLK_SEL_W::new(self)
            }
            #[doc = "Bits 13:14 - Select LUART CLOCKSRC 00(RC32K) 01(XTL) 10(PCLK/LPUARTDIV)"]
            #[inline(always)]
            pub fn lpuclk_sel(&mut self) -> LPUCLK_SEL_W {
                LPUCLK_SEL_W::new(self)
            }
            #[doc = "Bits 11:12 - Select LUART DIV (2^(2+val))"]
            #[inline(always)]
            pub fn lpuartdiv(&mut self) -> LPUARTDIV_W {
                LPUARTDIV_W::new(self)
            }
            #[doc = "Bits 8:10 - Select PCLK DIV 0xx(NoDiv) 100(2) 101(4) 110(8) 111(16)"]
            #[inline(always)]
            pub fn pclkdiv(&mut self) -> PCLKDIV_W {
                PCLKDIV_W::new(self)
            }
            #[doc = "Bits 4:7 - Select HCLK DIV (val+1)"]
            #[inline(always)]
            pub fn sysdiv1(&mut self) -> SYSDIV1_W {
                SYSDIV1_W::new(self)
            }
            #[doc = "Bits 0:3 - Select SYS_CLK DIV (val+1)"]
            #[inline(always)]
            pub fn sysdiv0(&mut self) -> SYSDIV0_W {
                SYSDIV0_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](index.html) module"]
        pub struct CCR2_SPEC;
        impl crate::RegisterSpec for CCR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr2::R](R) reader structure"]
        impl crate::Readable for CCR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr2::W](W) writer structure"]
        impl crate::Writable for CCR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR2 to value 0"]
        impl crate::Resettable for CCR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CIR register accessor: an alias for `Reg<CIR_SPEC>`"]
    pub type CIR = crate::Reg<cir::CIR_SPEC>;
    #[doc = "Clock interrupt register"]
    pub mod cir {
        #[doc = "Register `CIR` reader"]
        pub struct R(crate::R<CIR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CIR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CIR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CIR` writer"]
        pub struct W(crate::W<CIR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CIR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CIR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cir](index.html) module"]
        pub struct CIR_SPEC;
        impl crate::RegisterSpec for CIR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cir::R](R) reader structure"]
        impl crate::Readable for CIR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cir::W](W) writer structure"]
        impl crate::Writable for CIR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CIR to value 0"]
        impl crate::Resettable for CIR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPCKENR1 register accessor: an alias for `Reg<IPCKENR1_SPEC>`"]
    pub type IPCKENR1 = crate::Reg<ipckenr1::IPCKENR1_SPEC>;
    #[doc = "Peripheral enable control register 1"]
    pub mod ipckenr1 {
        #[doc = "Register `IPCKENR1` reader"]
        pub struct R(crate::R<IPCKENR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPCKENR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPCKENR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPCKENR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IPCKENR1` writer"]
        pub struct W(crate::W<IPCKENR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IPCKENR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IPCKENR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IPCKENR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CAN1` reader - CAN1 Clock enable"]
        pub type CAN1_R = crate::BitReader<bool>;
        #[doc = "Field `CAN1` writer - CAN1 Clock enable"]
        pub type CAN1_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 31>;
        #[doc = "Field `ROM` reader - ROM Clock enable"]
        pub type ROM_R = crate::BitReader<bool>;
        #[doc = "Field `ROM` writer - ROM Clock enable"]
        pub type ROM_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 30>;
        #[doc = "Field `HRNG` reader - HRNG Clock enable"]
        pub type HRNG_R = crate::BitReader<bool>;
        #[doc = "Field `HRNG` writer - HRNG Clock enable"]
        pub type HRNG_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 29>;
        #[doc = "Field `AES` reader - AES Clock enable"]
        pub type AES_R = crate::BitReader<bool>;
        #[doc = "Field `AES` writer - AES Clock enable"]
        pub type AES_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 28>;
        #[doc = "Field `TIM17` reader - TIM17 Clock enable"]
        pub type TIM17_R = crate::BitReader<bool>;
        #[doc = "Field `TIM17` writer - TIM17 Clock enable"]
        pub type TIM17_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 27>;
        #[doc = "Field `TIM16` reader - TIM16 Clock enable"]
        pub type TIM16_R = crate::BitReader<bool>;
        #[doc = "Field `TIM16` writer - TIM16 Clock enable"]
        pub type TIM16_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 26>;
        #[doc = "Field `TIM15` reader - TIM15 Clock enable"]
        pub type TIM15_R = crate::BitReader<bool>;
        #[doc = "Field `TIM15` writer - TIM15 Clock enable"]
        pub type TIM15_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 25>;
        #[doc = "Field `TIM14` reader - TIM14 Clock enable"]
        pub type TIM14_R = crate::BitReader<bool>;
        #[doc = "Field `TIM14` writer - TIM14 Clock enable"]
        pub type TIM14_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 24>;
        #[doc = "Field `TIM7` reader - TIM7 Clock enable"]
        pub type TIM7_R = crate::BitReader<bool>;
        #[doc = "Field `TIM7` writer - TIM7 Clock enable"]
        pub type TIM7_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 23>;
        #[doc = "Field `TIM6` reader - TIM6 Clock enable"]
        pub type TIM6_R = crate::BitReader<bool>;
        #[doc = "Field `TIM6` writer - TIM6 Clock enable"]
        pub type TIM6_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 22>;
        #[doc = "Field `TIM3` reader - TIM3 Clock enable"]
        pub type TIM3_R = crate::BitReader<bool>;
        #[doc = "Field `TIM3` writer - TIM3 Clock enable"]
        pub type TIM3_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 21>;
        #[doc = "Field `TIM1` reader - TIM1 Clock enable"]
        pub type TIM1_R = crate::BitReader<bool>;
        #[doc = "Field `TIM1` writer - TIM1 Clock enable"]
        pub type TIM1_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 20>;
        #[doc = "Field `UART3` reader - UART3 Clock enable"]
        pub type UART3_R = crate::BitReader<bool>;
        #[doc = "Field `UART3` writer - UART3 Clock enable"]
        pub type UART3_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 19>;
        #[doc = "Field `TIM2` reader - TIM2 Clock enable"]
        pub type TIM2_R = crate::BitReader<bool>;
        #[doc = "Field `TIM2` writer - TIM2 Clock enable"]
        pub type TIM2_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 18>;
        #[doc = "Field `OPA` reader - OPA Clock enable"]
        pub type OPA_R = crate::BitReader<bool>;
        #[doc = "Field `OPA` writer - OPA Clock enable"]
        pub type OPA_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 17>;
        #[doc = "Field `COMP` reader - COMP Clock enable"]
        pub type COMP_R = crate::BitReader<bool>;
        #[doc = "Field `COMP` writer - COMP Clock enable"]
        pub type COMP_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 16>;
        #[doc = "Field `ADC` reader - ADC Clock enable"]
        pub type ADC_R = crate::BitReader<bool>;
        #[doc = "Field `ADC` writer - ADC Clock enable"]
        pub type ADC_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 14>;
        #[doc = "Field `RTC` reader - RTC Clock enable"]
        pub type RTC_R = crate::BitReader<bool>;
        #[doc = "Field `RTC` writer - RTC Clock enable"]
        pub type RTC_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 13>;
        #[doc = "Field `DMAC` reader - DMA Clock enable"]
        pub type DMAC_R = crate::BitReader<bool>;
        #[doc = "Field `DMAC` writer - DMA Clock enable"]
        pub type DMAC_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 12>;
        #[doc = "Field `CRC` reader - CRC Clock enable"]
        pub type CRC_R = crate::BitReader<bool>;
        #[doc = "Field `CRC` writer - CRC Clock enable"]
        pub type CRC_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 11>;
        #[doc = "Field `DAC` reader - DAC Clock enable"]
        pub type DAC_R = crate::BitReader<bool>;
        #[doc = "Field `DAC` writer - DAC Clock enable"]
        pub type DAC_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 10>;
        #[doc = "Field `USB` reader - USB Clock enable"]
        pub type USB_R = crate::BitReader<bool>;
        #[doc = "Field `USB` writer - USB Clock enable"]
        pub type USB_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 9>;
        #[doc = "Field `LUART` reader - LUART Clock enable"]
        pub type LUART_R = crate::BitReader<bool>;
        #[doc = "Field `LUART` writer - LUART Clock enable"]
        pub type LUART_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 8>;
        #[doc = "Field `I2C2` reader - I2C2 Clock enable"]
        pub type I2C2_R = crate::BitReader<bool>;
        #[doc = "Field `I2C2` writer - I2C2 Clock enable"]
        pub type I2C2_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 7>;
        #[doc = "Field `I2C1` reader - I2C1 Clock enable"]
        pub type I2C1_R = crate::BitReader<bool>;
        #[doc = "Field `I2C1` writer - I2C1 Clock enable"]
        pub type I2C1_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 6>;
        #[doc = "Field `SPI2` reader - SPI2 Clock enable"]
        pub type SPI2_R = crate::BitReader<bool>;
        #[doc = "Field `SPI2` writer - SPI2 Clock enable"]
        pub type SPI2_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 5>;
        #[doc = "Field `SPI1` reader - SPI1 Clock enable"]
        pub type SPI1_R = crate::BitReader<bool>;
        #[doc = "Field `SPI1` writer - SPI1 Clock enable"]
        pub type SPI1_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 4>;
        #[doc = "Field `UART2` reader - UART2 Clock enable"]
        pub type UART2_R = crate::BitReader<bool>;
        #[doc = "Field `UART2` writer - UART2 Clock enable"]
        pub type UART2_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 3>;
        #[doc = "Field `UART1` reader - UART1 Clock enable"]
        pub type UART1_R = crate::BitReader<bool>;
        #[doc = "Field `UART1` writer - UART1 Clock enable"]
        pub type UART1_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 2>;
        #[doc = "Field `CAN2` reader - CAN2 Clock enable"]
        pub type CAN2_R = crate::BitReader<bool>;
        #[doc = "Field `CAN2` writer - CAN2 Clock enable"]
        pub type CAN2_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 1>;
        #[doc = "Field `I2S1` reader - I2S1 Clock enable"]
        pub type I2S1_R = crate::BitReader<bool>;
        #[doc = "Field `I2S1` writer - I2S1 Clock enable"]
        pub type I2S1_W<'a> = crate::BitWriter<'a, u32, IPCKENR1_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 31 - CAN1 Clock enable"]
            #[inline(always)]
            pub fn can1(&self) -> CAN1_R {
                CAN1_R::new(((self.bits >> 31) & 1) != 0)
            }
            #[doc = "Bit 30 - ROM Clock enable"]
            #[inline(always)]
            pub fn rom(&self) -> ROM_R {
                ROM_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 29 - HRNG Clock enable"]
            #[inline(always)]
            pub fn hrng(&self) -> HRNG_R {
                HRNG_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 28 - AES Clock enable"]
            #[inline(always)]
            pub fn aes(&self) -> AES_R {
                AES_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 27 - TIM17 Clock enable"]
            #[inline(always)]
            pub fn tim17(&self) -> TIM17_R {
                TIM17_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 26 - TIM16 Clock enable"]
            #[inline(always)]
            pub fn tim16(&self) -> TIM16_R {
                TIM16_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 25 - TIM15 Clock enable"]
            #[inline(always)]
            pub fn tim15(&self) -> TIM15_R {
                TIM15_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 24 - TIM14 Clock enable"]
            #[inline(always)]
            pub fn tim14(&self) -> TIM14_R {
                TIM14_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 23 - TIM7 Clock enable"]
            #[inline(always)]
            pub fn tim7(&self) -> TIM7_R {
                TIM7_R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 22 - TIM6 Clock enable"]
            #[inline(always)]
            pub fn tim6(&self) -> TIM6_R {
                TIM6_R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 21 - TIM3 Clock enable"]
            #[inline(always)]
            pub fn tim3(&self) -> TIM3_R {
                TIM3_R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 20 - TIM1 Clock enable"]
            #[inline(always)]
            pub fn tim1(&self) -> TIM1_R {
                TIM1_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 19 - UART3 Clock enable"]
            #[inline(always)]
            pub fn uart3(&self) -> UART3_R {
                UART3_R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 18 - TIM2 Clock enable"]
            #[inline(always)]
            pub fn tim2(&self) -> TIM2_R {
                TIM2_R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 17 - OPA Clock enable"]
            #[inline(always)]
            pub fn opa(&self) -> OPA_R {
                OPA_R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 16 - COMP Clock enable"]
            #[inline(always)]
            pub fn comp(&self) -> COMP_R {
                COMP_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 14 - ADC Clock enable"]
            #[inline(always)]
            pub fn adc(&self) -> ADC_R {
                ADC_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 13 - RTC Clock enable"]
            #[inline(always)]
            pub fn rtc(&self) -> RTC_R {
                RTC_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - DMA Clock enable"]
            #[inline(always)]
            pub fn dmac(&self) -> DMAC_R {
                DMAC_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - CRC Clock enable"]
            #[inline(always)]
            pub fn crc(&self) -> CRC_R {
                CRC_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - DAC Clock enable"]
            #[inline(always)]
            pub fn dac(&self) -> DAC_R {
                DAC_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - USB Clock enable"]
            #[inline(always)]
            pub fn usb(&self) -> USB_R {
                USB_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - LUART Clock enable"]
            #[inline(always)]
            pub fn luart(&self) -> LUART_R {
                LUART_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 7 - I2C2 Clock enable"]
            #[inline(always)]
            pub fn i2c2(&self) -> I2C2_R {
                I2C2_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 6 - I2C1 Clock enable"]
            #[inline(always)]
            pub fn i2c1(&self) -> I2C1_R {
                I2C1_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - SPI2 Clock enable"]
            #[inline(always)]
            pub fn spi2(&self) -> SPI2_R {
                SPI2_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - SPI1 Clock enable"]
            #[inline(always)]
            pub fn spi1(&self) -> SPI1_R {
                SPI1_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 3 - UART2 Clock enable"]
            #[inline(always)]
            pub fn uart2(&self) -> UART2_R {
                UART2_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2 - UART1 Clock enable"]
            #[inline(always)]
            pub fn uart1(&self) -> UART1_R {
                UART1_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - CAN2 Clock enable"]
            #[inline(always)]
            pub fn can2(&self) -> CAN2_R {
                CAN2_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - I2S1 Clock enable"]
            #[inline(always)]
            pub fn i2s1(&self) -> I2S1_R {
                I2S1_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - CAN1 Clock enable"]
            #[inline(always)]
            pub fn can1(&mut self) -> CAN1_W {
                CAN1_W::new(self)
            }
            #[doc = "Bit 30 - ROM Clock enable"]
            #[inline(always)]
            pub fn rom(&mut self) -> ROM_W {
                ROM_W::new(self)
            }
            #[doc = "Bit 29 - HRNG Clock enable"]
            #[inline(always)]
            pub fn hrng(&mut self) -> HRNG_W {
                HRNG_W::new(self)
            }
            #[doc = "Bit 28 - AES Clock enable"]
            #[inline(always)]
            pub fn aes(&mut self) -> AES_W {
                AES_W::new(self)
            }
            #[doc = "Bit 27 - TIM17 Clock enable"]
            #[inline(always)]
            pub fn tim17(&mut self) -> TIM17_W {
                TIM17_W::new(self)
            }
            #[doc = "Bit 26 - TIM16 Clock enable"]
            #[inline(always)]
            pub fn tim16(&mut self) -> TIM16_W {
                TIM16_W::new(self)
            }
            #[doc = "Bit 25 - TIM15 Clock enable"]
            #[inline(always)]
            pub fn tim15(&mut self) -> TIM15_W {
                TIM15_W::new(self)
            }
            #[doc = "Bit 24 - TIM14 Clock enable"]
            #[inline(always)]
            pub fn tim14(&mut self) -> TIM14_W {
                TIM14_W::new(self)
            }
            #[doc = "Bit 23 - TIM7 Clock enable"]
            #[inline(always)]
            pub fn tim7(&mut self) -> TIM7_W {
                TIM7_W::new(self)
            }
            #[doc = "Bit 22 - TIM6 Clock enable"]
            #[inline(always)]
            pub fn tim6(&mut self) -> TIM6_W {
                TIM6_W::new(self)
            }
            #[doc = "Bit 21 - TIM3 Clock enable"]
            #[inline(always)]
            pub fn tim3(&mut self) -> TIM3_W {
                TIM3_W::new(self)
            }
            #[doc = "Bit 20 - TIM1 Clock enable"]
            #[inline(always)]
            pub fn tim1(&mut self) -> TIM1_W {
                TIM1_W::new(self)
            }
            #[doc = "Bit 19 - UART3 Clock enable"]
            #[inline(always)]
            pub fn uart3(&mut self) -> UART3_W {
                UART3_W::new(self)
            }
            #[doc = "Bit 18 - TIM2 Clock enable"]
            #[inline(always)]
            pub fn tim2(&mut self) -> TIM2_W {
                TIM2_W::new(self)
            }
            #[doc = "Bit 17 - OPA Clock enable"]
            #[inline(always)]
            pub fn opa(&mut self) -> OPA_W {
                OPA_W::new(self)
            }
            #[doc = "Bit 16 - COMP Clock enable"]
            #[inline(always)]
            pub fn comp(&mut self) -> COMP_W {
                COMP_W::new(self)
            }
            #[doc = "Bit 14 - ADC Clock enable"]
            #[inline(always)]
            pub fn adc(&mut self) -> ADC_W {
                ADC_W::new(self)
            }
            #[doc = "Bit 13 - RTC Clock enable"]
            #[inline(always)]
            pub fn rtc(&mut self) -> RTC_W {
                RTC_W::new(self)
            }
            #[doc = "Bit 12 - DMA Clock enable"]
            #[inline(always)]
            pub fn dmac(&mut self) -> DMAC_W {
                DMAC_W::new(self)
            }
            #[doc = "Bit 11 - CRC Clock enable"]
            #[inline(always)]
            pub fn crc(&mut self) -> CRC_W {
                CRC_W::new(self)
            }
            #[doc = "Bit 10 - DAC Clock enable"]
            #[inline(always)]
            pub fn dac(&mut self) -> DAC_W {
                DAC_W::new(self)
            }
            #[doc = "Bit 9 - USB Clock enable"]
            #[inline(always)]
            pub fn usb(&mut self) -> USB_W {
                USB_W::new(self)
            }
            #[doc = "Bit 8 - LUART Clock enable"]
            #[inline(always)]
            pub fn luart(&mut self) -> LUART_W {
                LUART_W::new(self)
            }
            #[doc = "Bit 7 - I2C2 Clock enable"]
            #[inline(always)]
            pub fn i2c2(&mut self) -> I2C2_W {
                I2C2_W::new(self)
            }
            #[doc = "Bit 6 - I2C1 Clock enable"]
            #[inline(always)]
            pub fn i2c1(&mut self) -> I2C1_W {
                I2C1_W::new(self)
            }
            #[doc = "Bit 5 - SPI2 Clock enable"]
            #[inline(always)]
            pub fn spi2(&mut self) -> SPI2_W {
                SPI2_W::new(self)
            }
            #[doc = "Bit 4 - SPI1 Clock enable"]
            #[inline(always)]
            pub fn spi1(&mut self) -> SPI1_W {
                SPI1_W::new(self)
            }
            #[doc = "Bit 3 - UART2 Clock enable"]
            #[inline(always)]
            pub fn uart2(&mut self) -> UART2_W {
                UART2_W::new(self)
            }
            #[doc = "Bit 2 - UART1 Clock enable"]
            #[inline(always)]
            pub fn uart1(&mut self) -> UART1_W {
                UART1_W::new(self)
            }
            #[doc = "Bit 1 - CAN2 Clock enable"]
            #[inline(always)]
            pub fn can2(&mut self) -> CAN2_W {
                CAN2_W::new(self)
            }
            #[doc = "Bit 0 - I2S1 Clock enable"]
            #[inline(always)]
            pub fn i2s1(&mut self) -> I2S1_W {
                I2S1_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Peripheral enable control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ipckenr1](index.html) module"]
        pub struct IPCKENR1_SPEC;
        impl crate::RegisterSpec for IPCKENR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ipckenr1::R](R) reader structure"]
        impl crate::Readable for IPCKENR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ipckenr1::W](W) writer structure"]
        impl crate::Writable for IPCKENR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IPCKENR1 to value 0"]
        impl crate::Resettable for IPCKENR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IPCKENR2 register accessor: an alias for `Reg<IPCKENR2_SPEC>`"]
    pub type IPCKENR2 = crate::Reg<ipckenr2::IPCKENR2_SPEC>;
    #[doc = "Peripheral reset control register 2"]
    pub mod ipckenr2 {
        #[doc = "Register `IPCKENR2` reader"]
        pub struct R(crate::R<IPCKENR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IPCKENR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IPCKENR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IPCKENR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IPCKENR2` writer"]
        pub struct W(crate::W<IPCKENR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IPCKENR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IPCKENR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IPCKENR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SPI4` reader - SPI4 Clock enable"]
        pub type SPI4_R = crate::BitReader<bool>;
        #[doc = "Field `SPI4` writer - SPI4 Clock enable"]
        pub type SPI4_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 13>;
        #[doc = "Field `GPIO3` reader - GPIO3(PE/PF) Clock enable"]
        pub type GPIO3_R = crate::BitReader<bool>;
        #[doc = "Field `GPIO3` writer - GPIO3(PE/PF) Clock enable"]
        pub type GPIO3_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 12>;
        #[doc = "Field `SPI3` reader - SPI3 Clock enable"]
        pub type SPI3_R = crate::BitReader<bool>;
        #[doc = "Field `SPI3` writer - SPI3 Clock enable"]
        pub type SPI3_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 11>;
        #[doc = "Field `UART4` reader - UART4 Clock enable"]
        pub type UART4_R = crate::BitReader<bool>;
        #[doc = "Field `UART4` writer - UART4 Clock enable"]
        pub type UART4_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 10>;
        #[doc = "Field `TIM4` reader - TIM4 Clock enable"]
        pub type TIM4_R = crate::BitReader<bool>;
        #[doc = "Field `TIM4` writer - TIM4 Clock enable"]
        pub type TIM4_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 9>;
        #[doc = "Field `FAU` reader - FAU Clock enable"]
        pub type FAU_R = crate::BitReader<bool>;
        #[doc = "Field `FAU` writer - FAU Clock enable"]
        pub type FAU_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 8>;
        #[doc = "Field `EFC` reader - EFLASH in sleep mode Clock enable"]
        pub type EFC_R = crate::BitReader<bool>;
        #[doc = "Field `EFC` writer - EFLASH in sleep mode Clock enable"]
        pub type EFC_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 6>;
        #[doc = "Field `SRAM` reader - SRAM in sleep mode Clock enable"]
        pub type SRAM_R = crate::BitReader<bool>;
        #[doc = "Field `SRAM` writer - SRAM in sleep mode Clock enable"]
        pub type SRAM_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 5>;
        #[doc = "Field `EXTI` reader - EXTI Clock enable"]
        pub type EXTI_R = crate::BitReader<bool>;
        #[doc = "Field `EXTI` writer - EXTI Clock enable"]
        pub type EXTI_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 4>;
        #[doc = "Field `WDT` reader - WatchDog Clock enable"]
        pub type WDT_R = crate::BitReader<bool>;
        #[doc = "Field `WDT` writer - WatchDog Clock enable"]
        pub type WDT_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 2>;
        #[doc = "Field `GPIO2` reader - GPIO2(PC/PD) Clock enable"]
        pub type GPIO2_R = crate::BitReader<bool>;
        #[doc = "Field `GPIO2` writer - GPIO2(PC/PD) Clock enable"]
        pub type GPIO2_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 1>;
        #[doc = "Field `GPIO1` reader - GPIO1(PA/PB) Clock enable"]
        pub type GPIO1_R = crate::BitReader<bool>;
        #[doc = "Field `GPIO1` writer - GPIO1(PA/PB) Clock enable"]
        pub type GPIO1_W<'a> = crate::BitWriter<'a, u32, IPCKENR2_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 13 - SPI4 Clock enable"]
            #[inline(always)]
            pub fn spi4(&self) -> SPI4_R {
                SPI4_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 12 - GPIO3(PE/PF) Clock enable"]
            #[inline(always)]
            pub fn gpio3(&self) -> GPIO3_R {
                GPIO3_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 11 - SPI3 Clock enable"]
            #[inline(always)]
            pub fn spi3(&self) -> SPI3_R {
                SPI3_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 10 - UART4 Clock enable"]
            #[inline(always)]
            pub fn uart4(&self) -> UART4_R {
                UART4_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 9 - TIM4 Clock enable"]
            #[inline(always)]
            pub fn tim4(&self) -> TIM4_R {
                TIM4_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 8 - FAU Clock enable"]
            #[inline(always)]
            pub fn fau(&self) -> FAU_R {
                FAU_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 6 - EFLASH in sleep mode Clock enable"]
            #[inline(always)]
            pub fn efc(&self) -> EFC_R {
                EFC_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 5 - SRAM in sleep mode Clock enable"]
            #[inline(always)]
            pub fn sram(&self) -> SRAM_R {
                SRAM_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 4 - EXTI Clock enable"]
            #[inline(always)]
            pub fn exti(&self) -> EXTI_R {
                EXTI_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 2 - WatchDog Clock enable"]
            #[inline(always)]
            pub fn wdt(&self) -> WDT_R {
                WDT_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1 - GPIO2(PC/PD) Clock enable"]
            #[inline(always)]
            pub fn gpio2(&self) -> GPIO2_R {
                GPIO2_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0 - GPIO1(PA/PB) Clock enable"]
            #[inline(always)]
            pub fn gpio1(&self) -> GPIO1_R {
                GPIO1_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - SPI4 Clock enable"]
            #[inline(always)]
            pub fn spi4(&mut self) -> SPI4_W {
                SPI4_W::new(self)
            }
            #[doc = "Bit 12 - GPIO3(PE/PF) Clock enable"]
            #[inline(always)]
            pub fn gpio3(&mut self) -> GPIO3_W {
                GPIO3_W::new(self)
            }
            #[doc = "Bit 11 - SPI3 Clock enable"]
            #[inline(always)]
            pub fn spi3(&mut self) -> SPI3_W {
                SPI3_W::new(self)
            }
            #[doc = "Bit 10 - UART4 Clock enable"]
            #[inline(always)]
            pub fn uart4(&mut self) -> UART4_W {
                UART4_W::new(self)
            }
            #[doc = "Bit 9 - TIM4 Clock enable"]
            #[inline(always)]
            pub fn tim4(&mut self) -> TIM4_W {
                TIM4_W::new(self)
            }
            #[doc = "Bit 8 - FAU Clock enable"]
            #[inline(always)]
            pub fn fau(&mut self) -> FAU_W {
                FAU_W::new(self)
            }
            #[doc = "Bit 6 - EFLASH in sleep mode Clock enable"]
            #[inline(always)]
            pub fn efc(&mut self) -> EFC_W {
                EFC_W::new(self)
            }
            #[doc = "Bit 5 - SRAM in sleep mode Clock enable"]
            #[inline(always)]
            pub fn sram(&mut self) -> SRAM_W {
                SRAM_W::new(self)
            }
            #[doc = "Bit 4 - EXTI Clock enable"]
            #[inline(always)]
            pub fn exti(&mut self) -> EXTI_W {
                EXTI_W::new(self)
            }
            #[doc = "Bit 2 - WatchDog Clock enable"]
            #[inline(always)]
            pub fn wdt(&mut self) -> WDT_W {
                WDT_W::new(self)
            }
            #[doc = "Bit 1 - GPIO2(PC/PD) Clock enable"]
            #[inline(always)]
            pub fn gpio2(&mut self) -> GPIO2_W {
                GPIO2_W::new(self)
            }
            #[doc = "Bit 0 - GPIO1(PA/PB) Clock enable"]
            #[inline(always)]
            pub fn gpio1(&mut self) -> GPIO1_W {
                GPIO1_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Peripheral reset control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ipckenr2](index.html) module"]
        pub struct IPCKENR2_SPEC;
        impl crate::RegisterSpec for IPCKENR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ipckenr2::R](R) reader structure"]
        impl crate::Readable for IPCKENR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ipckenr2::W](W) writer structure"]
        impl crate::Writable for IPCKENR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IPCKENR2 to value 0"]
        impl crate::Resettable for IPCKENR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RCHCR register accessor: an alias for `Reg<RCHCR_SPEC>`"]
    pub type RCHCR = crate::Reg<rchcr::RCHCR_SPEC>;
    #[doc = "RCH control register"]
    pub mod rchcr {
        #[doc = "Register `RCHCR` reader"]
        pub struct R(crate::R<RCHCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RCHCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RCHCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RCHCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RCHCR` writer"]
        pub struct W(crate::W<RCHCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RCHCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RCHCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RCHCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "RCH control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rchcr](index.html) module"]
        pub struct RCHCR_SPEC;
        impl crate::RegisterSpec for RCHCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rchcr::R](R) reader structure"]
        impl crate::Readable for RCHCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rchcr::W](W) writer structure"]
        impl crate::Writable for RCHCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RCHCR to value 0"]
        impl crate::Resettable for RCHCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "XTHCR register accessor: an alias for `Reg<XTHCR_SPEC>`"]
    pub type XTHCR = crate::Reg<xthcr::XTHCR_SPEC>;
    #[doc = "XTH control register"]
    pub mod xthcr {
        #[doc = "Register `XTHCR` reader"]
        pub struct R(crate::R<XTHCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<XTHCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<XTHCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<XTHCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `XTHCR` writer"]
        pub struct W(crate::W<XTHCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<XTHCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<XTHCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<XTHCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "XTH control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [xthcr](index.html) module"]
        pub struct XTHCR_SPEC;
        impl crate::RegisterSpec for XTHCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [xthcr::R](R) reader structure"]
        impl crate::Readable for XTHCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [xthcr::W](W) writer structure"]
        impl crate::Writable for XTHCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets XTHCR to value 0"]
        impl crate::Resettable for XTHCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PLLCR register accessor: an alias for `Reg<PLLCR_SPEC>`"]
    pub type PLLCR = crate::Reg<pllcr::PLLCR_SPEC>;
    #[doc = "PLL control register"]
    pub mod pllcr {
        #[doc = "Register `PLLCR` reader"]
        pub struct R(crate::R<PLLCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PLLCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PLLCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PLLCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PLLCR` writer"]
        pub struct W(crate::W<PLLCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PLLCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PLLCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PLLCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "PLL control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pllcr](index.html) module"]
        pub struct PLLCR_SPEC;
        impl crate::RegisterSpec for PLLCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pllcr::R](R) reader structure"]
        impl crate::Readable for PLLCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pllcr::W](W) writer structure"]
        impl crate::Writable for PLLCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PLLCR to value 0"]
        impl crate::Resettable for PLLCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LDOCR register accessor: an alias for `Reg<LDOCR_SPEC>`"]
    pub type LDOCR = crate::Reg<ldocr::LDOCR_SPEC>;
    #[doc = "LDO control register"]
    pub mod ldocr {
        #[doc = "Register `LDOCR` reader"]
        pub struct R(crate::R<LDOCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LDOCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LDOCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LDOCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LDOCR` writer"]
        pub struct W(crate::W<LDOCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LDOCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LDOCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LDOCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LDO control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ldocr](index.html) module"]
        pub struct LDOCR_SPEC;
        impl crate::RegisterSpec for LDOCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ldocr::R](R) reader structure"]
        impl crate::Readable for LDOCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ldocr::W](W) writer structure"]
        impl crate::Writable for LDOCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LDOCR to value 0"]
        impl crate::Resettable for LDOCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "WMR register accessor: an alias for `Reg<WMR_SPEC>`"]
    pub type WMR = crate::Reg<wmr::WMR_SPEC>;
    #[doc = "Work mode register"]
    pub mod wmr {
        #[doc = "Register `WMR` reader"]
        pub struct R(crate::R<WMR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WMR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WMR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WMR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Work mode register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wmr](index.html) module"]
        pub struct WMR_SPEC;
        impl crate::RegisterSpec for WMR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [wmr::R](R) reader structure"]
        impl crate::Readable for WMR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets WMR to value 0"]
        impl crate::Resettable for WMR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CLKOCR register accessor: an alias for `Reg<CLKOCR_SPEC>`"]
    pub type CLKOCR = crate::Reg<clkocr::CLKOCR_SPEC>;
    #[doc = "Clock output control register"]
    pub mod clkocr {
        #[doc = "Register `CLKOCR` reader"]
        pub struct R(crate::R<CLKOCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLKOCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLKOCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLKOCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CLKOCR` writer"]
        pub struct W(crate::W<CLKOCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CLKOCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CLKOCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CLKOCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock output control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clkocr](index.html) module"]
        pub struct CLKOCR_SPEC;
        impl crate::RegisterSpec for CLKOCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clkocr::R](R) reader structure"]
        impl crate::Readable for CLKOCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [clkocr::W](W) writer structure"]
        impl crate::Writable for CLKOCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CLKOCR to value 0"]
        impl crate::Resettable for CLKOCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "VER register accessor: an alias for `Reg<VER_SPEC>`"]
    pub type VER = crate::Reg<ver::VER_SPEC>;
    #[doc = "Version register"]
    pub mod ver {
        #[doc = "Register `VER` reader"]
        pub struct R(crate::R<VER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<VER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<VER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<VER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Version register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ver](index.html) module"]
        pub struct VER_SPEC;
        impl crate::RegisterSpec for VER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ver::R](R) reader structure"]
        impl crate::Readable for VER_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets VER to value 0"]
        impl crate::Resettable for VER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SYSCFG1 register accessor: an alias for `Reg<SYSCFG1_SPEC>`"]
    pub type SYSCFG1 = crate::Reg<syscfg1::SYSCFG1_SPEC>;
    #[doc = "System config register 1"]
    pub mod syscfg1 {
        #[doc = "Register `SYSCFG1` reader"]
        pub struct R(crate::R<SYSCFG1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SYSCFG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SYSCFG1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SYSCFG1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SYSCFG1` writer"]
        pub struct W(crate::W<SYSCFG1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SYSCFG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SYSCFG1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SYSCFG1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "System config register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [syscfg1](index.html) module"]
        pub struct SYSCFG1_SPEC;
        impl crate::RegisterSpec for SYSCFG1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [syscfg1::R](R) reader structure"]
        impl crate::Readable for SYSCFG1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [syscfg1::W](W) writer structure"]
        impl crate::Writable for SYSCFG1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SYSCFG1 to value 0"]
        impl crate::Resettable for SYSCFG1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LVDCFG register accessor: an alias for `Reg<LVDCFG_SPEC>`"]
    pub type LVDCFG = crate::Reg<lvdcfg::LVDCFG_SPEC>;
    #[doc = "LVD config register"]
    pub mod lvdcfg {
        #[doc = "Register `LVDCFG` reader"]
        pub struct R(crate::R<LVDCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LVDCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LVDCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LVDCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LVDCFG` writer"]
        pub struct W(crate::W<LVDCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LVDCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LVDCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LVDCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LVD config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lvdcfg](index.html) module"]
        pub struct LVDCFG_SPEC;
        impl crate::RegisterSpec for LVDCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lvdcfg::R](R) reader structure"]
        impl crate::Readable for LVDCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lvdcfg::W](W) writer structure"]
        impl crate::Writable for LVDCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LVDCFG to value 0"]
        impl crate::Resettable for LVDCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STOPCFG register accessor: an alias for `Reg<STOPCFG_SPEC>`"]
    pub type STOPCFG = crate::Reg<stopcfg::STOPCFG_SPEC>;
    #[doc = "STOP mode config register"]
    pub mod stopcfg {
        #[doc = "Register `STOPCFG` reader"]
        pub struct R(crate::R<STOPCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STOPCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STOPCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STOPCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STOPCFG` writer"]
        pub struct W(crate::W<STOPCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STOPCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STOPCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STOPCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "STOP mode config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stopcfg](index.html) module"]
        pub struct STOPCFG_SPEC;
        impl crate::RegisterSpec for STOPCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [stopcfg::R](R) reader structure"]
        impl crate::Readable for STOPCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [stopcfg::W](W) writer structure"]
        impl crate::Writable for STOPCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STOPCFG to value 0"]
        impl crate::Resettable for STOPCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PHYCFG register accessor: an alias for `Reg<PHYCFG_SPEC>`"]
    pub type PHYCFG = crate::Reg<phycfg::PHYCFG_SPEC>;
    #[doc = "USBPHY control register"]
    pub mod phycfg {
        #[doc = "Register `PHYCFG` reader"]
        pub struct R(crate::R<PHYCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PHYCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PHYCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PHYCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PHYCFG` writer"]
        pub struct W(crate::W<PHYCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PHYCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PHYCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PHYCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USBPHY control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [phycfg](index.html) module"]
        pub struct PHYCFG_SPEC;
        impl crate::RegisterSpec for PHYCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [phycfg::R](R) reader structure"]
        impl crate::Readable for PHYCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [phycfg::W](W) writer structure"]
        impl crate::Writable for PHYCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PHYCFG to value 0"]
        impl crate::Resettable for PHYCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MEMCFG register accessor: an alias for `Reg<MEMCFG_SPEC>`"]
    pub type MEMCFG = crate::Reg<memcfg::MEMCFG_SPEC>;
    #[doc = "Memory config register"]
    pub mod memcfg {
        #[doc = "Register `MEMCFG` reader"]
        pub struct R(crate::R<MEMCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MEMCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MEMCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MEMCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MEMCFG` writer"]
        pub struct W(crate::W<MEMCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MEMCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MEMCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MEMCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Memory config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [memcfg](index.html) module"]
        pub struct MEMCFG_SPEC;
        impl crate::RegisterSpec for MEMCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [memcfg::R](R) reader structure"]
        impl crate::Readable for MEMCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [memcfg::W](W) writer structure"]
        impl crate::Writable for MEMCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MEMCFG to value 0"]
        impl crate::Resettable for MEMCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DUMMY register accessor: an alias for `Reg<DUMMY_SPEC>`"]
    pub type DUMMY = crate::Reg<dummy::DUMMY_SPEC>;
    #[doc = "Dummy register"]
    pub mod dummy {
        #[doc = "Register `DUMMY` reader"]
        pub struct R(crate::R<DUMMY_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DUMMY_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DUMMY_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DUMMY_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DUMMY` writer"]
        pub struct W(crate::W<DUMMY_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DUMMY_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DUMMY_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DUMMY_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Dummy register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dummy](index.html) module"]
        pub struct DUMMY_SPEC;
        impl crate::RegisterSpec for DUMMY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dummy::R](R) reader structure"]
        impl crate::Readable for DUMMY_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dummy::W](W) writer structure"]
        impl crate::Writable for DUMMY_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DUMMY to value 0"]
        impl crate::Resettable for DUMMY_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PASEL1 register accessor: an alias for `Reg<PASEL1_SPEC>`"]
    pub type PASEL1 = crate::Reg<pasel1::PASEL1_SPEC>;
    #[doc = "GPIOA function selection register 1"]
    pub mod pasel1 {
        #[doc = "Register `PASEL1` reader"]
        pub struct R(crate::R<PASEL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PASEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PASEL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PASEL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PASEL1` writer"]
        pub struct W(crate::W<PASEL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PASEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PASEL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PASEL1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOA function selection register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pasel1](index.html) module"]
        pub struct PASEL1_SPEC;
        impl crate::RegisterSpec for PASEL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pasel1::R](R) reader structure"]
        impl crate::Readable for PASEL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pasel1::W](W) writer structure"]
        impl crate::Writable for PASEL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PASEL1 to value 0"]
        impl crate::Resettable for PASEL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PASEL2 register accessor: an alias for `Reg<PASEL2_SPEC>`"]
    pub type PASEL2 = crate::Reg<pasel2::PASEL2_SPEC>;
    #[doc = "GPIOA function selection register 2"]
    pub mod pasel2 {
        #[doc = "Register `PASEL2` reader"]
        pub struct R(crate::R<PASEL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PASEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PASEL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PASEL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PASEL2` writer"]
        pub struct W(crate::W<PASEL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PASEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PASEL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PASEL2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOA function selection register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pasel2](index.html) module"]
        pub struct PASEL2_SPEC;
        impl crate::RegisterSpec for PASEL2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pasel2::R](R) reader structure"]
        impl crate::Readable for PASEL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pasel2::W](W) writer structure"]
        impl crate::Writable for PASEL2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PASEL2 to value 0"]
        impl crate::Resettable for PASEL2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PBSEL1 register accessor: an alias for `Reg<PBSEL1_SPEC>`"]
    pub type PBSEL1 = crate::Reg<pbsel1::PBSEL1_SPEC>;
    #[doc = "GPIOB function selection register 1"]
    pub mod pbsel1 {
        #[doc = "Register `PBSEL1` reader"]
        pub struct R(crate::R<PBSEL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PBSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PBSEL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PBSEL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PBSEL1` writer"]
        pub struct W(crate::W<PBSEL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PBSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PBSEL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PBSEL1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOB function selection register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pbsel1](index.html) module"]
        pub struct PBSEL1_SPEC;
        impl crate::RegisterSpec for PBSEL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pbsel1::R](R) reader structure"]
        impl crate::Readable for PBSEL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pbsel1::W](W) writer structure"]
        impl crate::Writable for PBSEL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PBSEL1 to value 0"]
        impl crate::Resettable for PBSEL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PBSEL2 register accessor: an alias for `Reg<PBSEL2_SPEC>`"]
    pub type PBSEL2 = crate::Reg<pbsel2::PBSEL2_SPEC>;
    #[doc = "GPIOB function selection register 2"]
    pub mod pbsel2 {
        #[doc = "Register `PBSEL2` reader"]
        pub struct R(crate::R<PBSEL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PBSEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PBSEL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PBSEL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PBSEL2` writer"]
        pub struct W(crate::W<PBSEL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PBSEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PBSEL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PBSEL2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOB function selection register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pbsel2](index.html) module"]
        pub struct PBSEL2_SPEC;
        impl crate::RegisterSpec for PBSEL2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pbsel2::R](R) reader structure"]
        impl crate::Readable for PBSEL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pbsel2::W](W) writer structure"]
        impl crate::Writable for PBSEL2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PBSEL2 to value 0"]
        impl crate::Resettable for PBSEL2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PABPUR register accessor: an alias for `Reg<PABPUR_SPEC>`"]
    pub type PABPUR = crate::Reg<pabpur::PABPUR_SPEC>;
    #[doc = "GPIOA GPIOB pull up config register"]
    pub mod pabpur {
        #[doc = "Register `PABPUR` reader"]
        pub struct R(crate::R<PABPUR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PABPUR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PABPUR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PABPUR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PABPUR` writer"]
        pub struct W(crate::W<PABPUR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PABPUR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PABPUR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PABPUR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOA GPIOB pull up config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pabpur](index.html) module"]
        pub struct PABPUR_SPEC;
        impl crate::RegisterSpec for PABPUR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pabpur::R](R) reader structure"]
        impl crate::Readable for PABPUR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pabpur::W](W) writer structure"]
        impl crate::Writable for PABPUR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PABPUR to value 0"]
        impl crate::Resettable for PABPUR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PABPDR register accessor: an alias for `Reg<PABPDR_SPEC>`"]
    pub type PABPDR = crate::Reg<pabpdr::PABPDR_SPEC>;
    #[doc = "GPIOA GPIOB pull down config register"]
    pub mod pabpdr {
        #[doc = "Register `PABPDR` reader"]
        pub struct R(crate::R<PABPDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PABPDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PABPDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PABPDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PABPDR` writer"]
        pub struct W(crate::W<PABPDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PABPDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PABPDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PABPDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOA GPIOB pull down config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pabpdr](index.html) module"]
        pub struct PABPDR_SPEC;
        impl crate::RegisterSpec for PABPDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pabpdr::R](R) reader structure"]
        impl crate::Readable for PABPDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pabpdr::W](W) writer structure"]
        impl crate::Writable for PABPDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PABPDR to value 0"]
        impl crate::Resettable for PABPDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PASTR register accessor: an alias for `Reg<PASTR_SPEC>`"]
    pub type PASTR = crate::Reg<pastr::PASTR_SPEC>;
    #[doc = "GPIOA output drive selection register"]
    pub mod pastr {
        #[doc = "Register `PASTR` reader"]
        pub struct R(crate::R<PASTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PASTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PASTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PASTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PASTR` writer"]
        pub struct W(crate::W<PASTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PASTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PASTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PASTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOA output drive selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pastr](index.html) module"]
        pub struct PASTR_SPEC;
        impl crate::RegisterSpec for PASTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pastr::R](R) reader structure"]
        impl crate::Readable for PASTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pastr::W](W) writer structure"]
        impl crate::Writable for PASTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PASTR to value 0"]
        impl crate::Resettable for PASTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PBSTR register accessor: an alias for `Reg<PBSTR_SPEC>`"]
    pub type PBSTR = crate::Reg<pbstr::PBSTR_SPEC>;
    #[doc = "GPIOB output drive selection register"]
    pub mod pbstr {
        #[doc = "Register `PBSTR` reader"]
        pub struct R(crate::R<PBSTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PBSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PBSTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PBSTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PBSTR` writer"]
        pub struct W(crate::W<PBSTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PBSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PBSTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PBSTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOB output drive selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pbstr](index.html) module"]
        pub struct PBSTR_SPEC;
        impl crate::RegisterSpec for PBSTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pbstr::R](R) reader structure"]
        impl crate::Readable for PBSTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pbstr::W](W) writer structure"]
        impl crate::Writable for PBSTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PBSTR to value 0"]
        impl crate::Resettable for PBSTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PABSMTR register accessor: an alias for `Reg<PABSMTR_SPEC>`"]
    pub type PABSMTR = crate::Reg<pabsmtr::PABSMTR_SPEC>;
    #[doc = "GPIOA GPIOB SMT enable register"]
    pub mod pabsmtr {
        #[doc = "Register `PABSMTR` reader"]
        pub struct R(crate::R<PABSMTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PABSMTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PABSMTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PABSMTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PABSMTR` writer"]
        pub struct W(crate::W<PABSMTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PABSMTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PABSMTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PABSMTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOA GPIOB SMT enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pabsmtr](index.html) module"]
        pub struct PABSMTR_SPEC;
        impl crate::RegisterSpec for PABSMTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pabsmtr::R](R) reader structure"]
        impl crate::Readable for PABSMTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pabsmtr::W](W) writer structure"]
        impl crate::Writable for PABSMTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PABSMTR to value 0"]
        impl crate::Resettable for PABSMTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PABODR register accessor: an alias for `Reg<PABODR_SPEC>`"]
    pub type PABODR = crate::Reg<pabodr::PABODR_SPEC>;
    #[doc = "GPIOA GPIOB open drain enable register"]
    pub mod pabodr {
        #[doc = "Register `PABODR` reader"]
        pub struct R(crate::R<PABODR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PABODR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PABODR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PABODR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PABODR` writer"]
        pub struct W(crate::W<PABODR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PABODR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PABODR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PABODR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOA GPIOB open drain enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pabodr](index.html) module"]
        pub struct PABODR_SPEC;
        impl crate::RegisterSpec for PABODR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pabodr::R](R) reader structure"]
        impl crate::Readable for PABODR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pabodr::W](W) writer structure"]
        impl crate::Writable for PABODR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PABODR to value 0"]
        impl crate::Resettable for PABODR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PABADS register accessor: an alias for `Reg<PABADS_SPEC>`"]
    pub type PABADS = crate::Reg<pabads::PABADS_SPEC>;
    #[doc = "GPIOA GPIOB digtal analog selection register"]
    pub mod pabads {
        #[doc = "Register `PABADS` reader"]
        pub struct R(crate::R<PABADS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PABADS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PABADS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PABADS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PABADS` writer"]
        pub struct W(crate::W<PABADS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PABADS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PABADS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PABADS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOA GPIOB digtal analog selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pabads](index.html) module"]
        pub struct PABADS_SPEC;
        impl crate::RegisterSpec for PABADS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pabads::R](R) reader structure"]
        impl crate::Readable for PABADS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pabads::W](W) writer structure"]
        impl crate::Writable for PABADS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PABADS to value 0"]
        impl crate::Resettable for PABADS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCSEL1 register accessor: an alias for `Reg<PCSEL1_SPEC>`"]
    pub type PCSEL1 = crate::Reg<pcsel1::PCSEL1_SPEC>;
    #[doc = "GPIOC function selection register 1"]
    pub mod pcsel1 {
        #[doc = "Register `PCSEL1` reader"]
        pub struct R(crate::R<PCSEL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCSEL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCSEL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCSEL1` writer"]
        pub struct W(crate::W<PCSEL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCSEL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCSEL1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOC function selection register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcsel1](index.html) module"]
        pub struct PCSEL1_SPEC;
        impl crate::RegisterSpec for PCSEL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcsel1::R](R) reader structure"]
        impl crate::Readable for PCSEL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcsel1::W](W) writer structure"]
        impl crate::Writable for PCSEL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCSEL1 to value 0"]
        impl crate::Resettable for PCSEL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCSEL2 register accessor: an alias for `Reg<PCSEL2_SPEC>`"]
    pub type PCSEL2 = crate::Reg<pcsel2::PCSEL2_SPEC>;
    #[doc = "GPIOC function selection register 2"]
    pub mod pcsel2 {
        #[doc = "Register `PCSEL2` reader"]
        pub struct R(crate::R<PCSEL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCSEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCSEL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCSEL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCSEL2` writer"]
        pub struct W(crate::W<PCSEL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCSEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCSEL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCSEL2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOC function selection register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcsel2](index.html) module"]
        pub struct PCSEL2_SPEC;
        impl crate::RegisterSpec for PCSEL2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcsel2::R](R) reader structure"]
        impl crate::Readable for PCSEL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcsel2::W](W) writer structure"]
        impl crate::Writable for PCSEL2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCSEL2 to value 0"]
        impl crate::Resettable for PCSEL2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PDSEL1 register accessor: an alias for `Reg<PDSEL1_SPEC>`"]
    pub type PDSEL1 = crate::Reg<pdsel1::PDSEL1_SPEC>;
    #[doc = "GPIOD function selection register 1"]
    pub mod pdsel1 {
        #[doc = "Register `PDSEL1` reader"]
        pub struct R(crate::R<PDSEL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PDSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PDSEL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PDSEL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PDSEL1` writer"]
        pub struct W(crate::W<PDSEL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PDSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PDSEL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PDSEL1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOD function selection register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdsel1](index.html) module"]
        pub struct PDSEL1_SPEC;
        impl crate::RegisterSpec for PDSEL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pdsel1::R](R) reader structure"]
        impl crate::Readable for PDSEL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pdsel1::W](W) writer structure"]
        impl crate::Writable for PDSEL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PDSEL1 to value 0"]
        impl crate::Resettable for PDSEL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PDSEL2 register accessor: an alias for `Reg<PDSEL2_SPEC>`"]
    pub type PDSEL2 = crate::Reg<pdsel2::PDSEL2_SPEC>;
    #[doc = "GPIOD function selection register 2"]
    pub mod pdsel2 {
        #[doc = "Register `PDSEL2` reader"]
        pub struct R(crate::R<PDSEL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PDSEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PDSEL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PDSEL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PDSEL2` writer"]
        pub struct W(crate::W<PDSEL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PDSEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PDSEL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PDSEL2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOD function selection register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdsel2](index.html) module"]
        pub struct PDSEL2_SPEC;
        impl crate::RegisterSpec for PDSEL2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pdsel2::R](R) reader structure"]
        impl crate::Readable for PDSEL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pdsel2::W](W) writer structure"]
        impl crate::Writable for PDSEL2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PDSEL2 to value 0"]
        impl crate::Resettable for PDSEL2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCDPUR register accessor: an alias for `Reg<PCDPUR_SPEC>`"]
    pub type PCDPUR = crate::Reg<pcdpur::PCDPUR_SPEC>;
    #[doc = "GPIOC GPIOD pull up config register"]
    pub mod pcdpur {
        #[doc = "Register `PCDPUR` reader"]
        pub struct R(crate::R<PCDPUR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCDPUR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCDPUR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCDPUR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCDPUR` writer"]
        pub struct W(crate::W<PCDPUR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCDPUR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCDPUR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCDPUR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOC GPIOD pull up config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcdpur](index.html) module"]
        pub struct PCDPUR_SPEC;
        impl crate::RegisterSpec for PCDPUR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcdpur::R](R) reader structure"]
        impl crate::Readable for PCDPUR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcdpur::W](W) writer structure"]
        impl crate::Writable for PCDPUR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCDPUR to value 0"]
        impl crate::Resettable for PCDPUR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCDPDR register accessor: an alias for `Reg<PCDPDR_SPEC>`"]
    pub type PCDPDR = crate::Reg<pcdpdr::PCDPDR_SPEC>;
    #[doc = "GPIOC GPIOD pull down config register"]
    pub mod pcdpdr {
        #[doc = "Register `PCDPDR` reader"]
        pub struct R(crate::R<PCDPDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCDPDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCDPDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCDPDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCDPDR` writer"]
        pub struct W(crate::W<PCDPDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCDPDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCDPDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCDPDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOC GPIOD pull down config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcdpdr](index.html) module"]
        pub struct PCDPDR_SPEC;
        impl crate::RegisterSpec for PCDPDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcdpdr::R](R) reader structure"]
        impl crate::Readable for PCDPDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcdpdr::W](W) writer structure"]
        impl crate::Writable for PCDPDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCDPDR to value 0"]
        impl crate::Resettable for PCDPDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCSTR register accessor: an alias for `Reg<PCSTR_SPEC>`"]
    pub type PCSTR = crate::Reg<pcstr::PCSTR_SPEC>;
    #[doc = "GPIOC output drive selection register"]
    pub mod pcstr {
        #[doc = "Register `PCSTR` reader"]
        pub struct R(crate::R<PCSTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCSTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCSTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCSTR` writer"]
        pub struct W(crate::W<PCSTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCSTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCSTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOC output drive selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcstr](index.html) module"]
        pub struct PCSTR_SPEC;
        impl crate::RegisterSpec for PCSTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcstr::R](R) reader structure"]
        impl crate::Readable for PCSTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcstr::W](W) writer structure"]
        impl crate::Writable for PCSTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCSTR to value 0"]
        impl crate::Resettable for PCSTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PDSTR register accessor: an alias for `Reg<PDSTR_SPEC>`"]
    pub type PDSTR = crate::Reg<pdstr::PDSTR_SPEC>;
    #[doc = "GPIOD output drive selection register"]
    pub mod pdstr {
        #[doc = "Register `PDSTR` reader"]
        pub struct R(crate::R<PDSTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PDSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PDSTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PDSTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PDSTR` writer"]
        pub struct W(crate::W<PDSTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PDSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PDSTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PDSTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOD output drive selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstr](index.html) module"]
        pub struct PDSTR_SPEC;
        impl crate::RegisterSpec for PDSTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pdstr::R](R) reader structure"]
        impl crate::Readable for PDSTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pdstr::W](W) writer structure"]
        impl crate::Writable for PDSTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PDSTR to value 0"]
        impl crate::Resettable for PDSTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCDSMTR register accessor: an alias for `Reg<PCDSMTR_SPEC>`"]
    pub type PCDSMTR = crate::Reg<pcdsmtr::PCDSMTR_SPEC>;
    #[doc = "GPIOC GPIOD SMT enable register"]
    pub mod pcdsmtr {
        #[doc = "Register `PCDSMTR` reader"]
        pub struct R(crate::R<PCDSMTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCDSMTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCDSMTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCDSMTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCDSMTR` writer"]
        pub struct W(crate::W<PCDSMTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCDSMTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCDSMTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCDSMTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOC GPIOD SMT enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcdsmtr](index.html) module"]
        pub struct PCDSMTR_SPEC;
        impl crate::RegisterSpec for PCDSMTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcdsmtr::R](R) reader structure"]
        impl crate::Readable for PCDSMTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcdsmtr::W](W) writer structure"]
        impl crate::Writable for PCDSMTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCDSMTR to value 0"]
        impl crate::Resettable for PCDSMTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCDODR register accessor: an alias for `Reg<PCDODR_SPEC>`"]
    pub type PCDODR = crate::Reg<pcdodr::PCDODR_SPEC>;
    #[doc = "GPIOC GPIOD open drain enable register"]
    pub mod pcdodr {
        #[doc = "Register `PCDODR` reader"]
        pub struct R(crate::R<PCDODR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCDODR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCDODR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCDODR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCDODR` writer"]
        pub struct W(crate::W<PCDODR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCDODR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCDODR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCDODR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOC GPIOD open drain enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcdodr](index.html) module"]
        pub struct PCDODR_SPEC;
        impl crate::RegisterSpec for PCDODR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcdodr::R](R) reader structure"]
        impl crate::Readable for PCDODR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcdodr::W](W) writer structure"]
        impl crate::Writable for PCDODR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCDODR to value 0"]
        impl crate::Resettable for PCDODR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PCDADS register accessor: an alias for `Reg<PCDADS_SPEC>`"]
    pub type PCDADS = crate::Reg<pcdads::PCDADS_SPEC>;
    #[doc = "GPIOC GPIOD digtal analog selection register"]
    pub mod pcdads {
        #[doc = "Register `PCDADS` reader"]
        pub struct R(crate::R<PCDADS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCDADS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCDADS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCDADS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCDADS` writer"]
        pub struct W(crate::W<PCDADS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCDADS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCDADS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCDADS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOC GPIOD digtal analog selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcdads](index.html) module"]
        pub struct PCDADS_SPEC;
        impl crate::RegisterSpec for PCDADS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcdads::R](R) reader structure"]
        impl crate::Readable for PCDADS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcdads::W](W) writer structure"]
        impl crate::Writable for PCDADS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCDADS to value 0"]
        impl crate::Resettable for PCDADS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PESEL1 register accessor: an alias for `Reg<PESEL1_SPEC>`"]
    pub type PESEL1 = crate::Reg<pesel1::PESEL1_SPEC>;
    #[doc = "GPIOE function selection register 1"]
    pub mod pesel1 {
        #[doc = "Register `PESEL1` reader"]
        pub struct R(crate::R<PESEL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PESEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PESEL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PESEL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PESEL1` writer"]
        pub struct W(crate::W<PESEL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PESEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PESEL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PESEL1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOE function selection register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pesel1](index.html) module"]
        pub struct PESEL1_SPEC;
        impl crate::RegisterSpec for PESEL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pesel1::R](R) reader structure"]
        impl crate::Readable for PESEL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pesel1::W](W) writer structure"]
        impl crate::Writable for PESEL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PESEL1 to value 0"]
        impl crate::Resettable for PESEL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PESEL2 register accessor: an alias for `Reg<PESEL2_SPEC>`"]
    pub type PESEL2 = crate::Reg<pesel2::PESEL2_SPEC>;
    #[doc = "GPIOE function selection register 2"]
    pub mod pesel2 {
        #[doc = "Register `PESEL2` reader"]
        pub struct R(crate::R<PESEL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PESEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PESEL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PESEL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PESEL2` writer"]
        pub struct W(crate::W<PESEL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PESEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PESEL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PESEL2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOE function selection register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pesel2](index.html) module"]
        pub struct PESEL2_SPEC;
        impl crate::RegisterSpec for PESEL2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pesel2::R](R) reader structure"]
        impl crate::Readable for PESEL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pesel2::W](W) writer structure"]
        impl crate::Writable for PESEL2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PESEL2 to value 0"]
        impl crate::Resettable for PESEL2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PFSEL1 register accessor: an alias for `Reg<PFSEL1_SPEC>`"]
    pub type PFSEL1 = crate::Reg<pfsel1::PFSEL1_SPEC>;
    #[doc = "GPIOF function selection register 1"]
    pub mod pfsel1 {
        #[doc = "Register `PFSEL1` reader"]
        pub struct R(crate::R<PFSEL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PFSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PFSEL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PFSEL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PFSEL1` writer"]
        pub struct W(crate::W<PFSEL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PFSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PFSEL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PFSEL1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOF function selection register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pfsel1](index.html) module"]
        pub struct PFSEL1_SPEC;
        impl crate::RegisterSpec for PFSEL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pfsel1::R](R) reader structure"]
        impl crate::Readable for PFSEL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pfsel1::W](W) writer structure"]
        impl crate::Writable for PFSEL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PFSEL1 to value 0"]
        impl crate::Resettable for PFSEL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PEFPUR register accessor: an alias for `Reg<PEFPUR_SPEC>`"]
    pub type PEFPUR = crate::Reg<pefpur::PEFPUR_SPEC>;
    #[doc = "GPIOE GPIOF pull up config register"]
    pub mod pefpur {
        #[doc = "Register `PEFPUR` reader"]
        pub struct R(crate::R<PEFPUR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PEFPUR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PEFPUR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PEFPUR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PEFPUR` writer"]
        pub struct W(crate::W<PEFPUR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PEFPUR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PEFPUR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PEFPUR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOE GPIOF pull up config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pefpur](index.html) module"]
        pub struct PEFPUR_SPEC;
        impl crate::RegisterSpec for PEFPUR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pefpur::R](R) reader structure"]
        impl crate::Readable for PEFPUR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pefpur::W](W) writer structure"]
        impl crate::Writable for PEFPUR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PEFPUR to value 0"]
        impl crate::Resettable for PEFPUR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PEFPDR register accessor: an alias for `Reg<PEFPDR_SPEC>`"]
    pub type PEFPDR = crate::Reg<pefpdr::PEFPDR_SPEC>;
    #[doc = "GPIOE GPIOE pull down config register"]
    pub mod pefpdr {
        #[doc = "Register `PEFPDR` reader"]
        pub struct R(crate::R<PEFPDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PEFPDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PEFPDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PEFPDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PEFPDR` writer"]
        pub struct W(crate::W<PEFPDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PEFPDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PEFPDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PEFPDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOE GPIOE pull down config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pefpdr](index.html) module"]
        pub struct PEFPDR_SPEC;
        impl crate::RegisterSpec for PEFPDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pefpdr::R](R) reader structure"]
        impl crate::Readable for PEFPDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pefpdr::W](W) writer structure"]
        impl crate::Writable for PEFPDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PEFPDR to value 0"]
        impl crate::Resettable for PEFPDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PESTR register accessor: an alias for `Reg<PESTR_SPEC>`"]
    pub type PESTR = crate::Reg<pestr::PESTR_SPEC>;
    #[doc = "GPIOE output drive selection register"]
    pub mod pestr {
        #[doc = "Register `PESTR` reader"]
        pub struct R(crate::R<PESTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PESTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PESTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PESTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PESTR` writer"]
        pub struct W(crate::W<PESTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PESTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PESTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PESTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOE output drive selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pestr](index.html) module"]
        pub struct PESTR_SPEC;
        impl crate::RegisterSpec for PESTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pestr::R](R) reader structure"]
        impl crate::Readable for PESTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pestr::W](W) writer structure"]
        impl crate::Writable for PESTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PESTR to value 0"]
        impl crate::Resettable for PESTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PFSTR register accessor: an alias for `Reg<PFSTR_SPEC>`"]
    pub type PFSTR = crate::Reg<pfstr::PFSTR_SPEC>;
    #[doc = "GPIOF output drive selection register"]
    pub mod pfstr {
        #[doc = "Register `PFSTR` reader"]
        pub struct R(crate::R<PFSTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PFSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PFSTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PFSTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PFSTR` writer"]
        pub struct W(crate::W<PFSTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PFSTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PFSTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PFSTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOF output drive selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pfstr](index.html) module"]
        pub struct PFSTR_SPEC;
        impl crate::RegisterSpec for PFSTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pfstr::R](R) reader structure"]
        impl crate::Readable for PFSTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pfstr::W](W) writer structure"]
        impl crate::Writable for PFSTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PFSTR to value 0"]
        impl crate::Resettable for PFSTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PEFSMTR register accessor: an alias for `Reg<PEFSMTR_SPEC>`"]
    pub type PEFSMTR = crate::Reg<pefsmtr::PEFSMTR_SPEC>;
    #[doc = "GPIOE GPIOF SMT enable register"]
    pub mod pefsmtr {
        #[doc = "Register `PEFSMTR` reader"]
        pub struct R(crate::R<PEFSMTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PEFSMTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PEFSMTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PEFSMTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PEFSMTR` writer"]
        pub struct W(crate::W<PEFSMTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PEFSMTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PEFSMTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PEFSMTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOE GPIOF SMT enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pefsmtr](index.html) module"]
        pub struct PEFSMTR_SPEC;
        impl crate::RegisterSpec for PEFSMTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pefsmtr::R](R) reader structure"]
        impl crate::Readable for PEFSMTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pefsmtr::W](W) writer structure"]
        impl crate::Writable for PEFSMTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PEFSMTR to value 0"]
        impl crate::Resettable for PEFSMTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PEFODR register accessor: an alias for `Reg<PEFODR_SPEC>`"]
    pub type PEFODR = crate::Reg<pefodr::PEFODR_SPEC>;
    #[doc = "GPIOE GPIOF open drain enable register"]
    pub mod pefodr {
        #[doc = "Register `PEFODR` reader"]
        pub struct R(crate::R<PEFODR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PEFODR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PEFODR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PEFODR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PEFODR` writer"]
        pub struct W(crate::W<PEFODR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PEFODR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PEFODR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PEFODR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOE GPIOF open drain enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pefodr](index.html) module"]
        pub struct PEFODR_SPEC;
        impl crate::RegisterSpec for PEFODR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pefodr::R](R) reader structure"]
        impl crate::Readable for PEFODR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pefodr::W](W) writer structure"]
        impl crate::Writable for PEFODR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PEFODR to value 0"]
        impl crate::Resettable for PEFODR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PEFADS register accessor: an alias for `Reg<PEFADS_SPEC>`"]
    pub type PEFADS = crate::Reg<pefads::PEFADS_SPEC>;
    #[doc = "GPIOE GPIOF digtal analog selection register"]
    pub mod pefads {
        #[doc = "Register `PEFADS` reader"]
        pub struct R(crate::R<PEFADS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PEFADS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PEFADS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PEFADS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PEFADS` writer"]
        pub struct W(crate::W<PEFADS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PEFADS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PEFADS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PEFADS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIOE GPIOF digtal analog selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pefads](index.html) module"]
        pub struct PEFADS_SPEC;
        impl crate::RegisterSpec for PEFADS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pefads::R](R) reader structure"]
        impl crate::Readable for PEFADS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pefads::W](W) writer structure"]
        impl crate::Writable for PEFADS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PEFADS to value 0"]
        impl crate::Resettable for PEFADS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "SPI peripheral"]
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi1::RegisterBlock = 0x4002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
#[doc = "SPI peripheral"]
pub mod spi1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved_0_spi: [u8; 0x04],
        #[doc = "0x04 - SPI baudrate"]
        pub spi_baud: crate::Reg<spi_baud::SPI_BAUD_SPEC>,
        #[doc = "0x08 - SPI control"]
        pub spi_ctl: crate::Reg<spi_ctl::SPI_CTL_SPEC>,
        #[doc = "0x0c - SPI tx control"]
        pub spi_tx_ctl: crate::Reg<spi_tx_ctl::SPI_TX_CTL_SPEC>,
        #[doc = "0x10 - SPI rx control"]
        pub spi_rx_ctl: crate::Reg<spi_rx_ctl::SPI_RX_CTL_SPEC>,
        #[doc = "0x14 - SPI interrupt enable"]
        pub spi_ie: crate::Reg<spi_ie::SPI_IE_SPEC>,
        #[doc = "0x18 - SPI status"]
        pub spi_status: crate::Reg<spi_status::SPI_STATUS_SPEC>,
        #[doc = "0x1c - SPI tx delay"]
        pub spi_txdelay: crate::Reg<spi_txdelay::SPI_TXDELAY_SPEC>,
        #[doc = "0x20 - SPI batch number"]
        pub spi_batch: crate::Reg<spi_batch::SPI_BATCH_SPEC>,
        #[doc = "0x24 - SPI cs register"]
        pub spi_cs: crate::Reg<spi_cs::SPI_CS_SPEC>,
        #[doc = "0x28 - SPI output auto enable"]
        pub spi_out_en: crate::Reg<spi_out_en::SPI_OUT_EN_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x00 - SPI rx data"]
        #[inline(always)]
        pub fn spi_rx_dat(&self) -> &crate::Reg<spi_rx_dat::SPI_RX_DAT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(0usize)
                    as *const crate::Reg<spi_rx_dat::SPI_RX_DAT_SPEC>)
            }
        }
        #[doc = "0x00 - SPI tx data"]
        #[inline(always)]
        pub fn spi_tx_dat(&self) -> &crate::Reg<spi_tx_dat::SPI_TX_DAT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(0usize)
                    as *const crate::Reg<spi_tx_dat::SPI_TX_DAT_SPEC>)
            }
        }
    }
    #[doc = "SPI_TX_DAT register accessor: an alias for `Reg<SPI_TX_DAT_SPEC>`"]
    pub type SPI_TX_DAT = crate::Reg<spi_tx_dat::SPI_TX_DAT_SPEC>;
    #[doc = "SPI tx data"]
    pub mod spi_tx_dat {
        #[doc = "Register `SPI_TX_DAT` writer"]
        pub struct W(crate::W<SPI_TX_DAT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_TX_DAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_TX_DAT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_TX_DAT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI tx data\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_tx_dat](index.html) module"]
        pub struct SPI_TX_DAT_SPEC;
        impl crate::RegisterSpec for SPI_TX_DAT_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [spi_tx_dat::W](W) writer structure"]
        impl crate::Writable for SPI_TX_DAT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_TX_DAT to value 0"]
        impl crate::Resettable for SPI_TX_DAT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_RX_DAT register accessor: an alias for `Reg<SPI_RX_DAT_SPEC>`"]
    pub type SPI_RX_DAT = crate::Reg<spi_rx_dat::SPI_RX_DAT_SPEC>;
    #[doc = "SPI rx data"]
    pub mod spi_rx_dat {
        #[doc = "Register `SPI_RX_DAT` reader"]
        pub struct R(crate::R<SPI_RX_DAT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_RX_DAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_RX_DAT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_RX_DAT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "SPI rx data\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_rx_dat](index.html) module"]
        pub struct SPI_RX_DAT_SPEC;
        impl crate::RegisterSpec for SPI_RX_DAT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_rx_dat::R](R) reader structure"]
        impl crate::Readable for SPI_RX_DAT_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets SPI_RX_DAT to value 0"]
        impl crate::Resettable for SPI_RX_DAT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_BAUD register accessor: an alias for `Reg<SPI_BAUD_SPEC>`"]
    pub type SPI_BAUD = crate::Reg<spi_baud::SPI_BAUD_SPEC>;
    #[doc = "SPI baudrate"]
    pub mod spi_baud {
        #[doc = "Register `SPI_BAUD` reader"]
        pub struct R(crate::R<SPI_BAUD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_BAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_BAUD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_BAUD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_BAUD` writer"]
        pub struct W(crate::W<SPI_BAUD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_BAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_BAUD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_BAUD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI baudrate\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_baud](index.html) module"]
        pub struct SPI_BAUD_SPEC;
        impl crate::RegisterSpec for SPI_BAUD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_baud::R](R) reader structure"]
        impl crate::Readable for SPI_BAUD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_baud::W](W) writer structure"]
        impl crate::Writable for SPI_BAUD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_BAUD to value 0"]
        impl crate::Resettable for SPI_BAUD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_CTL register accessor: an alias for `Reg<SPI_CTL_SPEC>`"]
    pub type SPI_CTL = crate::Reg<spi_ctl::SPI_CTL_SPEC>;
    #[doc = "SPI control"]
    pub mod spi_ctl {
        #[doc = "Register `SPI_CTL` reader"]
        pub struct R(crate::R<SPI_CTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_CTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_CTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_CTL` writer"]
        pub struct W(crate::W<SPI_CTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_CTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_CTL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_ctl](index.html) module"]
        pub struct SPI_CTL_SPEC;
        impl crate::RegisterSpec for SPI_CTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_ctl::R](R) reader structure"]
        impl crate::Readable for SPI_CTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_ctl::W](W) writer structure"]
        impl crate::Writable for SPI_CTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_CTL to value 0"]
        impl crate::Resettable for SPI_CTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_TX_CTL register accessor: an alias for `Reg<SPI_TX_CTL_SPEC>`"]
    pub type SPI_TX_CTL = crate::Reg<spi_tx_ctl::SPI_TX_CTL_SPEC>;
    #[doc = "SPI tx control"]
    pub mod spi_tx_ctl {
        #[doc = "Register `SPI_TX_CTL` reader"]
        pub struct R(crate::R<SPI_TX_CTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_TX_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_TX_CTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_TX_CTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_TX_CTL` writer"]
        pub struct W(crate::W<SPI_TX_CTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_TX_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_TX_CTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_TX_CTL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI tx control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_tx_ctl](index.html) module"]
        pub struct SPI_TX_CTL_SPEC;
        impl crate::RegisterSpec for SPI_TX_CTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_tx_ctl::R](R) reader structure"]
        impl crate::Readable for SPI_TX_CTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_tx_ctl::W](W) writer structure"]
        impl crate::Writable for SPI_TX_CTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_TX_CTL to value 0"]
        impl crate::Resettable for SPI_TX_CTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_RX_CTL register accessor: an alias for `Reg<SPI_RX_CTL_SPEC>`"]
    pub type SPI_RX_CTL = crate::Reg<spi_rx_ctl::SPI_RX_CTL_SPEC>;
    #[doc = "SPI rx control"]
    pub mod spi_rx_ctl {
        #[doc = "Register `SPI_RX_CTL` reader"]
        pub struct R(crate::R<SPI_RX_CTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_RX_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_RX_CTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_RX_CTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_RX_CTL` writer"]
        pub struct W(crate::W<SPI_RX_CTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_RX_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_RX_CTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_RX_CTL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI rx control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_rx_ctl](index.html) module"]
        pub struct SPI_RX_CTL_SPEC;
        impl crate::RegisterSpec for SPI_RX_CTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_rx_ctl::R](R) reader structure"]
        impl crate::Readable for SPI_RX_CTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_rx_ctl::W](W) writer structure"]
        impl crate::Writable for SPI_RX_CTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_RX_CTL to value 0"]
        impl crate::Resettable for SPI_RX_CTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_IE register accessor: an alias for `Reg<SPI_IE_SPEC>`"]
    pub type SPI_IE = crate::Reg<spi_ie::SPI_IE_SPEC>;
    #[doc = "SPI interrupt enable"]
    pub mod spi_ie {
        #[doc = "Register `SPI_IE` reader"]
        pub struct R(crate::R<SPI_IE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_IE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_IE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_IE` writer"]
        pub struct W(crate::W<SPI_IE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_IE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_IE_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI interrupt enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_ie](index.html) module"]
        pub struct SPI_IE_SPEC;
        impl crate::RegisterSpec for SPI_IE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_ie::R](R) reader structure"]
        impl crate::Readable for SPI_IE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_ie::W](W) writer structure"]
        impl crate::Writable for SPI_IE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_IE to value 0"]
        impl crate::Resettable for SPI_IE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_STATUS register accessor: an alias for `Reg<SPI_STATUS_SPEC>`"]
    pub type SPI_STATUS = crate::Reg<spi_status::SPI_STATUS_SPEC>;
    #[doc = "SPI status"]
    pub mod spi_status {
        #[doc = "Register `SPI_STATUS` reader"]
        pub struct R(crate::R<SPI_STATUS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_STATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_STATUS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_STATUS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_STATUS` writer"]
        pub struct W(crate::W<SPI_STATUS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_STATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_STATUS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_STATUS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_status](index.html) module"]
        pub struct SPI_STATUS_SPEC;
        impl crate::RegisterSpec for SPI_STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_status::R](R) reader structure"]
        impl crate::Readable for SPI_STATUS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_status::W](W) writer structure"]
        impl crate::Writable for SPI_STATUS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_STATUS to value 0"]
        impl crate::Resettable for SPI_STATUS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_TXDelay register accessor: an alias for `Reg<SPI_TXDELAY_SPEC>`"]
    pub type SPI_TXDELAY = crate::Reg<spi_txdelay::SPI_TXDELAY_SPEC>;
    #[doc = "SPI tx delay"]
    pub mod spi_txdelay {
        #[doc = "Register `SPI_TXDelay` reader"]
        pub struct R(crate::R<SPI_TXDELAY_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_TXDELAY_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_TXDELAY_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_TXDELAY_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_TXDelay` writer"]
        pub struct W(crate::W<SPI_TXDELAY_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_TXDELAY_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_TXDELAY_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_TXDELAY_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI tx delay\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_txdelay](index.html) module"]
        pub struct SPI_TXDELAY_SPEC;
        impl crate::RegisterSpec for SPI_TXDELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_txdelay::R](R) reader structure"]
        impl crate::Readable for SPI_TXDELAY_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_txdelay::W](W) writer structure"]
        impl crate::Writable for SPI_TXDELAY_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_TXDelay to value 0"]
        impl crate::Resettable for SPI_TXDELAY_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_BATCH register accessor: an alias for `Reg<SPI_BATCH_SPEC>`"]
    pub type SPI_BATCH = crate::Reg<spi_batch::SPI_BATCH_SPEC>;
    #[doc = "SPI batch number"]
    pub mod spi_batch {
        #[doc = "Register `SPI_BATCH` reader"]
        pub struct R(crate::R<SPI_BATCH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_BATCH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_BATCH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_BATCH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_BATCH` writer"]
        pub struct W(crate::W<SPI_BATCH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_BATCH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_BATCH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_BATCH_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI batch number\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_batch](index.html) module"]
        pub struct SPI_BATCH_SPEC;
        impl crate::RegisterSpec for SPI_BATCH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_batch::R](R) reader structure"]
        impl crate::Readable for SPI_BATCH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_batch::W](W) writer structure"]
        impl crate::Writable for SPI_BATCH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_BATCH to value 0"]
        impl crate::Resettable for SPI_BATCH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_CS register accessor: an alias for `Reg<SPI_CS_SPEC>`"]
    pub type SPI_CS = crate::Reg<spi_cs::SPI_CS_SPEC>;
    #[doc = "SPI cs register"]
    pub mod spi_cs {
        #[doc = "Register `SPI_CS` writer"]
        pub struct W(crate::W<SPI_CS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_CS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_CS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_CS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI cs register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_cs](index.html) module"]
        pub struct SPI_CS_SPEC;
        impl crate::RegisterSpec for SPI_CS_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [spi_cs::W](W) writer structure"]
        impl crate::Writable for SPI_CS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_CS to value 0"]
        impl crate::Resettable for SPI_CS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_OUT_EN register accessor: an alias for `Reg<SPI_OUT_EN_SPEC>`"]
    pub type SPI_OUT_EN = crate::Reg<spi_out_en::SPI_OUT_EN_SPEC>;
    #[doc = "SPI output auto enable"]
    pub mod spi_out_en {
        #[doc = "Register `SPI_OUT_EN` reader"]
        pub struct R(crate::R<SPI_OUT_EN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_OUT_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_OUT_EN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_OUT_EN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_OUT_EN` writer"]
        pub struct W(crate::W<SPI_OUT_EN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_OUT_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_OUT_EN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_OUT_EN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI output auto enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_out_en](index.html) module"]
        pub struct SPI_OUT_EN_SPEC;
        impl crate::RegisterSpec for SPI_OUT_EN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_out_en::R](R) reader structure"]
        impl crate::Readable for SPI_OUT_EN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_out_en::W](W) writer structure"]
        impl crate::Writable for SPI_OUT_EN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_OUT_EN to value 0"]
        impl crate::Resettable for SPI_OUT_EN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "SPI peripheral"]
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi1::RegisterBlock = 0x4002_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
#[doc = "SPI peripheral"]
pub use spi1 as spi2;
#[doc = "SPI peripheral"]
pub struct SPI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI3 {}
impl SPI3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi3::RegisterBlock = 0x4002_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI3 {
    type Target = spi3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
#[doc = "SPI peripheral"]
pub mod spi3 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved_0_spi: [u8; 0x04],
        #[doc = "0x04 - SPI baudrate"]
        pub spi_baud: crate::Reg<spi_baud::SPI_BAUD_SPEC>,
        #[doc = "0x08 - SPI control"]
        pub spi_ctl: crate::Reg<spi_ctl::SPI_CTL_SPEC>,
        #[doc = "0x0c - SPI tx control"]
        pub spi_tx_ctl: crate::Reg<spi_tx_ctl::SPI_TX_CTL_SPEC>,
        #[doc = "0x10 - SPI rx control"]
        pub spi_rx_ctl: crate::Reg<spi_rx_ctl::SPI_RX_CTL_SPEC>,
        #[doc = "0x14 - SPI interrupt enable"]
        pub spi_ie: crate::Reg<spi_ie::SPI_IE_SPEC>,
        #[doc = "0x18 - SPI status"]
        pub spi_status: crate::Reg<spi_status::SPI_STATUS_SPEC>,
        #[doc = "0x1c - SPI tx delay"]
        pub spi_txdelay: crate::Reg<spi_txdelay::SPI_TXDELAY_SPEC>,
        #[doc = "0x20 - SPI batch number"]
        pub spi_batch: crate::Reg<spi_batch::SPI_BATCH_SPEC>,
        #[doc = "0x24 - SPI cs register"]
        pub spi_cs: crate::Reg<spi_cs::SPI_CS_SPEC>,
        #[doc = "0x28 - SPI output auto enable"]
        pub spi_out_en: crate::Reg<spi_out_en::SPI_OUT_EN_SPEC>,
        #[doc = "0x2c - SPI memery mode control"]
        pub spi_memo_acc: crate::Reg<spi_memo_acc::SPI_MEMO_ACC_SPEC>,
        #[doc = "0x30 - SPI memery CMD set"]
        pub spi_cmd: crate::Reg<spi_cmd::SPI_CMD_SPEC>,
        #[doc = "0x34 - SPI memery parameter"]
        pub spi_para: crate::Reg<spi_para::SPI_PARA_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x00 - SPI rx data"]
        #[inline(always)]
        pub fn spi_rx_dat(&self) -> &crate::Reg<spi_rx_dat::SPI_RX_DAT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(0usize)
                    as *const crate::Reg<spi_rx_dat::SPI_RX_DAT_SPEC>)
            }
        }
        #[doc = "0x00 - SPI tx data"]
        #[inline(always)]
        pub fn spi_tx_dat(&self) -> &crate::Reg<spi_tx_dat::SPI_TX_DAT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(0usize)
                    as *const crate::Reg<spi_tx_dat::SPI_TX_DAT_SPEC>)
            }
        }
    }
    #[doc = "SPI_TX_DAT register accessor: an alias for `Reg<SPI_TX_DAT_SPEC>`"]
    pub type SPI_TX_DAT = crate::Reg<spi_tx_dat::SPI_TX_DAT_SPEC>;
    #[doc = "SPI tx data"]
    pub mod spi_tx_dat {
        #[doc = "Register `SPI_TX_DAT` reader"]
        pub struct R(crate::R<SPI_TX_DAT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_TX_DAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_TX_DAT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_TX_DAT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_TX_DAT` writer"]
        pub struct W(crate::W<SPI_TX_DAT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_TX_DAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_TX_DAT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_TX_DAT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI tx data\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_tx_dat](index.html) module"]
        pub struct SPI_TX_DAT_SPEC;
        impl crate::RegisterSpec for SPI_TX_DAT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_tx_dat::R](R) reader structure"]
        impl crate::Readable for SPI_TX_DAT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_tx_dat::W](W) writer structure"]
        impl crate::Writable for SPI_TX_DAT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_TX_DAT to value 0"]
        impl crate::Resettable for SPI_TX_DAT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_RX_DAT register accessor: an alias for `Reg<SPI_RX_DAT_SPEC>`"]
    pub type SPI_RX_DAT = crate::Reg<spi_rx_dat::SPI_RX_DAT_SPEC>;
    #[doc = "SPI rx data"]
    pub mod spi_rx_dat {
        #[doc = "Register `SPI_RX_DAT` reader"]
        pub struct R(crate::R<SPI_RX_DAT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_RX_DAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_RX_DAT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_RX_DAT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_RX_DAT` writer"]
        pub struct W(crate::W<SPI_RX_DAT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_RX_DAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_RX_DAT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_RX_DAT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI rx data\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_rx_dat](index.html) module"]
        pub struct SPI_RX_DAT_SPEC;
        impl crate::RegisterSpec for SPI_RX_DAT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_rx_dat::R](R) reader structure"]
        impl crate::Readable for SPI_RX_DAT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_rx_dat::W](W) writer structure"]
        impl crate::Writable for SPI_RX_DAT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_RX_DAT to value 0"]
        impl crate::Resettable for SPI_RX_DAT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_BAUD register accessor: an alias for `Reg<SPI_BAUD_SPEC>`"]
    pub type SPI_BAUD = crate::Reg<spi_baud::SPI_BAUD_SPEC>;
    #[doc = "SPI baudrate"]
    pub mod spi_baud {
        #[doc = "Register `SPI_BAUD` reader"]
        pub struct R(crate::R<SPI_BAUD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_BAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_BAUD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_BAUD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_BAUD` writer"]
        pub struct W(crate::W<SPI_BAUD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_BAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_BAUD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_BAUD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI baudrate\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_baud](index.html) module"]
        pub struct SPI_BAUD_SPEC;
        impl crate::RegisterSpec for SPI_BAUD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_baud::R](R) reader structure"]
        impl crate::Readable for SPI_BAUD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_baud::W](W) writer structure"]
        impl crate::Writable for SPI_BAUD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_BAUD to value 0"]
        impl crate::Resettable for SPI_BAUD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_CTL register accessor: an alias for `Reg<SPI_CTL_SPEC>`"]
    pub type SPI_CTL = crate::Reg<spi_ctl::SPI_CTL_SPEC>;
    #[doc = "SPI control"]
    pub mod spi_ctl {
        #[doc = "Register `SPI_CTL` reader"]
        pub struct R(crate::R<SPI_CTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_CTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_CTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_CTL` writer"]
        pub struct W(crate::W<SPI_CTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_CTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_CTL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_ctl](index.html) module"]
        pub struct SPI_CTL_SPEC;
        impl crate::RegisterSpec for SPI_CTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_ctl::R](R) reader structure"]
        impl crate::Readable for SPI_CTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_ctl::W](W) writer structure"]
        impl crate::Writable for SPI_CTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_CTL to value 0"]
        impl crate::Resettable for SPI_CTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_TX_CTL register accessor: an alias for `Reg<SPI_TX_CTL_SPEC>`"]
    pub type SPI_TX_CTL = crate::Reg<spi_tx_ctl::SPI_TX_CTL_SPEC>;
    #[doc = "SPI tx control"]
    pub mod spi_tx_ctl {
        #[doc = "Register `SPI_TX_CTL` reader"]
        pub struct R(crate::R<SPI_TX_CTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_TX_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_TX_CTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_TX_CTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_TX_CTL` writer"]
        pub struct W(crate::W<SPI_TX_CTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_TX_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_TX_CTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_TX_CTL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI tx control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_tx_ctl](index.html) module"]
        pub struct SPI_TX_CTL_SPEC;
        impl crate::RegisterSpec for SPI_TX_CTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_tx_ctl::R](R) reader structure"]
        impl crate::Readable for SPI_TX_CTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_tx_ctl::W](W) writer structure"]
        impl crate::Writable for SPI_TX_CTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_TX_CTL to value 0"]
        impl crate::Resettable for SPI_TX_CTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_RX_CTL register accessor: an alias for `Reg<SPI_RX_CTL_SPEC>`"]
    pub type SPI_RX_CTL = crate::Reg<spi_rx_ctl::SPI_RX_CTL_SPEC>;
    #[doc = "SPI rx control"]
    pub mod spi_rx_ctl {
        #[doc = "Register `SPI_RX_CTL` reader"]
        pub struct R(crate::R<SPI_RX_CTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_RX_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_RX_CTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_RX_CTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_RX_CTL` writer"]
        pub struct W(crate::W<SPI_RX_CTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_RX_CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_RX_CTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_RX_CTL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI rx control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_rx_ctl](index.html) module"]
        pub struct SPI_RX_CTL_SPEC;
        impl crate::RegisterSpec for SPI_RX_CTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_rx_ctl::R](R) reader structure"]
        impl crate::Readable for SPI_RX_CTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_rx_ctl::W](W) writer structure"]
        impl crate::Writable for SPI_RX_CTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_RX_CTL to value 0"]
        impl crate::Resettable for SPI_RX_CTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_IE register accessor: an alias for `Reg<SPI_IE_SPEC>`"]
    pub type SPI_IE = crate::Reg<spi_ie::SPI_IE_SPEC>;
    #[doc = "SPI interrupt enable"]
    pub mod spi_ie {
        #[doc = "Register `SPI_IE` reader"]
        pub struct R(crate::R<SPI_IE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_IE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_IE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_IE` writer"]
        pub struct W(crate::W<SPI_IE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_IE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_IE_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI interrupt enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_ie](index.html) module"]
        pub struct SPI_IE_SPEC;
        impl crate::RegisterSpec for SPI_IE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_ie::R](R) reader structure"]
        impl crate::Readable for SPI_IE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_ie::W](W) writer structure"]
        impl crate::Writable for SPI_IE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_IE to value 0"]
        impl crate::Resettable for SPI_IE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_STATUS register accessor: an alias for `Reg<SPI_STATUS_SPEC>`"]
    pub type SPI_STATUS = crate::Reg<spi_status::SPI_STATUS_SPEC>;
    #[doc = "SPI status"]
    pub mod spi_status {
        #[doc = "Register `SPI_STATUS` reader"]
        pub struct R(crate::R<SPI_STATUS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_STATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_STATUS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_STATUS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_STATUS` writer"]
        pub struct W(crate::W<SPI_STATUS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_STATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_STATUS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_STATUS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_status](index.html) module"]
        pub struct SPI_STATUS_SPEC;
        impl crate::RegisterSpec for SPI_STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_status::R](R) reader structure"]
        impl crate::Readable for SPI_STATUS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_status::W](W) writer structure"]
        impl crate::Writable for SPI_STATUS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_STATUS to value 0"]
        impl crate::Resettable for SPI_STATUS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_TXDelay register accessor: an alias for `Reg<SPI_TXDELAY_SPEC>`"]
    pub type SPI_TXDELAY = crate::Reg<spi_txdelay::SPI_TXDELAY_SPEC>;
    #[doc = "SPI tx delay"]
    pub mod spi_txdelay {
        #[doc = "Register `SPI_TXDelay` reader"]
        pub struct R(crate::R<SPI_TXDELAY_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_TXDELAY_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_TXDELAY_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_TXDELAY_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_TXDelay` writer"]
        pub struct W(crate::W<SPI_TXDELAY_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_TXDELAY_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_TXDELAY_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_TXDELAY_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI tx delay\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_txdelay](index.html) module"]
        pub struct SPI_TXDELAY_SPEC;
        impl crate::RegisterSpec for SPI_TXDELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_txdelay::R](R) reader structure"]
        impl crate::Readable for SPI_TXDELAY_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_txdelay::W](W) writer structure"]
        impl crate::Writable for SPI_TXDELAY_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_TXDelay to value 0"]
        impl crate::Resettable for SPI_TXDELAY_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_BATCH register accessor: an alias for `Reg<SPI_BATCH_SPEC>`"]
    pub type SPI_BATCH = crate::Reg<spi_batch::SPI_BATCH_SPEC>;
    #[doc = "SPI batch number"]
    pub mod spi_batch {
        #[doc = "Register `SPI_BATCH` reader"]
        pub struct R(crate::R<SPI_BATCH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_BATCH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_BATCH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_BATCH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_BATCH` writer"]
        pub struct W(crate::W<SPI_BATCH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_BATCH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_BATCH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_BATCH_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI batch number\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_batch](index.html) module"]
        pub struct SPI_BATCH_SPEC;
        impl crate::RegisterSpec for SPI_BATCH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_batch::R](R) reader structure"]
        impl crate::Readable for SPI_BATCH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_batch::W](W) writer structure"]
        impl crate::Writable for SPI_BATCH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_BATCH to value 0"]
        impl crate::Resettable for SPI_BATCH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_CS register accessor: an alias for `Reg<SPI_CS_SPEC>`"]
    pub type SPI_CS = crate::Reg<spi_cs::SPI_CS_SPEC>;
    #[doc = "SPI cs register"]
    pub mod spi_cs {
        #[doc = "Register `SPI_CS` writer"]
        pub struct W(crate::W<SPI_CS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_CS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_CS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_CS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI cs register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_cs](index.html) module"]
        pub struct SPI_CS_SPEC;
        impl crate::RegisterSpec for SPI_CS_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [spi_cs::W](W) writer structure"]
        impl crate::Writable for SPI_CS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_CS to value 0"]
        impl crate::Resettable for SPI_CS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_OUT_EN register accessor: an alias for `Reg<SPI_OUT_EN_SPEC>`"]
    pub type SPI_OUT_EN = crate::Reg<spi_out_en::SPI_OUT_EN_SPEC>;
    #[doc = "SPI output auto enable"]
    pub mod spi_out_en {
        #[doc = "Register `SPI_OUT_EN` reader"]
        pub struct R(crate::R<SPI_OUT_EN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_OUT_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_OUT_EN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_OUT_EN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_OUT_EN` writer"]
        pub struct W(crate::W<SPI_OUT_EN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_OUT_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_OUT_EN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_OUT_EN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI output auto enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_out_en](index.html) module"]
        pub struct SPI_OUT_EN_SPEC;
        impl crate::RegisterSpec for SPI_OUT_EN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_out_en::R](R) reader structure"]
        impl crate::Readable for SPI_OUT_EN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_out_en::W](W) writer structure"]
        impl crate::Writable for SPI_OUT_EN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_OUT_EN to value 0"]
        impl crate::Resettable for SPI_OUT_EN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_MEMO_ACC register accessor: an alias for `Reg<SPI_MEMO_ACC_SPEC>`"]
    pub type SPI_MEMO_ACC = crate::Reg<spi_memo_acc::SPI_MEMO_ACC_SPEC>;
    #[doc = "SPI memery mode control"]
    pub mod spi_memo_acc {
        #[doc = "Register `SPI_MEMO_ACC` reader"]
        pub struct R(crate::R<SPI_MEMO_ACC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_MEMO_ACC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_MEMO_ACC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_MEMO_ACC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_MEMO_ACC` writer"]
        pub struct W(crate::W<SPI_MEMO_ACC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_MEMO_ACC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_MEMO_ACC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_MEMO_ACC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI memery mode control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_memo_acc](index.html) module"]
        pub struct SPI_MEMO_ACC_SPEC;
        impl crate::RegisterSpec for SPI_MEMO_ACC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_memo_acc::R](R) reader structure"]
        impl crate::Readable for SPI_MEMO_ACC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_memo_acc::W](W) writer structure"]
        impl crate::Writable for SPI_MEMO_ACC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_MEMO_ACC to value 0"]
        impl crate::Resettable for SPI_MEMO_ACC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_CMD register accessor: an alias for `Reg<SPI_CMD_SPEC>`"]
    pub type SPI_CMD = crate::Reg<spi_cmd::SPI_CMD_SPEC>;
    #[doc = "SPI memery CMD set"]
    pub mod spi_cmd {
        #[doc = "Register `SPI_CMD` reader"]
        pub struct R(crate::R<SPI_CMD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_CMD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_CMD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_CMD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_CMD` writer"]
        pub struct W(crate::W<SPI_CMD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_CMD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_CMD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_CMD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI memery CMD set\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_cmd](index.html) module"]
        pub struct SPI_CMD_SPEC;
        impl crate::RegisterSpec for SPI_CMD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_cmd::R](R) reader structure"]
        impl crate::Readable for SPI_CMD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_cmd::W](W) writer structure"]
        impl crate::Writable for SPI_CMD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_CMD to value 0"]
        impl crate::Resettable for SPI_CMD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_PARA register accessor: an alias for `Reg<SPI_PARA_SPEC>`"]
    pub type SPI_PARA = crate::Reg<spi_para::SPI_PARA_SPEC>;
    #[doc = "SPI memery parameter"]
    pub mod spi_para {
        #[doc = "Register `SPI_PARA` reader"]
        pub struct R(crate::R<SPI_PARA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_PARA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_PARA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_PARA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_PARA` writer"]
        pub struct W(crate::W<SPI_PARA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_PARA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_PARA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_PARA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SPI memery parameter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_para](index.html) module"]
        pub struct SPI_PARA_SPEC;
        impl crate::RegisterSpec for SPI_PARA_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_para::R](R) reader structure"]
        impl crate::Readable for SPI_PARA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_para::W](W) writer structure"]
        impl crate::Writable for SPI_PARA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_PARA to value 0"]
        impl crate::Resettable for SPI_PARA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "SPI peripheral"]
pub struct SPI4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI4 {}
impl SPI4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi1::RegisterBlock = 0x4002_0c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI4 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4").finish()
    }
}
#[doc = "SPI peripheral"]
pub use spi1 as spi4;
#[doc = "Advanced timer"]
pub struct TIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1 {}
impl TIM1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim1::RegisterBlock = 0x4001_2c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM1 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
#[doc = "Advanced timer"]
pub mod tim1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        #[doc = "0x04 - control register 2"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: crate::Reg<smcr::SMCR_SPEC>,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: crate::Reg<dier::DIER_SPEC>,
        #[doc = "0x10 - status register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x14 - event generation register"]
        pub egr: crate::Reg<egr::EGR_SPEC>,
        _reserved_6_ccmr1: [u8; 0x04],
        _reserved_7_ccmr2: [u8; 0x04],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: crate::Reg<ccer::CCER_SPEC>,
        #[doc = "0x24 - counter"]
        pub cnt: crate::Reg<cnt::CNT_SPEC>,
        #[doc = "0x28 - prescaler"]
        pub psc: crate::Reg<psc::PSC_SPEC>,
        #[doc = "0x2c - auto-reload register"]
        pub arr: crate::Reg<arr::ARR_SPEC>,
        #[doc = "0x30 - repetition counter register"]
        pub rcr: crate::Reg<rcr::RCR_SPEC>,
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: crate::Reg<ccr1::CCR1_SPEC>,
        #[doc = "0x38 - capture/compare register 2"]
        pub ccr2: crate::Reg<ccr2::CCR2_SPEC>,
        #[doc = "0x3c - capture/compare register 3"]
        pub ccr3: crate::Reg<ccr3::CCR3_SPEC>,
        #[doc = "0x40 - capture/compare register 4"]
        pub ccr4: crate::Reg<ccr4::CCR4_SPEC>,
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: crate::Reg<bdtr::BDTR_SPEC>,
        #[doc = "0x48 - DMA control register"]
        pub dcr: crate::Reg<dcr::DCR_SPEC>,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: crate::Reg<dmar::DMAR_SPEC>,
        _reserved20: [u8; 0x10],
        #[doc = "0x60 - Multiplex function selection"]
        pub af1: crate::Reg<af1::AF1_SPEC>,
        _reserved21: [u8; 0x04],
        #[doc = "0x68 - Input selection"]
        pub tisel: crate::Reg<tisel::TISEL_SPEC>,
        #[doc = "0x6c - DMA request type selection"]
        pub dber: crate::Reg<dber::DBER_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>)
            }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input(&self) -> &crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output(&self) -> &crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC>)
            }
        }
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SMCR register accessor: an alias for `Reg<SMCR_SPEC>`"]
    pub type SMCR = crate::Reg<smcr::SMCR_SPEC>;
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Register `SMCR` reader"]
        pub struct R(crate::R<SMCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SMCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SMCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SMCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SMCR` writer"]
        pub struct W(crate::W<SMCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SMCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SMCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SMCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](index.html) module"]
        pub struct SMCR_SPEC;
        impl crate::RegisterSpec for SMCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [smcr::R](R) reader structure"]
        impl crate::Readable for SMCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [smcr::W](W) writer structure"]
        impl crate::Writable for SMCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SMCR to value 0"]
        impl crate::Resettable for SMCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIER register accessor: an alias for `Reg<DIER_SPEC>`"]
    pub type DIER = crate::Reg<dier::DIER_SPEC>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Register `DIER` reader"]
        pub struct R(crate::R<DIER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIER` writer"]
        pub struct W(crate::W<DIER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](index.html) module"]
        pub struct DIER_SPEC;
        impl crate::RegisterSpec for DIER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dier::R](R) reader structure"]
        impl crate::Readable for DIER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dier::W](W) writer structure"]
        impl crate::Writable for DIER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIER to value 0"]
        impl crate::Resettable for DIER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EGR register accessor: an alias for `Reg<EGR_SPEC>`"]
    pub type EGR = crate::Reg<egr::EGR_SPEC>;
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Register `EGR` writer"]
        pub struct W(crate::W<EGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EGR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "event generation register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](index.html) module"]
        pub struct EGR_SPEC;
        impl crate::RegisterSpec for EGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [egr::W](W) writer structure"]
        impl crate::Writable for EGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EGR to value 0"]
        impl crate::Resettable for EGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Output register accessor: an alias for `Reg<CCMR1_OUTPUT_SPEC>`"]
    pub type CCMR1_OUTPUT = crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Register `CCMR1_Output` reader"]
        pub struct R(crate::R<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Output` writer"]
        pub struct W(crate::W<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](index.html) module"]
        pub struct CCMR1_OUTPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_output::R](R) reader structure"]
        impl crate::Readable for CCMR1_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](W) writer structure"]
        impl crate::Writable for CCMR1_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Output to value 0"]
        impl crate::Resettable for CCMR1_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Input register accessor: an alias for `Reg<CCMR1_INPUT_SPEC>`"]
    pub type CCMR1_INPUT = crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>;
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Register `CCMR1_Input` reader"]
        pub struct R(crate::R<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Input` writer"]
        pub struct W(crate::W<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](index.html) module"]
        pub struct CCMR1_INPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_input::R](R) reader structure"]
        impl crate::Readable for CCMR1_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](W) writer structure"]
        impl crate::Writable for CCMR1_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Input to value 0"]
        impl crate::Resettable for CCMR1_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR2_Output register accessor: an alias for `Reg<CCMR2_OUTPUT_SPEC>`"]
    pub type CCMR2_OUTPUT = crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr2_output {
        #[doc = "Register `CCMR2_Output` reader"]
        pub struct R(crate::R<CCMR2_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR2_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR2_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR2_Output` writer"]
        pub struct W(crate::W<CCMR2_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR2_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR2_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_output](index.html) module"]
        pub struct CCMR2_OUTPUT_SPEC;
        impl crate::RegisterSpec for CCMR2_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr2_output::R](R) reader structure"]
        impl crate::Readable for CCMR2_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr2_output::W](W) writer structure"]
        impl crate::Writable for CCMR2_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR2_Output to value 0"]
        impl crate::Resettable for CCMR2_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR2_Input register accessor: an alias for `Reg<CCMR2_INPUT_SPEC>`"]
    pub type CCMR2_INPUT = crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC>;
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod ccmr2_input {
        #[doc = "Register `CCMR2_Input` reader"]
        pub struct R(crate::R<CCMR2_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR2_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR2_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR2_Input` writer"]
        pub struct W(crate::W<CCMR2_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR2_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR2_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_input](index.html) module"]
        pub struct CCMR2_INPUT_SPEC;
        impl crate::RegisterSpec for CCMR2_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr2_input::R](R) reader structure"]
        impl crate::Readable for CCMR2_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr2_input::W](W) writer structure"]
        impl crate::Writable for CCMR2_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR2_Input to value 0"]
        impl crate::Resettable for CCMR2_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCER register accessor: an alias for `Reg<CCER_SPEC>`"]
    pub type CCER = crate::Reg<ccer::CCER_SPEC>;
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Register `CCER` reader"]
        pub struct R(crate::R<CCER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCER` writer"]
        pub struct W(crate::W<CCER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](index.html) module"]
        pub struct CCER_SPEC;
        impl crate::RegisterSpec for CCER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccer::R](R) reader structure"]
        impl crate::Readable for CCER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccer::W](W) writer structure"]
        impl crate::Writable for CCER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCER to value 0"]
        impl crate::Resettable for CCER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNT register accessor: an alias for `Reg<CNT_SPEC>`"]
    pub type CNT = crate::Reg<cnt::CNT_SPEC>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub struct R(crate::R<CNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNT` writer"]
        pub struct W(crate::W<CNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](index.html) module"]
        pub struct CNT_SPEC;
        impl crate::RegisterSpec for CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnt::R](R) reader structure"]
        impl crate::Readable for CNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnt::W](W) writer structure"]
        impl crate::Writable for CNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSC register accessor: an alias for `Reg<PSC_SPEC>`"]
    pub type PSC = crate::Reg<psc::PSC_SPEC>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub struct R(crate::R<PSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSC` writer"]
        pub struct W(crate::W<PSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](index.html) module"]
        pub struct PSC_SPEC;
        impl crate::RegisterSpec for PSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [psc::R](R) reader structure"]
        impl crate::Readable for PSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [psc::W](W) writer structure"]
        impl crate::Writable for PSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ARR register accessor: an alias for `Reg<ARR_SPEC>`"]
    pub type ARR = crate::Reg<arr::ARR_SPEC>;
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Register `ARR` reader"]
        pub struct R(crate::R<ARR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ARR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ARR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ARR` writer"]
        pub struct W(crate::W<ARR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ARR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ARR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](index.html) module"]
        pub struct ARR_SPEC;
        impl crate::RegisterSpec for ARR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [arr::R](R) reader structure"]
        impl crate::Readable for ARR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [arr::W](W) writer structure"]
        impl crate::Writable for ARR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ARR to value 0"]
        impl crate::Resettable for ARR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RCR register accessor: an alias for `Reg<RCR_SPEC>`"]
    pub type RCR = crate::Reg<rcr::RCR_SPEC>;
    #[doc = "repetition counter register"]
    pub mod rcr {
        #[doc = "Register `RCR` reader"]
        pub struct R(crate::R<RCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RCR` writer"]
        pub struct W(crate::W<RCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](index.html) module"]
        pub struct RCR_SPEC;
        impl crate::RegisterSpec for RCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rcr::R](R) reader structure"]
        impl crate::Readable for RCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rcr::W](W) writer structure"]
        impl crate::Writable for RCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RCR to value 0"]
        impl crate::Resettable for RCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR1 register accessor: an alias for `Reg<CCR1_SPEC>`"]
    pub type CCR1 = crate::Reg<ccr1::CCR1_SPEC>;
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Register `CCR1` reader"]
        pub struct R(crate::R<CCR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR1` writer"]
        pub struct W(crate::W<CCR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](index.html) module"]
        pub struct CCR1_SPEC;
        impl crate::RegisterSpec for CCR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr1::R](R) reader structure"]
        impl crate::Readable for CCR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr1::W](W) writer structure"]
        impl crate::Writable for CCR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR1 to value 0"]
        impl crate::Resettable for CCR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR2 register accessor: an alias for `Reg<CCR2_SPEC>`"]
    pub type CCR2 = crate::Reg<ccr2::CCR2_SPEC>;
    #[doc = "capture/compare register 2"]
    pub mod ccr2 {
        #[doc = "Register `CCR2` reader"]
        pub struct R(crate::R<CCR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR2` writer"]
        pub struct W(crate::W<CCR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](index.html) module"]
        pub struct CCR2_SPEC;
        impl crate::RegisterSpec for CCR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr2::R](R) reader structure"]
        impl crate::Readable for CCR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr2::W](W) writer structure"]
        impl crate::Writable for CCR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR2 to value 0"]
        impl crate::Resettable for CCR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR3 register accessor: an alias for `Reg<CCR3_SPEC>`"]
    pub type CCR3 = crate::Reg<ccr3::CCR3_SPEC>;
    #[doc = "capture/compare register 3"]
    pub mod ccr3 {
        #[doc = "Register `CCR3` reader"]
        pub struct R(crate::R<CCR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR3` writer"]
        pub struct W(crate::W<CCR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr3](index.html) module"]
        pub struct CCR3_SPEC;
        impl crate::RegisterSpec for CCR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr3::R](R) reader structure"]
        impl crate::Readable for CCR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr3::W](W) writer structure"]
        impl crate::Writable for CCR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR3 to value 0"]
        impl crate::Resettable for CCR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR4 register accessor: an alias for `Reg<CCR4_SPEC>`"]
    pub type CCR4 = crate::Reg<ccr4::CCR4_SPEC>;
    #[doc = "capture/compare register 4"]
    pub mod ccr4 {
        #[doc = "Register `CCR4` reader"]
        pub struct R(crate::R<CCR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR4` writer"]
        pub struct W(crate::W<CCR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR4_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr4](index.html) module"]
        pub struct CCR4_SPEC;
        impl crate::RegisterSpec for CCR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr4::R](R) reader structure"]
        impl crate::Readable for CCR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr4::W](W) writer structure"]
        impl crate::Writable for CCR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR4 to value 0"]
        impl crate::Resettable for CCR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BDTR register accessor: an alias for `Reg<BDTR_SPEC>`"]
    pub type BDTR = crate::Reg<bdtr::BDTR_SPEC>;
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Register `BDTR` reader"]
        pub struct R(crate::R<BDTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BDTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BDTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BDTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BDTR` writer"]
        pub struct W(crate::W<BDTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BDTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BDTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BDTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](index.html) module"]
        pub struct BDTR_SPEC;
        impl crate::RegisterSpec for BDTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bdtr::R](R) reader structure"]
        impl crate::Readable for BDTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bdtr::W](W) writer structure"]
        impl crate::Writable for BDTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BDTR to value 0"]
        impl crate::Resettable for BDTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DCR register accessor: an alias for `Reg<DCR_SPEC>`"]
    pub type DCR = crate::Reg<dcr::DCR_SPEC>;
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Register `DCR` reader"]
        pub struct R(crate::R<DCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DCR` writer"]
        pub struct W(crate::W<DCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](index.html) module"]
        pub struct DCR_SPEC;
        impl crate::RegisterSpec for DCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dcr::R](R) reader structure"]
        impl crate::Readable for DCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dcr::W](W) writer structure"]
        impl crate::Writable for DCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DCR to value 0"]
        impl crate::Resettable for DCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAR register accessor: an alias for `Reg<DMAR_SPEC>`"]
    pub type DMAR = crate::Reg<dmar::DMAR_SPEC>;
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Register `DMAR` reader"]
        pub struct R(crate::R<DMAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAR` writer"]
        pub struct W(crate::W<DMAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](index.html) module"]
        pub struct DMAR_SPEC;
        impl crate::RegisterSpec for DMAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmar::R](R) reader structure"]
        impl crate::Readable for DMAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmar::W](W) writer structure"]
        impl crate::Writable for DMAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAR to value 0"]
        impl crate::Resettable for DMAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "AF1 register accessor: an alias for `Reg<AF1_SPEC>`"]
    pub type AF1 = crate::Reg<af1::AF1_SPEC>;
    #[doc = "Multiplex function selection"]
    pub mod af1 {
        #[doc = "Register `AF1` reader"]
        pub struct R(crate::R<AF1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<AF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<AF1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<AF1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `AF1` writer"]
        pub struct W(crate::W<AF1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<AF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<AF1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<AF1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Multiplex function selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [af1](index.html) module"]
        pub struct AF1_SPEC;
        impl crate::RegisterSpec for AF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [af1::R](R) reader structure"]
        impl crate::Readable for AF1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [af1::W](W) writer structure"]
        impl crate::Writable for AF1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets AF1 to value 0"]
        impl crate::Resettable for AF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TISEL register accessor: an alias for `Reg<TISEL_SPEC>`"]
    pub type TISEL = crate::Reg<tisel::TISEL_SPEC>;
    #[doc = "Input selection"]
    pub mod tisel {
        #[doc = "Register `TISEL` reader"]
        pub struct R(crate::R<TISEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TISEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TISEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TISEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TISEL` writer"]
        pub struct W(crate::W<TISEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TISEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TISEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TISEL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Input selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tisel](index.html) module"]
        pub struct TISEL_SPEC;
        impl crate::RegisterSpec for TISEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tisel::R](R) reader structure"]
        impl crate::Readable for TISEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tisel::W](W) writer structure"]
        impl crate::Writable for TISEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TISEL to value 0"]
        impl crate::Resettable for TISEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DBER register accessor: an alias for `Reg<DBER_SPEC>`"]
    pub type DBER = crate::Reg<dber::DBER_SPEC>;
    #[doc = "DMA request type selection"]
    pub mod dber {
        #[doc = "Register `DBER` reader"]
        pub struct R(crate::R<DBER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DBER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DBER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DBER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DBER` writer"]
        pub struct W(crate::W<DBER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DBER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DBER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DBER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA request type selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dber](index.html) module"]
        pub struct DBER_SPEC;
        impl crate::RegisterSpec for DBER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dber::R](R) reader structure"]
        impl crate::Readable for DBER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dber::W](W) writer structure"]
        impl crate::Writable for DBER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DBER to value 0"]
        impl crate::Resettable for DBER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "General-purpose timer"]
pub struct TIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2 {}
impl TIM2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM2 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
#[doc = "General-purpose timer"]
pub mod tim2 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        #[doc = "0x04 - control register 2"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: crate::Reg<smcr::SMCR_SPEC>,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: crate::Reg<dier::DIER_SPEC>,
        #[doc = "0x10 - status register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x14 - event generation register"]
        pub egr: crate::Reg<egr::EGR_SPEC>,
        _reserved_6_ccmr1: [u8; 0x04],
        _reserved_7_ccmr2: [u8; 0x04],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: crate::Reg<ccer::CCER_SPEC>,
        #[doc = "0x24 - counter"]
        pub cnt: crate::Reg<cnt::CNT_SPEC>,
        #[doc = "0x28 - prescaler"]
        pub psc: crate::Reg<psc::PSC_SPEC>,
        #[doc = "0x2c - auto-reload register"]
        pub arr: crate::Reg<arr::ARR_SPEC>,
        _reserved12: [u8; 0x04],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: crate::Reg<ccr1::CCR1_SPEC>,
        #[doc = "0x38 - capture/compare register 2"]
        pub ccr2: crate::Reg<ccr2::CCR2_SPEC>,
        #[doc = "0x3c - capture/compare register 3"]
        pub ccr3: crate::Reg<ccr3::CCR3_SPEC>,
        #[doc = "0x40 - capture/compare register 4"]
        pub ccr4: crate::Reg<ccr4::CCR4_SPEC>,
        _reserved16: [u8; 0x04],
        #[doc = "0x48 - DMA control register"]
        pub dcr: crate::Reg<dcr::DCR_SPEC>,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: crate::Reg<dmar::DMAR_SPEC>,
        _reserved18: [u8; 0x10],
        #[doc = "0x60 - Multiplex function selection"]
        pub af1: crate::Reg<af1::AF1_SPEC>,
        _reserved19: [u8; 0x04],
        #[doc = "0x68 - Input selection"]
        pub tisel: crate::Reg<tisel::TISEL_SPEC>,
        #[doc = "0x6c - DMA request type selection"]
        pub dber: crate::Reg<dber::DBER_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>)
            }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input(&self) -> &crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output(&self) -> &crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC>)
            }
        }
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SMCR register accessor: an alias for `Reg<SMCR_SPEC>`"]
    pub type SMCR = crate::Reg<smcr::SMCR_SPEC>;
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Register `SMCR` reader"]
        pub struct R(crate::R<SMCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SMCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SMCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SMCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SMCR` writer"]
        pub struct W(crate::W<SMCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SMCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SMCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SMCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](index.html) module"]
        pub struct SMCR_SPEC;
        impl crate::RegisterSpec for SMCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [smcr::R](R) reader structure"]
        impl crate::Readable for SMCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [smcr::W](W) writer structure"]
        impl crate::Writable for SMCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SMCR to value 0"]
        impl crate::Resettable for SMCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIER register accessor: an alias for `Reg<DIER_SPEC>`"]
    pub type DIER = crate::Reg<dier::DIER_SPEC>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Register `DIER` reader"]
        pub struct R(crate::R<DIER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIER` writer"]
        pub struct W(crate::W<DIER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](index.html) module"]
        pub struct DIER_SPEC;
        impl crate::RegisterSpec for DIER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dier::R](R) reader structure"]
        impl crate::Readable for DIER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dier::W](W) writer structure"]
        impl crate::Writable for DIER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIER to value 0"]
        impl crate::Resettable for DIER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EGR register accessor: an alias for `Reg<EGR_SPEC>`"]
    pub type EGR = crate::Reg<egr::EGR_SPEC>;
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Register `EGR` writer"]
        pub struct W(crate::W<EGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EGR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "event generation register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](index.html) module"]
        pub struct EGR_SPEC;
        impl crate::RegisterSpec for EGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [egr::W](W) writer structure"]
        impl crate::Writable for EGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EGR to value 0"]
        impl crate::Resettable for EGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Output register accessor: an alias for `Reg<CCMR1_OUTPUT_SPEC>`"]
    pub type CCMR1_OUTPUT = crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Register `CCMR1_Output` reader"]
        pub struct R(crate::R<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Output` writer"]
        pub struct W(crate::W<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](index.html) module"]
        pub struct CCMR1_OUTPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_output::R](R) reader structure"]
        impl crate::Readable for CCMR1_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](W) writer structure"]
        impl crate::Writable for CCMR1_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Output to value 0"]
        impl crate::Resettable for CCMR1_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Input register accessor: an alias for `Reg<CCMR1_INPUT_SPEC>`"]
    pub type CCMR1_INPUT = crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>;
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Register `CCMR1_Input` reader"]
        pub struct R(crate::R<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Input` writer"]
        pub struct W(crate::W<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](index.html) module"]
        pub struct CCMR1_INPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_input::R](R) reader structure"]
        impl crate::Readable for CCMR1_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](W) writer structure"]
        impl crate::Writable for CCMR1_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Input to value 0"]
        impl crate::Resettable for CCMR1_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR2_Output register accessor: an alias for `Reg<CCMR2_OUTPUT_SPEC>`"]
    pub type CCMR2_OUTPUT = crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr2_output {
        #[doc = "Register `CCMR2_Output` reader"]
        pub struct R(crate::R<CCMR2_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR2_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR2_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR2_Output` writer"]
        pub struct W(crate::W<CCMR2_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR2_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR2_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_output](index.html) module"]
        pub struct CCMR2_OUTPUT_SPEC;
        impl crate::RegisterSpec for CCMR2_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr2_output::R](R) reader structure"]
        impl crate::Readable for CCMR2_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr2_output::W](W) writer structure"]
        impl crate::Writable for CCMR2_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR2_Output to value 0"]
        impl crate::Resettable for CCMR2_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR2_Input register accessor: an alias for `Reg<CCMR2_INPUT_SPEC>`"]
    pub type CCMR2_INPUT = crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC>;
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod ccmr2_input {
        #[doc = "Register `CCMR2_Input` reader"]
        pub struct R(crate::R<CCMR2_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR2_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR2_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR2_Input` writer"]
        pub struct W(crate::W<CCMR2_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR2_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR2_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_input](index.html) module"]
        pub struct CCMR2_INPUT_SPEC;
        impl crate::RegisterSpec for CCMR2_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr2_input::R](R) reader structure"]
        impl crate::Readable for CCMR2_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr2_input::W](W) writer structure"]
        impl crate::Writable for CCMR2_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR2_Input to value 0"]
        impl crate::Resettable for CCMR2_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCER register accessor: an alias for `Reg<CCER_SPEC>`"]
    pub type CCER = crate::Reg<ccer::CCER_SPEC>;
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Register `CCER` reader"]
        pub struct R(crate::R<CCER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCER` writer"]
        pub struct W(crate::W<CCER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](index.html) module"]
        pub struct CCER_SPEC;
        impl crate::RegisterSpec for CCER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccer::R](R) reader structure"]
        impl crate::Readable for CCER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccer::W](W) writer structure"]
        impl crate::Writable for CCER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCER to value 0"]
        impl crate::Resettable for CCER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNT register accessor: an alias for `Reg<CNT_SPEC>`"]
    pub type CNT = crate::Reg<cnt::CNT_SPEC>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub struct R(crate::R<CNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNT` writer"]
        pub struct W(crate::W<CNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](index.html) module"]
        pub struct CNT_SPEC;
        impl crate::RegisterSpec for CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnt::R](R) reader structure"]
        impl crate::Readable for CNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnt::W](W) writer structure"]
        impl crate::Writable for CNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSC register accessor: an alias for `Reg<PSC_SPEC>`"]
    pub type PSC = crate::Reg<psc::PSC_SPEC>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub struct R(crate::R<PSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSC` writer"]
        pub struct W(crate::W<PSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](index.html) module"]
        pub struct PSC_SPEC;
        impl crate::RegisterSpec for PSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [psc::R](R) reader structure"]
        impl crate::Readable for PSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [psc::W](W) writer structure"]
        impl crate::Writable for PSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ARR register accessor: an alias for `Reg<ARR_SPEC>`"]
    pub type ARR = crate::Reg<arr::ARR_SPEC>;
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Register `ARR` reader"]
        pub struct R(crate::R<ARR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ARR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ARR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ARR` writer"]
        pub struct W(crate::W<ARR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ARR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ARR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](index.html) module"]
        pub struct ARR_SPEC;
        impl crate::RegisterSpec for ARR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [arr::R](R) reader structure"]
        impl crate::Readable for ARR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [arr::W](W) writer structure"]
        impl crate::Writable for ARR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ARR to value 0"]
        impl crate::Resettable for ARR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR1 register accessor: an alias for `Reg<CCR1_SPEC>`"]
    pub type CCR1 = crate::Reg<ccr1::CCR1_SPEC>;
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Register `CCR1` reader"]
        pub struct R(crate::R<CCR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR1` writer"]
        pub struct W(crate::W<CCR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](index.html) module"]
        pub struct CCR1_SPEC;
        impl crate::RegisterSpec for CCR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr1::R](R) reader structure"]
        impl crate::Readable for CCR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr1::W](W) writer structure"]
        impl crate::Writable for CCR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR1 to value 0"]
        impl crate::Resettable for CCR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR2 register accessor: an alias for `Reg<CCR2_SPEC>`"]
    pub type CCR2 = crate::Reg<ccr2::CCR2_SPEC>;
    #[doc = "capture/compare register 2"]
    pub mod ccr2 {
        #[doc = "Register `CCR2` reader"]
        pub struct R(crate::R<CCR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR2` writer"]
        pub struct W(crate::W<CCR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](index.html) module"]
        pub struct CCR2_SPEC;
        impl crate::RegisterSpec for CCR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr2::R](R) reader structure"]
        impl crate::Readable for CCR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr2::W](W) writer structure"]
        impl crate::Writable for CCR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR2 to value 0"]
        impl crate::Resettable for CCR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR3 register accessor: an alias for `Reg<CCR3_SPEC>`"]
    pub type CCR3 = crate::Reg<ccr3::CCR3_SPEC>;
    #[doc = "capture/compare register 3"]
    pub mod ccr3 {
        #[doc = "Register `CCR3` reader"]
        pub struct R(crate::R<CCR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR3` writer"]
        pub struct W(crate::W<CCR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr3](index.html) module"]
        pub struct CCR3_SPEC;
        impl crate::RegisterSpec for CCR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr3::R](R) reader structure"]
        impl crate::Readable for CCR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr3::W](W) writer structure"]
        impl crate::Writable for CCR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR3 to value 0"]
        impl crate::Resettable for CCR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR4 register accessor: an alias for `Reg<CCR4_SPEC>`"]
    pub type CCR4 = crate::Reg<ccr4::CCR4_SPEC>;
    #[doc = "capture/compare register 4"]
    pub mod ccr4 {
        #[doc = "Register `CCR4` reader"]
        pub struct R(crate::R<CCR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR4` writer"]
        pub struct W(crate::W<CCR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR4_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr4](index.html) module"]
        pub struct CCR4_SPEC;
        impl crate::RegisterSpec for CCR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr4::R](R) reader structure"]
        impl crate::Readable for CCR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr4::W](W) writer structure"]
        impl crate::Writable for CCR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR4 to value 0"]
        impl crate::Resettable for CCR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DCR register accessor: an alias for `Reg<DCR_SPEC>`"]
    pub type DCR = crate::Reg<dcr::DCR_SPEC>;
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Register `DCR` reader"]
        pub struct R(crate::R<DCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DCR` writer"]
        pub struct W(crate::W<DCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](index.html) module"]
        pub struct DCR_SPEC;
        impl crate::RegisterSpec for DCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dcr::R](R) reader structure"]
        impl crate::Readable for DCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dcr::W](W) writer structure"]
        impl crate::Writable for DCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DCR to value 0"]
        impl crate::Resettable for DCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAR register accessor: an alias for `Reg<DMAR_SPEC>`"]
    pub type DMAR = crate::Reg<dmar::DMAR_SPEC>;
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Register `DMAR` reader"]
        pub struct R(crate::R<DMAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAR` writer"]
        pub struct W(crate::W<DMAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](index.html) module"]
        pub struct DMAR_SPEC;
        impl crate::RegisterSpec for DMAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmar::R](R) reader structure"]
        impl crate::Readable for DMAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmar::W](W) writer structure"]
        impl crate::Writable for DMAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAR to value 0"]
        impl crate::Resettable for DMAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "AF1 register accessor: an alias for `Reg<AF1_SPEC>`"]
    pub type AF1 = crate::Reg<af1::AF1_SPEC>;
    #[doc = "Multiplex function selection"]
    pub mod af1 {
        #[doc = "Register `AF1` reader"]
        pub struct R(crate::R<AF1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<AF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<AF1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<AF1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `AF1` writer"]
        pub struct W(crate::W<AF1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<AF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<AF1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<AF1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Multiplex function selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [af1](index.html) module"]
        pub struct AF1_SPEC;
        impl crate::RegisterSpec for AF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [af1::R](R) reader structure"]
        impl crate::Readable for AF1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [af1::W](W) writer structure"]
        impl crate::Writable for AF1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets AF1 to value 0"]
        impl crate::Resettable for AF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TISEL register accessor: an alias for `Reg<TISEL_SPEC>`"]
    pub type TISEL = crate::Reg<tisel::TISEL_SPEC>;
    #[doc = "Input selection"]
    pub mod tisel {
        #[doc = "Register `TISEL` reader"]
        pub struct R(crate::R<TISEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TISEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TISEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TISEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TISEL` writer"]
        pub struct W(crate::W<TISEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TISEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TISEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TISEL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Input selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tisel](index.html) module"]
        pub struct TISEL_SPEC;
        impl crate::RegisterSpec for TISEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tisel::R](R) reader structure"]
        impl crate::Readable for TISEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tisel::W](W) writer structure"]
        impl crate::Writable for TISEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TISEL to value 0"]
        impl crate::Resettable for TISEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DBER register accessor: an alias for `Reg<DBER_SPEC>`"]
    pub type DBER = crate::Reg<dber::DBER_SPEC>;
    #[doc = "DMA request type selection"]
    pub mod dber {
        #[doc = "Register `DBER` reader"]
        pub struct R(crate::R<DBER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DBER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DBER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DBER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DBER` writer"]
        pub struct W(crate::W<DBER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DBER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DBER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DBER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA request type selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dber](index.html) module"]
        pub struct DBER_SPEC;
        impl crate::RegisterSpec for DBER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dber::R](R) reader structure"]
        impl crate::Readable for DBER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dber::W](W) writer structure"]
        impl crate::Writable for DBER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DBER to value 0"]
        impl crate::Resettable for DBER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "General-purpose timer"]
pub struct TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3 {}
impl TIM3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim3::RegisterBlock = 0x4000_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM3 {
    type Target = tim3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
#[doc = "General-purpose timer"]
pub mod tim3 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        #[doc = "0x04 - control register 2"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: crate::Reg<smcr::SMCR_SPEC>,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: crate::Reg<dier::DIER_SPEC>,
        #[doc = "0x10 - status register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x14 - event generation register"]
        pub egr: crate::Reg<egr::EGR_SPEC>,
        _reserved_6_ccmr1: [u8; 0x04],
        _reserved_7_ccmr2: [u8; 0x04],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: crate::Reg<ccer::CCER_SPEC>,
        #[doc = "0x24 - counter"]
        pub cnt: crate::Reg<cnt::CNT_SPEC>,
        #[doc = "0x28 - prescaler"]
        pub psc: crate::Reg<psc::PSC_SPEC>,
        #[doc = "0x2c - auto-reload register"]
        pub arr: crate::Reg<arr::ARR_SPEC>,
        #[doc = "0x30 - repetition counter register"]
        pub rcr: crate::Reg<rcr::RCR_SPEC>,
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: crate::Reg<ccr1::CCR1_SPEC>,
        #[doc = "0x38 - capture/compare register 2"]
        pub ccr2: crate::Reg<ccr2::CCR2_SPEC>,
        #[doc = "0x3c - capture/compare register 3"]
        pub ccr3: crate::Reg<ccr3::CCR3_SPEC>,
        #[doc = "0x40 - capture/compare register 4"]
        pub ccr4: crate::Reg<ccr4::CCR4_SPEC>,
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: crate::Reg<bdtr::BDTR_SPEC>,
        #[doc = "0x48 - DMA control register"]
        pub dcr: crate::Reg<dcr::DCR_SPEC>,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: crate::Reg<dmar::DMAR_SPEC>,
        _reserved20: [u8; 0x10],
        #[doc = "0x60 - Multiplex function selection"]
        pub af1: crate::Reg<af1::AF1_SPEC>,
        _reserved21: [u8; 0x04],
        #[doc = "0x68 - Input selection"]
        pub tisel: crate::Reg<tisel::TISEL_SPEC>,
        #[doc = "0x6c - DMA request type selection"]
        pub dber: crate::Reg<dber::DBER_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>)
            }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input(&self) -> &crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC>)
            }
        }
        #[doc = "0x1c - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output(&self) -> &crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC>)
            }
        }
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SMCR register accessor: an alias for `Reg<SMCR_SPEC>`"]
    pub type SMCR = crate::Reg<smcr::SMCR_SPEC>;
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Register `SMCR` reader"]
        pub struct R(crate::R<SMCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SMCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SMCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SMCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SMCR` writer"]
        pub struct W(crate::W<SMCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SMCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SMCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SMCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](index.html) module"]
        pub struct SMCR_SPEC;
        impl crate::RegisterSpec for SMCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [smcr::R](R) reader structure"]
        impl crate::Readable for SMCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [smcr::W](W) writer structure"]
        impl crate::Writable for SMCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SMCR to value 0"]
        impl crate::Resettable for SMCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIER register accessor: an alias for `Reg<DIER_SPEC>`"]
    pub type DIER = crate::Reg<dier::DIER_SPEC>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Register `DIER` reader"]
        pub struct R(crate::R<DIER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIER` writer"]
        pub struct W(crate::W<DIER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](index.html) module"]
        pub struct DIER_SPEC;
        impl crate::RegisterSpec for DIER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dier::R](R) reader structure"]
        impl crate::Readable for DIER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dier::W](W) writer structure"]
        impl crate::Writable for DIER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIER to value 0"]
        impl crate::Resettable for DIER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EGR register accessor: an alias for `Reg<EGR_SPEC>`"]
    pub type EGR = crate::Reg<egr::EGR_SPEC>;
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Register `EGR` writer"]
        pub struct W(crate::W<EGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EGR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "event generation register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](index.html) module"]
        pub struct EGR_SPEC;
        impl crate::RegisterSpec for EGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [egr::W](W) writer structure"]
        impl crate::Writable for EGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EGR to value 0"]
        impl crate::Resettable for EGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Output register accessor: an alias for `Reg<CCMR1_OUTPUT_SPEC>`"]
    pub type CCMR1_OUTPUT = crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Register `CCMR1_Output` reader"]
        pub struct R(crate::R<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Output` writer"]
        pub struct W(crate::W<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](index.html) module"]
        pub struct CCMR1_OUTPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_output::R](R) reader structure"]
        impl crate::Readable for CCMR1_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](W) writer structure"]
        impl crate::Writable for CCMR1_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Output to value 0"]
        impl crate::Resettable for CCMR1_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Input register accessor: an alias for `Reg<CCMR1_INPUT_SPEC>`"]
    pub type CCMR1_INPUT = crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>;
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Register `CCMR1_Input` reader"]
        pub struct R(crate::R<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Input` writer"]
        pub struct W(crate::W<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](index.html) module"]
        pub struct CCMR1_INPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_input::R](R) reader structure"]
        impl crate::Readable for CCMR1_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](W) writer structure"]
        impl crate::Writable for CCMR1_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Input to value 0"]
        impl crate::Resettable for CCMR1_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR2_Output register accessor: an alias for `Reg<CCMR2_OUTPUT_SPEC>`"]
    pub type CCMR2_OUTPUT = crate::Reg<ccmr2_output::CCMR2_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr2_output {
        #[doc = "Register `CCMR2_Output` reader"]
        pub struct R(crate::R<CCMR2_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR2_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR2_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR2_Output` writer"]
        pub struct W(crate::W<CCMR2_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR2_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR2_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR2_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_output](index.html) module"]
        pub struct CCMR2_OUTPUT_SPEC;
        impl crate::RegisterSpec for CCMR2_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr2_output::R](R) reader structure"]
        impl crate::Readable for CCMR2_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr2_output::W](W) writer structure"]
        impl crate::Writable for CCMR2_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR2_Output to value 0"]
        impl crate::Resettable for CCMR2_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR2_Input register accessor: an alias for `Reg<CCMR2_INPUT_SPEC>`"]
    pub type CCMR2_INPUT = crate::Reg<ccmr2_input::CCMR2_INPUT_SPEC>;
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod ccmr2_input {
        #[doc = "Register `CCMR2_Input` reader"]
        pub struct R(crate::R<CCMR2_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR2_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR2_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR2_Input` writer"]
        pub struct W(crate::W<CCMR2_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR2_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR2_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR2_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_input](index.html) module"]
        pub struct CCMR2_INPUT_SPEC;
        impl crate::RegisterSpec for CCMR2_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr2_input::R](R) reader structure"]
        impl crate::Readable for CCMR2_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr2_input::W](W) writer structure"]
        impl crate::Writable for CCMR2_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR2_Input to value 0"]
        impl crate::Resettable for CCMR2_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCER register accessor: an alias for `Reg<CCER_SPEC>`"]
    pub type CCER = crate::Reg<ccer::CCER_SPEC>;
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Register `CCER` reader"]
        pub struct R(crate::R<CCER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCER` writer"]
        pub struct W(crate::W<CCER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](index.html) module"]
        pub struct CCER_SPEC;
        impl crate::RegisterSpec for CCER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccer::R](R) reader structure"]
        impl crate::Readable for CCER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccer::W](W) writer structure"]
        impl crate::Writable for CCER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCER to value 0"]
        impl crate::Resettable for CCER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNT register accessor: an alias for `Reg<CNT_SPEC>`"]
    pub type CNT = crate::Reg<cnt::CNT_SPEC>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub struct R(crate::R<CNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNT` writer"]
        pub struct W(crate::W<CNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](index.html) module"]
        pub struct CNT_SPEC;
        impl crate::RegisterSpec for CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnt::R](R) reader structure"]
        impl crate::Readable for CNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnt::W](W) writer structure"]
        impl crate::Writable for CNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSC register accessor: an alias for `Reg<PSC_SPEC>`"]
    pub type PSC = crate::Reg<psc::PSC_SPEC>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub struct R(crate::R<PSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSC` writer"]
        pub struct W(crate::W<PSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](index.html) module"]
        pub struct PSC_SPEC;
        impl crate::RegisterSpec for PSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [psc::R](R) reader structure"]
        impl crate::Readable for PSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [psc::W](W) writer structure"]
        impl crate::Writable for PSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ARR register accessor: an alias for `Reg<ARR_SPEC>`"]
    pub type ARR = crate::Reg<arr::ARR_SPEC>;
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Register `ARR` reader"]
        pub struct R(crate::R<ARR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ARR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ARR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ARR` writer"]
        pub struct W(crate::W<ARR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ARR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ARR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](index.html) module"]
        pub struct ARR_SPEC;
        impl crate::RegisterSpec for ARR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [arr::R](R) reader structure"]
        impl crate::Readable for ARR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [arr::W](W) writer structure"]
        impl crate::Writable for ARR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ARR to value 0"]
        impl crate::Resettable for ARR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RCR register accessor: an alias for `Reg<RCR_SPEC>`"]
    pub type RCR = crate::Reg<rcr::RCR_SPEC>;
    #[doc = "repetition counter register"]
    pub mod rcr {
        #[doc = "Register `RCR` reader"]
        pub struct R(crate::R<RCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RCR` writer"]
        pub struct W(crate::W<RCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](index.html) module"]
        pub struct RCR_SPEC;
        impl crate::RegisterSpec for RCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rcr::R](R) reader structure"]
        impl crate::Readable for RCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rcr::W](W) writer structure"]
        impl crate::Writable for RCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RCR to value 0"]
        impl crate::Resettable for RCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR1 register accessor: an alias for `Reg<CCR1_SPEC>`"]
    pub type CCR1 = crate::Reg<ccr1::CCR1_SPEC>;
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Register `CCR1` reader"]
        pub struct R(crate::R<CCR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR1` writer"]
        pub struct W(crate::W<CCR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](index.html) module"]
        pub struct CCR1_SPEC;
        impl crate::RegisterSpec for CCR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr1::R](R) reader structure"]
        impl crate::Readable for CCR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr1::W](W) writer structure"]
        impl crate::Writable for CCR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR1 to value 0"]
        impl crate::Resettable for CCR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR2 register accessor: an alias for `Reg<CCR2_SPEC>`"]
    pub type CCR2 = crate::Reg<ccr2::CCR2_SPEC>;
    #[doc = "capture/compare register 2"]
    pub mod ccr2 {
        #[doc = "Register `CCR2` reader"]
        pub struct R(crate::R<CCR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR2` writer"]
        pub struct W(crate::W<CCR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](index.html) module"]
        pub struct CCR2_SPEC;
        impl crate::RegisterSpec for CCR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr2::R](R) reader structure"]
        impl crate::Readable for CCR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr2::W](W) writer structure"]
        impl crate::Writable for CCR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR2 to value 0"]
        impl crate::Resettable for CCR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR3 register accessor: an alias for `Reg<CCR3_SPEC>`"]
    pub type CCR3 = crate::Reg<ccr3::CCR3_SPEC>;
    #[doc = "capture/compare register 3"]
    pub mod ccr3 {
        #[doc = "Register `CCR3` reader"]
        pub struct R(crate::R<CCR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR3` writer"]
        pub struct W(crate::W<CCR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr3](index.html) module"]
        pub struct CCR3_SPEC;
        impl crate::RegisterSpec for CCR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr3::R](R) reader structure"]
        impl crate::Readable for CCR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr3::W](W) writer structure"]
        impl crate::Writable for CCR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR3 to value 0"]
        impl crate::Resettable for CCR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR4 register accessor: an alias for `Reg<CCR4_SPEC>`"]
    pub type CCR4 = crate::Reg<ccr4::CCR4_SPEC>;
    #[doc = "capture/compare register 4"]
    pub mod ccr4 {
        #[doc = "Register `CCR4` reader"]
        pub struct R(crate::R<CCR4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR4` writer"]
        pub struct W(crate::W<CCR4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR4_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr4](index.html) module"]
        pub struct CCR4_SPEC;
        impl crate::RegisterSpec for CCR4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr4::R](R) reader structure"]
        impl crate::Readable for CCR4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr4::W](W) writer structure"]
        impl crate::Writable for CCR4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR4 to value 0"]
        impl crate::Resettable for CCR4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BDTR register accessor: an alias for `Reg<BDTR_SPEC>`"]
    pub type BDTR = crate::Reg<bdtr::BDTR_SPEC>;
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Register `BDTR` reader"]
        pub struct R(crate::R<BDTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BDTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BDTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BDTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BDTR` writer"]
        pub struct W(crate::W<BDTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BDTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BDTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BDTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](index.html) module"]
        pub struct BDTR_SPEC;
        impl crate::RegisterSpec for BDTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bdtr::R](R) reader structure"]
        impl crate::Readable for BDTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bdtr::W](W) writer structure"]
        impl crate::Writable for BDTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BDTR to value 0"]
        impl crate::Resettable for BDTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DCR register accessor: an alias for `Reg<DCR_SPEC>`"]
    pub type DCR = crate::Reg<dcr::DCR_SPEC>;
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Register `DCR` reader"]
        pub struct R(crate::R<DCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DCR` writer"]
        pub struct W(crate::W<DCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](index.html) module"]
        pub struct DCR_SPEC;
        impl crate::RegisterSpec for DCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dcr::R](R) reader structure"]
        impl crate::Readable for DCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dcr::W](W) writer structure"]
        impl crate::Writable for DCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DCR to value 0"]
        impl crate::Resettable for DCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAR register accessor: an alias for `Reg<DMAR_SPEC>`"]
    pub type DMAR = crate::Reg<dmar::DMAR_SPEC>;
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Register `DMAR` reader"]
        pub struct R(crate::R<DMAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAR` writer"]
        pub struct W(crate::W<DMAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](index.html) module"]
        pub struct DMAR_SPEC;
        impl crate::RegisterSpec for DMAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmar::R](R) reader structure"]
        impl crate::Readable for DMAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmar::W](W) writer structure"]
        impl crate::Writable for DMAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAR to value 0"]
        impl crate::Resettable for DMAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "AF1 register accessor: an alias for `Reg<AF1_SPEC>`"]
    pub type AF1 = crate::Reg<af1::AF1_SPEC>;
    #[doc = "Multiplex function selection"]
    pub mod af1 {
        #[doc = "Register `AF1` reader"]
        pub struct R(crate::R<AF1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<AF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<AF1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<AF1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `AF1` writer"]
        pub struct W(crate::W<AF1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<AF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<AF1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<AF1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Multiplex function selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [af1](index.html) module"]
        pub struct AF1_SPEC;
        impl crate::RegisterSpec for AF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [af1::R](R) reader structure"]
        impl crate::Readable for AF1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [af1::W](W) writer structure"]
        impl crate::Writable for AF1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets AF1 to value 0"]
        impl crate::Resettable for AF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TISEL register accessor: an alias for `Reg<TISEL_SPEC>`"]
    pub type TISEL = crate::Reg<tisel::TISEL_SPEC>;
    #[doc = "Input selection"]
    pub mod tisel {
        #[doc = "Register `TISEL` reader"]
        pub struct R(crate::R<TISEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TISEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TISEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TISEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TISEL` writer"]
        pub struct W(crate::W<TISEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TISEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TISEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TISEL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Input selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tisel](index.html) module"]
        pub struct TISEL_SPEC;
        impl crate::RegisterSpec for TISEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tisel::R](R) reader structure"]
        impl crate::Readable for TISEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tisel::W](W) writer structure"]
        impl crate::Writable for TISEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TISEL to value 0"]
        impl crate::Resettable for TISEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DBER register accessor: an alias for `Reg<DBER_SPEC>`"]
    pub type DBER = crate::Reg<dber::DBER_SPEC>;
    #[doc = "DMA request type selection"]
    pub mod dber {
        #[doc = "Register `DBER` reader"]
        pub struct R(crate::R<DBER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DBER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DBER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DBER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DBER` writer"]
        pub struct W(crate::W<DBER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DBER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DBER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DBER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA request type selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dber](index.html) module"]
        pub struct DBER_SPEC;
        impl crate::RegisterSpec for DBER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dber::R](R) reader structure"]
        impl crate::Readable for DBER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dber::W](W) writer structure"]
        impl crate::Writable for DBER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DBER to value 0"]
        impl crate::Resettable for DBER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "General-purpose timer"]
pub struct TIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM4 {}
impl TIM4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim3::RegisterBlock = 0x4000_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM4 {
    type Target = tim3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
#[doc = "General-purpose timer"]
pub use tim3 as tim4;
#[doc = "Basic timer"]
pub struct TIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM6 {}
impl TIM6 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim6::RegisterBlock = 0x4000_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM6 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
#[doc = "Basic timer"]
pub mod tim6 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        _reserved1: [u8; 0x04],
        #[doc = "0x08 - slave mode control register"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: crate::Reg<dier::DIER_SPEC>,
        #[doc = "0x10 - status register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x14 - event generation register"]
        pub egr: crate::Reg<egr::EGR_SPEC>,
        _reserved5: [u8; 0x0c],
        #[doc = "0x24 - counter"]
        pub cnt: crate::Reg<cnt::CNT_SPEC>,
        #[doc = "0x28 - prescaler"]
        pub psc: crate::Reg<psc::PSC_SPEC>,
        #[doc = "0x2c - auto-reload register"]
        pub arr: crate::Reg<arr::ARR_SPEC>,
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ARPE` reader - Allowed reload"]
        pub type ARPE_R = crate::BitReader<bool>;
        #[doc = "Field `ARPE` writer - Allowed reload"]
        pub type ARPE_W<'a> = crate::BitWriter<'a, u32, CR1_SPEC, bool, 7>;
        #[doc = "Field `OPM` reader - "]
        pub type OPM_R = crate::BitReader<bool>;
        #[doc = "Field `OPM` writer - "]
        pub type OPM_W<'a> = crate::BitWriter<'a, u32, CR1_SPEC, bool, 3>;
        #[doc = "Field `URS` reader - "]
        pub type URS_R = crate::BitReader<bool>;
        #[doc = "Field `URS` writer - "]
        pub type URS_W<'a> = crate::BitWriter<'a, u32, CR1_SPEC, bool, 2>;
        #[doc = "Field `UDIS` reader - "]
        pub type UDIS_R = crate::BitReader<bool>;
        #[doc = "Field `UDIS` writer - "]
        pub type UDIS_W<'a> = crate::BitWriter<'a, u32, CR1_SPEC, bool, 1>;
        #[doc = "Field `CEN` reader - "]
        pub type CEN_R = crate::BitReader<bool>;
        #[doc = "Field `CEN` writer - "]
        pub type CEN_W<'a> = crate::BitWriter<'a, u32, CR1_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 7 - Allowed reload"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Allowed reload"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W::new(self)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W::new(self)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W::new(self)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "slave mode control register"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MMS` reader - "]
        pub type MMS_R = crate::FieldReader<u8, u8>;
        #[doc = "Field `MMS` writer - "]
        pub type MMS_W<'a> = crate::FieldWriter<'a, u32, CR2_SPEC, u8, u8, 3, 4>;
        impl R {
            #[doc = "Bits 4:6"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:6"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIER register accessor: an alias for `Reg<DIER_SPEC>`"]
    pub type DIER = crate::Reg<dier::DIER_SPEC>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Register `DIER` reader"]
        pub struct R(crate::R<DIER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIER` writer"]
        pub struct W(crate::W<DIER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIER_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `UDE` reader - "]
        pub type UDE_R = crate::BitReader<bool>;
        #[doc = "Field `UDE` writer - "]
        pub type UDE_W<'a> = crate::BitWriter<'a, u32, DIER_SPEC, bool, 8>;
        #[doc = "Field `UIE` reader - "]
        pub type UIE_R = crate::BitReader<bool>;
        #[doc = "Field `UIE` writer - "]
        pub type UIE_W<'a> = crate::BitWriter<'a, u32, DIER_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W::new(self)
            }
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](index.html) module"]
        pub struct DIER_SPEC;
        impl crate::RegisterSpec for DIER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dier::R](R) reader structure"]
        impl crate::Readable for DIER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dier::W](W) writer structure"]
        impl crate::Writable for DIER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIER to value 0"]
        impl crate::Resettable for DIER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `UIF` reader - "]
        pub type UIF_R = crate::BitReader<bool>;
        #[doc = "Field `UIF` writer - "]
        pub type UIF_W<'a> = crate::BitWriter<'a, u32, SR_SPEC, bool, 0>;
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EGR register accessor: an alias for `Reg<EGR_SPEC>`"]
    pub type EGR = crate::Reg<egr::EGR_SPEC>;
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Register `EGR` writer"]
        pub struct W(crate::W<EGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EGR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `UG` writer - "]
        pub type UG_W<'a> = crate::BitWriter<'a, u32, EGR_SPEC, bool, 0>;
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "event generation register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](index.html) module"]
        pub struct EGR_SPEC;
        impl crate::RegisterSpec for EGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [egr::W](W) writer structure"]
        impl crate::Writable for EGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EGR to value 0"]
        impl crate::Resettable for EGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNT register accessor: an alias for `Reg<CNT_SPEC>`"]
    pub type CNT = crate::Reg<cnt::CNT_SPEC>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub struct R(crate::R<CNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNT` writer"]
        pub struct W(crate::W<CNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CNT` reader - "]
        pub type CNT_R = crate::FieldReader<u16, u16>;
        #[doc = "Field `CNT` writer - "]
        pub type CNT_W<'a> = crate::FieldWriter<'a, u32, CNT_SPEC, u16, u16, 16, 0>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](index.html) module"]
        pub struct CNT_SPEC;
        impl crate::RegisterSpec for CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnt::R](R) reader structure"]
        impl crate::Readable for CNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnt::W](W) writer structure"]
        impl crate::Writable for CNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSC register accessor: an alias for `Reg<PSC_SPEC>`"]
    pub type PSC = crate::Reg<psc::PSC_SPEC>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub struct R(crate::R<PSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSC` writer"]
        pub struct W(crate::W<PSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PSC` reader - "]
        pub type PSC_R = crate::FieldReader<u16, u16>;
        #[doc = "Field `PSC` writer - "]
        pub type PSC_W<'a> = crate::FieldWriter<'a, u32, PSC_SPEC, u16, u16, 16, 0>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](index.html) module"]
        pub struct PSC_SPEC;
        impl crate::RegisterSpec for PSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [psc::R](R) reader structure"]
        impl crate::Readable for PSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [psc::W](W) writer structure"]
        impl crate::Writable for PSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ARR register accessor: an alias for `Reg<ARR_SPEC>`"]
    pub type ARR = crate::Reg<arr::ARR_SPEC>;
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Register `ARR` reader"]
        pub struct R(crate::R<ARR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ARR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ARR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ARR` writer"]
        pub struct W(crate::W<ARR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ARR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ARR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ARR` reader - "]
        pub type ARR_R = crate::FieldReader<u16, u16>;
        #[doc = "Field `ARR` writer - "]
        pub type ARR_W<'a> = crate::FieldWriter<'a, u32, ARR_SPEC, u16, u16, 16, 0>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W::new(self)
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](index.html) module"]
        pub struct ARR_SPEC;
        impl crate::RegisterSpec for ARR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [arr::R](R) reader structure"]
        impl crate::Readable for ARR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [arr::W](W) writer structure"]
        impl crate::Writable for ARR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ARR to value 0"]
        impl crate::Resettable for ARR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Basic timer"]
pub struct TIM7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM7 {}
impl TIM7 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim6::RegisterBlock = 0x4000_1400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM7 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
#[doc = "Basic timer"]
pub use tim6 as tim7;
#[doc = "General-purpose timer"]
pub struct TIM14 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM14 {}
impl TIM14 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim14::RegisterBlock = 0x4000_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim14::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM14 {
    type Target = tim14::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM14").finish()
    }
}
#[doc = "General-purpose timer"]
pub mod tim14 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        _reserved1: [u8; 0x08],
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: crate::Reg<dier::DIER_SPEC>,
        #[doc = "0x10 - status register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x14 - event generation register"]
        pub egr: crate::Reg<egr::EGR_SPEC>,
        _reserved_4_ccmr1: [u8; 0x04],
        _reserved5: [u8; 0x04],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: crate::Reg<ccer::CCER_SPEC>,
        #[doc = "0x24 - counter"]
        pub cnt: crate::Reg<cnt::CNT_SPEC>,
        #[doc = "0x28 - prescaler"]
        pub psc: crate::Reg<psc::PSC_SPEC>,
        #[doc = "0x2c - auto-reload register"]
        pub arr: crate::Reg<arr::ARR_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>)
            }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>)
            }
        }
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIER register accessor: an alias for `Reg<DIER_SPEC>`"]
    pub type DIER = crate::Reg<dier::DIER_SPEC>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Register `DIER` reader"]
        pub struct R(crate::R<DIER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIER` writer"]
        pub struct W(crate::W<DIER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](index.html) module"]
        pub struct DIER_SPEC;
        impl crate::RegisterSpec for DIER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dier::R](R) reader structure"]
        impl crate::Readable for DIER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dier::W](W) writer structure"]
        impl crate::Writable for DIER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIER to value 0"]
        impl crate::Resettable for DIER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EGR register accessor: an alias for `Reg<EGR_SPEC>`"]
    pub type EGR = crate::Reg<egr::EGR_SPEC>;
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Register `EGR` writer"]
        pub struct W(crate::W<EGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EGR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "event generation register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](index.html) module"]
        pub struct EGR_SPEC;
        impl crate::RegisterSpec for EGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [egr::W](W) writer structure"]
        impl crate::Writable for EGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EGR to value 0"]
        impl crate::Resettable for EGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Output register accessor: an alias for `Reg<CCMR1_OUTPUT_SPEC>`"]
    pub type CCMR1_OUTPUT = crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Register `CCMR1_Output` reader"]
        pub struct R(crate::R<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Output` writer"]
        pub struct W(crate::W<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](index.html) module"]
        pub struct CCMR1_OUTPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_output::R](R) reader structure"]
        impl crate::Readable for CCMR1_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](W) writer structure"]
        impl crate::Writable for CCMR1_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Output to value 0"]
        impl crate::Resettable for CCMR1_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Input register accessor: an alias for `Reg<CCMR1_INPUT_SPEC>`"]
    pub type CCMR1_INPUT = crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>;
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Register `CCMR1_Input` reader"]
        pub struct R(crate::R<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Input` writer"]
        pub struct W(crate::W<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](index.html) module"]
        pub struct CCMR1_INPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_input::R](R) reader structure"]
        impl crate::Readable for CCMR1_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](W) writer structure"]
        impl crate::Writable for CCMR1_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Input to value 0"]
        impl crate::Resettable for CCMR1_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCER register accessor: an alias for `Reg<CCER_SPEC>`"]
    pub type CCER = crate::Reg<ccer::CCER_SPEC>;
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Register `CCER` reader"]
        pub struct R(crate::R<CCER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCER` writer"]
        pub struct W(crate::W<CCER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](index.html) module"]
        pub struct CCER_SPEC;
        impl crate::RegisterSpec for CCER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccer::R](R) reader structure"]
        impl crate::Readable for CCER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccer::W](W) writer structure"]
        impl crate::Writable for CCER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCER to value 0"]
        impl crate::Resettable for CCER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNT register accessor: an alias for `Reg<CNT_SPEC>`"]
    pub type CNT = crate::Reg<cnt::CNT_SPEC>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub struct R(crate::R<CNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNT` writer"]
        pub struct W(crate::W<CNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](index.html) module"]
        pub struct CNT_SPEC;
        impl crate::RegisterSpec for CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnt::R](R) reader structure"]
        impl crate::Readable for CNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnt::W](W) writer structure"]
        impl crate::Writable for CNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSC register accessor: an alias for `Reg<PSC_SPEC>`"]
    pub type PSC = crate::Reg<psc::PSC_SPEC>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub struct R(crate::R<PSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSC` writer"]
        pub struct W(crate::W<PSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](index.html) module"]
        pub struct PSC_SPEC;
        impl crate::RegisterSpec for PSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [psc::R](R) reader structure"]
        impl crate::Readable for PSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [psc::W](W) writer structure"]
        impl crate::Writable for PSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ARR register accessor: an alias for `Reg<ARR_SPEC>`"]
    pub type ARR = crate::Reg<arr::ARR_SPEC>;
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Register `ARR` reader"]
        pub struct R(crate::R<ARR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ARR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ARR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ARR` writer"]
        pub struct W(crate::W<ARR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ARR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ARR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](index.html) module"]
        pub struct ARR_SPEC;
        impl crate::RegisterSpec for ARR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [arr::R](R) reader structure"]
        impl crate::Readable for ARR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [arr::W](W) writer structure"]
        impl crate::Writable for ARR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ARR to value 0"]
        impl crate::Resettable for ARR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "General-purpose timer"]
pub struct TIM15 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM15 {}
impl TIM15 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim15::RegisterBlock = 0x4001_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim15::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM15 {
    type Target = tim15::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15").finish()
    }
}
#[doc = "General-purpose timer"]
pub mod tim15 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        #[doc = "0x04 - control register 2"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: crate::Reg<smcr::SMCR_SPEC>,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: crate::Reg<dier::DIER_SPEC>,
        #[doc = "0x10 - status register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x14 - event generation register"]
        pub egr: crate::Reg<egr::EGR_SPEC>,
        _reserved_6_ccmr1: [u8; 0x04],
        _reserved7: [u8; 0x04],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: crate::Reg<ccer::CCER_SPEC>,
        #[doc = "0x24 - counter"]
        pub cnt: crate::Reg<cnt::CNT_SPEC>,
        #[doc = "0x28 - prescaler"]
        pub psc: crate::Reg<psc::PSC_SPEC>,
        #[doc = "0x2c - auto-reload register"]
        pub arr: crate::Reg<arr::ARR_SPEC>,
        #[doc = "0x30 - repetition counter register"]
        pub rcr: crate::Reg<rcr::RCR_SPEC>,
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: crate::Reg<ccr1::CCR1_SPEC>,
        #[doc = "0x38 - capture/compare register 2"]
        pub ccr2: crate::Reg<ccr2::CCR2_SPEC>,
        _reserved14: [u8; 0x08],
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: crate::Reg<bdtr::BDTR_SPEC>,
        #[doc = "0x48 - DMA control register"]
        pub dcr: crate::Reg<dcr::DCR_SPEC>,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: crate::Reg<dmar::DMAR_SPEC>,
        _reserved17: [u8; 0x10],
        #[doc = "0x60 - Multiplex function selection"]
        pub af1: crate::Reg<af1::AF1_SPEC>,
        _reserved18: [u8; 0x04],
        #[doc = "0x68 - Input selection"]
        pub tisel: crate::Reg<tisel::TISEL_SPEC>,
        #[doc = "0x6c - DMA request type selection"]
        pub dber: crate::Reg<dber::DBER_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>)
            }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(24usize)
                    as *const crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>)
            }
        }
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SMCR register accessor: an alias for `Reg<SMCR_SPEC>`"]
    pub type SMCR = crate::Reg<smcr::SMCR_SPEC>;
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Register `SMCR` reader"]
        pub struct R(crate::R<SMCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SMCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SMCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SMCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SMCR` writer"]
        pub struct W(crate::W<SMCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SMCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SMCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SMCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](index.html) module"]
        pub struct SMCR_SPEC;
        impl crate::RegisterSpec for SMCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [smcr::R](R) reader structure"]
        impl crate::Readable for SMCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [smcr::W](W) writer structure"]
        impl crate::Writable for SMCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SMCR to value 0"]
        impl crate::Resettable for SMCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIER register accessor: an alias for `Reg<DIER_SPEC>`"]
    pub type DIER = crate::Reg<dier::DIER_SPEC>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Register `DIER` reader"]
        pub struct R(crate::R<DIER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIER` writer"]
        pub struct W(crate::W<DIER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](index.html) module"]
        pub struct DIER_SPEC;
        impl crate::RegisterSpec for DIER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dier::R](R) reader structure"]
        impl crate::Readable for DIER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dier::W](W) writer structure"]
        impl crate::Writable for DIER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIER to value 0"]
        impl crate::Resettable for DIER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SR` writer"]
        pub struct W(crate::W<SR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sr::W](W) writer structure"]
        impl crate::Writable for SR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EGR register accessor: an alias for `Reg<EGR_SPEC>`"]
    pub type EGR = crate::Reg<egr::EGR_SPEC>;
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Register `EGR` writer"]
        pub struct W(crate::W<EGR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EGR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EGR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EGR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "event generation register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](index.html) module"]
        pub struct EGR_SPEC;
        impl crate::RegisterSpec for EGR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [egr::W](W) writer structure"]
        impl crate::Writable for EGR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EGR to value 0"]
        impl crate::Resettable for EGR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Output register accessor: an alias for `Reg<CCMR1_OUTPUT_SPEC>`"]
    pub type CCMR1_OUTPUT = crate::Reg<ccmr1_output::CCMR1_OUTPUT_SPEC>;
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Register `CCMR1_Output` reader"]
        pub struct R(crate::R<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_OUTPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_OUTPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Output` writer"]
        pub struct W(crate::W<CCMR1_OUTPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_OUTPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_OUTPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_OUTPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](index.html) module"]
        pub struct CCMR1_OUTPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_OUTPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_output::R](R) reader structure"]
        impl crate::Readable for CCMR1_OUTPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](W) writer structure"]
        impl crate::Writable for CCMR1_OUTPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Output to value 0"]
        impl crate::Resettable for CCMR1_OUTPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCMR1_Input register accessor: an alias for `Reg<CCMR1_INPUT_SPEC>`"]
    pub type CCMR1_INPUT = crate::Reg<ccmr1_input::CCMR1_INPUT_SPEC>;
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Register `CCMR1_Input` reader"]
        pub struct R(crate::R<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCMR1_INPUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCMR1_INPUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCMR1_Input` writer"]
        pub struct W(crate::W<CCMR1_INPUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCMR1_INPUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCMR1_INPUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCMR1_INPUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](index.html) module"]
        pub struct CCMR1_INPUT_SPEC;
        impl crate::RegisterSpec for CCMR1_INPUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccmr1_input::R](R) reader structure"]
        impl crate::Readable for CCMR1_INPUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](W) writer structure"]
        impl crate::Writable for CCMR1_INPUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCMR1_Input to value 0"]
        impl crate::Resettable for CCMR1_INPUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCER register accessor: an alias for `Reg<CCER_SPEC>`"]
    pub type CCER = crate::Reg<ccer::CCER_SPEC>;
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Register `CCER` reader"]
        pub struct R(crate::R<CCER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCER` writer"]
        pub struct W(crate::W<CCER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](index.html) module"]
        pub struct CCER_SPEC;
        impl crate::RegisterSpec for CCER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccer::R](R) reader structure"]
        impl crate::Readable for CCER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccer::W](W) writer structure"]
        impl crate::Writable for CCER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCER to value 0"]
        impl crate::Resettable for CCER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNT register accessor: an alias for `Reg<CNT_SPEC>`"]
    pub type CNT = crate::Reg<cnt::CNT_SPEC>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub struct R(crate::R<CNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNT` writer"]
        pub struct W(crate::W<CNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](index.html) module"]
        pub struct CNT_SPEC;
        impl crate::RegisterSpec for CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cnt::R](R) reader structure"]
        impl crate::Readable for CNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cnt::W](W) writer structure"]
        impl crate::Writable for CNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PSC register accessor: an alias for `Reg<PSC_SPEC>`"]
    pub type PSC = crate::Reg<psc::PSC_SPEC>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub struct R(crate::R<PSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PSC` writer"]
        pub struct W(crate::W<PSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PSC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](index.html) module"]
        pub struct PSC_SPEC;
        impl crate::RegisterSpec for PSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [psc::R](R) reader structure"]
        impl crate::Readable for PSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [psc::W](W) writer structure"]
        impl crate::Writable for PSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ARR register accessor: an alias for `Reg<ARR_SPEC>`"]
    pub type ARR = crate::Reg<arr::ARR_SPEC>;
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Register `ARR` reader"]
        pub struct R(crate::R<ARR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ARR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ARR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ARR` writer"]
        pub struct W(crate::W<ARR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ARR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ARR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ARR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](index.html) module"]
        pub struct ARR_SPEC;
        impl crate::RegisterSpec for ARR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [arr::R](R) reader structure"]
        impl crate::Readable for ARR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [arr::W](W) writer structure"]
        impl crate::Writable for ARR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ARR to value 0"]
        impl crate::Resettable for ARR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RCR register accessor: an alias for `Reg<RCR_SPEC>`"]
    pub type RCR = crate::Reg<rcr::RCR_SPEC>;
    #[doc = "repetition counter register"]
    pub mod rcr {
        #[doc = "Register `RCR` reader"]
        pub struct R(crate::R<RCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RCR` writer"]
        pub struct W(crate::W<RCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](index.html) module"]
        pub struct RCR_SPEC;
        impl crate::RegisterSpec for RCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rcr::R](R) reader structure"]
        impl crate::Readable for RCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rcr::W](W) writer structure"]
        impl crate::Writable for RCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RCR to value 0"]
        impl crate::Resettable for RCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR1 register accessor: an alias for `Reg<CCR1_SPEC>`"]
    pub type CCR1 = crate::Reg<ccr1::CCR1_SPEC>;
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Register `CCR1` reader"]
        pub struct R(crate::R<CCR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR1` writer"]
        pub struct W(crate::W<CCR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](index.html) module"]
        pub struct CCR1_SPEC;
        impl crate::RegisterSpec for CCR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr1::R](R) reader structure"]
        impl crate::Readable for CCR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr1::W](W) writer structure"]
        impl crate::Writable for CCR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR1 to value 0"]
        impl crate::Resettable for CCR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CCR2 register accessor: an alias for `Reg<CCR2_SPEC>`"]
    pub type CCR2 = crate::Reg<ccr2::CCR2_SPEC>;
    #[doc = "capture/compare register 2"]
    pub mod ccr2 {
        #[doc = "Register `CCR2` reader"]
        pub struct R(crate::R<CCR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CCR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CCR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CCR2` writer"]
        pub struct W(crate::W<CCR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CCR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CCR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CCR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](index.html) module"]
        pub struct CCR2_SPEC;
        impl crate::RegisterSpec for CCR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ccr2::R](R) reader structure"]
        impl crate::Readable for CCR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ccr2::W](W) writer structure"]
        impl crate::Writable for CCR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CCR2 to value 0"]
        impl crate::Resettable for CCR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BDTR register accessor: an alias for `Reg<BDTR_SPEC>`"]
    pub type BDTR = crate::Reg<bdtr::BDTR_SPEC>;
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Register `BDTR` reader"]
        pub struct R(crate::R<BDTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BDTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BDTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BDTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BDTR` writer"]
        pub struct W(crate::W<BDTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BDTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BDTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BDTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](index.html) module"]
        pub struct BDTR_SPEC;
        impl crate::RegisterSpec for BDTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bdtr::R](R) reader structure"]
        impl crate::Readable for BDTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bdtr::W](W) writer structure"]
        impl crate::Writable for BDTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BDTR to value 0"]
        impl crate::Resettable for BDTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DCR register accessor: an alias for `Reg<DCR_SPEC>`"]
    pub type DCR = crate::Reg<dcr::DCR_SPEC>;
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Register `DCR` reader"]
        pub struct R(crate::R<DCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DCR` writer"]
        pub struct W(crate::W<DCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DCR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](index.html) module"]
        pub struct DCR_SPEC;
        impl crate::RegisterSpec for DCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dcr::R](R) reader structure"]
        impl crate::Readable for DCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dcr::W](W) writer structure"]
        impl crate::Writable for DCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DCR to value 0"]
        impl crate::Resettable for DCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAR register accessor: an alias for `Reg<DMAR_SPEC>`"]
    pub type DMAR = crate::Reg<dmar::DMAR_SPEC>;
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Register `DMAR` reader"]
        pub struct R(crate::R<DMAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAR` writer"]
        pub struct W(crate::W<DMAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](index.html) module"]
        pub struct DMAR_SPEC;
        impl crate::RegisterSpec for DMAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmar::R](R) reader structure"]
        impl crate::Readable for DMAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmar::W](W) writer structure"]
        impl crate::Writable for DMAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAR to value 0"]
        impl crate::Resettable for DMAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "AF1 register accessor: an alias for `Reg<AF1_SPEC>`"]
    pub type AF1 = crate::Reg<af1::AF1_SPEC>;
    #[doc = "Multiplex function selection"]
    pub mod af1 {
        #[doc = "Register `AF1` reader"]
        pub struct R(crate::R<AF1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<AF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<AF1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<AF1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `AF1` writer"]
        pub struct W(crate::W<AF1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<AF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<AF1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<AF1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Multiplex function selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [af1](index.html) module"]
        pub struct AF1_SPEC;
        impl crate::RegisterSpec for AF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [af1::R](R) reader structure"]
        impl crate::Readable for AF1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [af1::W](W) writer structure"]
        impl crate::Writable for AF1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets AF1 to value 0"]
        impl crate::Resettable for AF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TISEL register accessor: an alias for `Reg<TISEL_SPEC>`"]
    pub type TISEL = crate::Reg<tisel::TISEL_SPEC>;
    #[doc = "Input selection"]
    pub mod tisel {
        #[doc = "Register `TISEL` reader"]
        pub struct R(crate::R<TISEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TISEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TISEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TISEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TISEL` writer"]
        pub struct W(crate::W<TISEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TISEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TISEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TISEL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Input selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tisel](index.html) module"]
        pub struct TISEL_SPEC;
        impl crate::RegisterSpec for TISEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tisel::R](R) reader structure"]
        impl crate::Readable for TISEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tisel::W](W) writer structure"]
        impl crate::Writable for TISEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TISEL to value 0"]
        impl crate::Resettable for TISEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DBER register accessor: an alias for `Reg<DBER_SPEC>`"]
    pub type DBER = crate::Reg<dber::DBER_SPEC>;
    #[doc = "DMA request type selection"]
    pub mod dber {
        #[doc = "Register `DBER` reader"]
        pub struct R(crate::R<DBER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DBER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DBER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DBER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DBER` writer"]
        pub struct W(crate::W<DBER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DBER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DBER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DBER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA request type selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dber](index.html) module"]
        pub struct DBER_SPEC;
        impl crate::RegisterSpec for DBER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dber::R](R) reader structure"]
        impl crate::Readable for DBER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dber::W](W) writer structure"]
        impl crate::Writable for DBER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DBER to value 0"]
        impl crate::Resettable for DBER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "General-purpose timer"]
pub struct TIM16 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM16 {}
impl TIM16 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim15::RegisterBlock = 0x4001_4400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim15::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM16 {
    type Target = tim15::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16").finish()
    }
}
#[doc = "General-purpose timer"]
pub use tim15 as tim16;
#[doc = "General-purpose timer"]
pub struct TIM17 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM17 {}
impl TIM17 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim15::RegisterBlock = 0x4001_4800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim15::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM17 {
    type Target = tim15::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM17").finish()
    }
}
#[doc = "General-purpose timer"]
pub use tim15 as tim17;
#[doc = "Analog-to-digital converter"]
pub struct ADC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC {}
impl ADC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc::RegisterBlock = 0x4001_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC {
    type Target = adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC").finish()
    }
}
#[doc = "Analog-to-digital converter"]
pub mod adc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Status register"]
        pub sr: crate::Reg<sr::SR_SPEC>,
        #[doc = "0x04 - ADC interrupt enable register"]
        pub ie: crate::Reg<ie::IE_SPEC>,
        #[doc = "0x08 - ADC control register 1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        #[doc = "0x0c - ADC control register 2"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
        #[doc = "0x10 - ADC sampling time register"]
        pub smpr: crate::Reg<smpr::SMPR_SPEC>,
        _reserved5: [u8; 0x04],
        #[doc = "0x18 - Analog watchdog higher threshold register"]
        pub htr: crate::Reg<htr::HTR_SPEC>,
        #[doc = "0x1c - Analog watchdog lower threshold register"]
        pub ltr: crate::Reg<ltr::LTR_SPEC>,
        #[doc = "0x20 - Regular group sequence register 1"]
        pub sqr1: crate::Reg<sqr1::SQR1_SPEC>,
        #[doc = "0x24 - Regular group sequence register 2"]
        pub sqr2: crate::Reg<sqr2::SQR2_SPEC>,
        #[doc = "0x28 - Regular group sequence register 3"]
        pub sqr3: crate::Reg<sqr3::SQR3_SPEC>,
        #[doc = "0x2c - Injected sequence register"]
        pub jsqr: crate::Reg<jsqr::JSQR_SPEC>,
        #[doc = "0x30 - Injected channel data register"]
        pub jdr: crate::Reg<jdr::JDR_SPEC>,
        #[doc = "0x34 - Regular channel data register"]
        pub dr: crate::Reg<dr::DR_SPEC>,
        #[doc = "0x38 - Differential/single-ended channel selection register"]
        pub diff: crate::Reg<diff::DIFF_SPEC>,
        #[doc = "0x3c - Signed/unsigned data selection register"]
        pub sign: crate::Reg<sign::SIGN_SPEC>,
        #[doc = "0x40 - Temperature and REF config register"]
        pub tsref: crate::Reg<tsref::TSREF_SPEC>,
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IE register accessor: an alias for `Reg<IE_SPEC>`"]
    pub type IE = crate::Reg<ie::IE_SPEC>;
    #[doc = "ADC interrupt enable register"]
    pub mod ie {
        #[doc = "Register `IE` reader"]
        pub struct R(crate::R<IE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IE` writer"]
        pub struct W(crate::W<IE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IE_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ie](index.html) module"]
        pub struct IE_SPEC;
        impl crate::RegisterSpec for IE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ie::R](R) reader structure"]
        impl crate::Readable for IE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ie::W](W) writer structure"]
        impl crate::Writable for IE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IE to value 0"]
        impl crate::Resettable for IE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "ADC control register 1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "ADC control register 2"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SMPR register accessor: an alias for `Reg<SMPR_SPEC>`"]
    pub type SMPR = crate::Reg<smpr::SMPR_SPEC>;
    #[doc = "ADC sampling time register"]
    pub mod smpr {
        #[doc = "Register `SMPR` reader"]
        pub struct R(crate::R<SMPR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SMPR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SMPR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SMPR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SMPR` writer"]
        pub struct W(crate::W<SMPR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SMPR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SMPR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SMPR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC sampling time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smpr](index.html) module"]
        pub struct SMPR_SPEC;
        impl crate::RegisterSpec for SMPR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [smpr::R](R) reader structure"]
        impl crate::Readable for SMPR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [smpr::W](W) writer structure"]
        impl crate::Writable for SMPR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SMPR to value 0"]
        impl crate::Resettable for SMPR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "HTR register accessor: an alias for `Reg<HTR_SPEC>`"]
    pub type HTR = crate::Reg<htr::HTR_SPEC>;
    #[doc = "Analog watchdog higher threshold register"]
    pub mod htr {
        #[doc = "Register `HTR` reader"]
        pub struct R(crate::R<HTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `HTR` writer"]
        pub struct W(crate::W<HTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<HTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<HTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<HTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Analog watchdog higher threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [htr](index.html) module"]
        pub struct HTR_SPEC;
        impl crate::RegisterSpec for HTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [htr::R](R) reader structure"]
        impl crate::Readable for HTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [htr::W](W) writer structure"]
        impl crate::Writable for HTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets HTR to value 0"]
        impl crate::Resettable for HTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LTR register accessor: an alias for `Reg<LTR_SPEC>`"]
    pub type LTR = crate::Reg<ltr::LTR_SPEC>;
    #[doc = "Analog watchdog lower threshold register"]
    pub mod ltr {
        #[doc = "Register `LTR` reader"]
        pub struct R(crate::R<LTR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LTR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LTR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LTR` writer"]
        pub struct W(crate::W<LTR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LTR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LTR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LTR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Analog watchdog lower threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ltr](index.html) module"]
        pub struct LTR_SPEC;
        impl crate::RegisterSpec for LTR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ltr::R](R) reader structure"]
        impl crate::Readable for LTR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ltr::W](W) writer structure"]
        impl crate::Writable for LTR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LTR to value 0"]
        impl crate::Resettable for LTR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SQR1 register accessor: an alias for `Reg<SQR1_SPEC>`"]
    pub type SQR1 = crate::Reg<sqr1::SQR1_SPEC>;
    #[doc = "Regular group sequence register 1"]
    pub mod sqr1 {
        #[doc = "Register `SQR1` reader"]
        pub struct R(crate::R<SQR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SQR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SQR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SQR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SQR1` writer"]
        pub struct W(crate::W<SQR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SQR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SQR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SQR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Regular group sequence register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sqr1](index.html) module"]
        pub struct SQR1_SPEC;
        impl crate::RegisterSpec for SQR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sqr1::R](R) reader structure"]
        impl crate::Readable for SQR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sqr1::W](W) writer structure"]
        impl crate::Writable for SQR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SQR1 to value 0"]
        impl crate::Resettable for SQR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SQR2 register accessor: an alias for `Reg<SQR2_SPEC>`"]
    pub type SQR2 = crate::Reg<sqr2::SQR2_SPEC>;
    #[doc = "Regular group sequence register 2"]
    pub mod sqr2 {
        #[doc = "Register `SQR2` reader"]
        pub struct R(crate::R<SQR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SQR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SQR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SQR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SQR2` writer"]
        pub struct W(crate::W<SQR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SQR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SQR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SQR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Regular group sequence register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sqr2](index.html) module"]
        pub struct SQR2_SPEC;
        impl crate::RegisterSpec for SQR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sqr2::R](R) reader structure"]
        impl crate::Readable for SQR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sqr2::W](W) writer structure"]
        impl crate::Writable for SQR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SQR2 to value 0"]
        impl crate::Resettable for SQR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SQR3 register accessor: an alias for `Reg<SQR3_SPEC>`"]
    pub type SQR3 = crate::Reg<sqr3::SQR3_SPEC>;
    #[doc = "Regular group sequence register 3"]
    pub mod sqr3 {
        #[doc = "Register `SQR3` reader"]
        pub struct R(crate::R<SQR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SQR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SQR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SQR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SQR3` writer"]
        pub struct W(crate::W<SQR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SQR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SQR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SQR3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Regular group sequence register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sqr3](index.html) module"]
        pub struct SQR3_SPEC;
        impl crate::RegisterSpec for SQR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sqr3::R](R) reader structure"]
        impl crate::Readable for SQR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sqr3::W](W) writer structure"]
        impl crate::Writable for SQR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SQR3 to value 0"]
        impl crate::Resettable for SQR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "JSQR register accessor: an alias for `Reg<JSQR_SPEC>`"]
    pub type JSQR = crate::Reg<jsqr::JSQR_SPEC>;
    #[doc = "Injected sequence register"]
    pub mod jsqr {
        #[doc = "Register `JSQR` reader"]
        pub struct R(crate::R<JSQR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<JSQR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<JSQR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<JSQR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `JSQR` writer"]
        pub struct W(crate::W<JSQR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<JSQR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<JSQR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<JSQR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Injected sequence register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jsqr](index.html) module"]
        pub struct JSQR_SPEC;
        impl crate::RegisterSpec for JSQR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [jsqr::R](R) reader structure"]
        impl crate::Readable for JSQR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [jsqr::W](W) writer structure"]
        impl crate::Writable for JSQR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets JSQR to value 0"]
        impl crate::Resettable for JSQR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "JDR register accessor: an alias for `Reg<JDR_SPEC>`"]
    pub type JDR = crate::Reg<jdr::JDR_SPEC>;
    #[doc = "Injected channel data register"]
    pub mod jdr {
        #[doc = "Register `JDR` reader"]
        pub struct R(crate::R<JDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<JDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<JDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<JDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Injected channel data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jdr](index.html) module"]
        pub struct JDR_SPEC;
        impl crate::RegisterSpec for JDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [jdr::R](R) reader structure"]
        impl crate::Readable for JDR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets JDR to value 0"]
        impl crate::Resettable for JDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DR register accessor: an alias for `Reg<DR_SPEC>`"]
    pub type DR = crate::Reg<dr::DR_SPEC>;
    #[doc = "Regular channel data register"]
    pub mod dr {
        #[doc = "Register `DR` reader"]
        pub struct R(crate::R<DR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Regular channel data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](index.html) module"]
        pub struct DR_SPEC;
        impl crate::RegisterSpec for DR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dr::R](R) reader structure"]
        impl crate::Readable for DR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets DR to value 0"]
        impl crate::Resettable for DR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIFF register accessor: an alias for `Reg<DIFF_SPEC>`"]
    pub type DIFF = crate::Reg<diff::DIFF_SPEC>;
    #[doc = "Differential/single-ended channel selection register"]
    pub mod diff {
        #[doc = "Register `DIFF` reader"]
        pub struct R(crate::R<DIFF_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIFF_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIFF_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIFF_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIFF` writer"]
        pub struct W(crate::W<DIFF_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIFF_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIFF_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIFF_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Differential/single-ended channel selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [diff](index.html) module"]
        pub struct DIFF_SPEC;
        impl crate::RegisterSpec for DIFF_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [diff::R](R) reader structure"]
        impl crate::Readable for DIFF_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [diff::W](W) writer structure"]
        impl crate::Writable for DIFF_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIFF to value 0"]
        impl crate::Resettable for DIFF_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SIGN register accessor: an alias for `Reg<SIGN_SPEC>`"]
    pub type SIGN = crate::Reg<sign::SIGN_SPEC>;
    #[doc = "Signed/unsigned data selection register"]
    pub mod sign {
        #[doc = "Register `SIGN` reader"]
        pub struct R(crate::R<SIGN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SIGN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SIGN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SIGN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SIGN` writer"]
        pub struct W(crate::W<SIGN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SIGN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SIGN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SIGN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Signed/unsigned data selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sign](index.html) module"]
        pub struct SIGN_SPEC;
        impl crate::RegisterSpec for SIGN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sign::R](R) reader structure"]
        impl crate::Readable for SIGN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sign::W](W) writer structure"]
        impl crate::Writable for SIGN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SIGN to value 0"]
        impl crate::Resettable for SIGN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TSREF register accessor: an alias for `Reg<TSREF_SPEC>`"]
    pub type TSREF = crate::Reg<tsref::TSREF_SPEC>;
    #[doc = "Temperature and REF config register"]
    pub mod tsref {
        #[doc = "Register `TSREF` reader"]
        pub struct R(crate::R<TSREF_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TSREF_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TSREF_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TSREF_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TSREF` writer"]
        pub struct W(crate::W<TSREF_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TSREF_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TSREF_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TSREF_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Temperature and REF config register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tsref](index.html) module"]
        pub struct TSREF_SPEC;
        impl crate::RegisterSpec for TSREF_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tsref::R](R) reader structure"]
        impl crate::Readable for TSREF_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tsref::W](W) writer structure"]
        impl crate::Writable for TSREF_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TSREF to value 0"]
        impl crate::Resettable for TSREF_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "UART1"]
pub struct UART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART1 {}
impl UART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart1::RegisterBlock = 0x4001_3800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART1 {
    type Target = uart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART1").finish()
    }
}
#[doc = "UART1"]
pub mod uart1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DR"]
        pub dr: crate::Reg<dr::DR_SPEC>,
        #[doc = "0x04 - RSR"]
        pub rsr: crate::Reg<rsr::RSR_SPEC>,
        _reserved2: [u8; 0x10],
        #[doc = "0x18 - FR"]
        pub fr: crate::Reg<fr::FR_SPEC>,
        _reserved3: [u8; 0x04],
        #[doc = "0x20 - ILPR"]
        pub ilpr: crate::Reg<ilpr::ILPR_SPEC>,
        #[doc = "0x24 - IBDR"]
        pub ibdr: crate::Reg<ibdr::IBDR_SPEC>,
        #[doc = "0x28 - FBDR"]
        pub fbdr: crate::Reg<fbdr::FBDR_SPEC>,
        #[doc = "0x2c - LCRH"]
        pub lcrh: crate::Reg<lcrh::LCRH_SPEC>,
        #[doc = "0x30 - CR"]
        pub cr: crate::Reg<cr::CR_SPEC>,
        #[doc = "0x34 - IFLS"]
        pub ifls: crate::Reg<ifls::IFLS_SPEC>,
        #[doc = "0x38 - IMSC"]
        pub imsc: crate::Reg<imsc::IMSC_SPEC>,
        #[doc = "0x3c - RIS"]
        pub ris: crate::Reg<ris::RIS_SPEC>,
        #[doc = "0x40 - RIS"]
        pub mis: crate::Reg<mis::MIS_SPEC>,
        #[doc = "0x44 - ICR"]
        pub icr: crate::Reg<icr::ICR_SPEC>,
        #[doc = "0x48 - DMACR"]
        pub dmacr: crate::Reg<dmacr::DMACR_SPEC>,
        _reserved14: [u8; 0x08],
        #[doc = "0x54 - CR2"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
        #[doc = "0x58 - BCNT"]
        pub bcnt: crate::Reg<bcnt::BCNT_SPEC>,
    }
    #[doc = "DR register accessor: an alias for `Reg<DR_SPEC>`"]
    pub type DR = crate::Reg<dr::DR_SPEC>;
    #[doc = "DR"]
    pub mod dr {
        #[doc = "Register `DR` reader"]
        pub struct R(crate::R<DR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "DR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](index.html) module"]
        pub struct DR_SPEC;
        impl crate::RegisterSpec for DR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dr::R](R) reader structure"]
        impl crate::Readable for DR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets DR to value 0"]
        impl crate::Resettable for DR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RSR register accessor: an alias for `Reg<RSR_SPEC>`"]
    pub type RSR = crate::Reg<rsr::RSR_SPEC>;
    #[doc = "RSR"]
    pub mod rsr {
        #[doc = "Register `RSR` reader"]
        pub struct R(crate::R<RSR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RSR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RSR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "RSR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rsr](index.html) module"]
        pub struct RSR_SPEC;
        impl crate::RegisterSpec for RSR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rsr::R](R) reader structure"]
        impl crate::Readable for RSR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets RSR to value 0"]
        impl crate::Resettable for RSR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FR register accessor: an alias for `Reg<FR_SPEC>`"]
    pub type FR = crate::Reg<fr::FR_SPEC>;
    #[doc = "FR"]
    pub mod fr {
        #[doc = "Register `FR` reader"]
        pub struct R(crate::R<FR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "FR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fr](index.html) module"]
        pub struct FR_SPEC;
        impl crate::RegisterSpec for FR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fr::R](R) reader structure"]
        impl crate::Readable for FR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets FR to value 0"]
        impl crate::Resettable for FR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ILPR register accessor: an alias for `Reg<ILPR_SPEC>`"]
    pub type ILPR = crate::Reg<ilpr::ILPR_SPEC>;
    #[doc = "ILPR"]
    pub mod ilpr {
        #[doc = "Register `ILPR` reader"]
        pub struct R(crate::R<ILPR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ILPR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ILPR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ILPR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ILPR` writer"]
        pub struct W(crate::W<ILPR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ILPR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ILPR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ILPR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ILPR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ilpr](index.html) module"]
        pub struct ILPR_SPEC;
        impl crate::RegisterSpec for ILPR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ilpr::R](R) reader structure"]
        impl crate::Readable for ILPR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ilpr::W](W) writer structure"]
        impl crate::Writable for ILPR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ILPR to value 0"]
        impl crate::Resettable for ILPR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IBDR register accessor: an alias for `Reg<IBDR_SPEC>`"]
    pub type IBDR = crate::Reg<ibdr::IBDR_SPEC>;
    #[doc = "IBDR"]
    pub mod ibdr {
        #[doc = "Register `IBDR` reader"]
        pub struct R(crate::R<IBDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IBDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IBDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IBDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IBDR` writer"]
        pub struct W(crate::W<IBDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IBDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IBDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IBDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IBDR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ibdr](index.html) module"]
        pub struct IBDR_SPEC;
        impl crate::RegisterSpec for IBDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ibdr::R](R) reader structure"]
        impl crate::Readable for IBDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ibdr::W](W) writer structure"]
        impl crate::Writable for IBDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IBDR to value 0"]
        impl crate::Resettable for IBDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FBDR register accessor: an alias for `Reg<FBDR_SPEC>`"]
    pub type FBDR = crate::Reg<fbdr::FBDR_SPEC>;
    #[doc = "FBDR"]
    pub mod fbdr {
        #[doc = "Register `FBDR` reader"]
        pub struct R(crate::R<FBDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FBDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FBDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FBDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FBDR` writer"]
        pub struct W(crate::W<FBDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FBDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FBDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FBDR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FBDR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbdr](index.html) module"]
        pub struct FBDR_SPEC;
        impl crate::RegisterSpec for FBDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fbdr::R](R) reader structure"]
        impl crate::Readable for FBDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fbdr::W](W) writer structure"]
        impl crate::Writable for FBDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FBDR to value 0"]
        impl crate::Resettable for FBDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LCRH register accessor: an alias for `Reg<LCRH_SPEC>`"]
    pub type LCRH = crate::Reg<lcrh::LCRH_SPEC>;
    #[doc = "LCRH"]
    pub mod lcrh {
        #[doc = "Register `LCRH` reader"]
        pub struct R(crate::R<LCRH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LCRH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LCRH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LCRH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LCRH` writer"]
        pub struct W(crate::W<LCRH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LCRH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LCRH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LCRH_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LCRH\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lcrh](index.html) module"]
        pub struct LCRH_SPEC;
        impl crate::RegisterSpec for LCRH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lcrh::R](R) reader structure"]
        impl crate::Readable for LCRH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lcrh::W](W) writer structure"]
        impl crate::Writable for LCRH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LCRH to value 0"]
        impl crate::Resettable for LCRH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR register accessor: an alias for `Reg<CR_SPEC>`"]
    pub type CR = crate::Reg<cr::CR_SPEC>;
    #[doc = "CR"]
    pub mod cr {
        #[doc = "Register `CR` reader"]
        pub struct R(crate::R<CR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR` writer"]
        pub struct W(crate::W<CR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](index.html) module"]
        pub struct CR_SPEC;
        impl crate::RegisterSpec for CR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr::R](R) reader structure"]
        impl crate::Readable for CR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr::W](W) writer structure"]
        impl crate::Writable for CR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR to value 0"]
        impl crate::Resettable for CR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IFLS register accessor: an alias for `Reg<IFLS_SPEC>`"]
    pub type IFLS = crate::Reg<ifls::IFLS_SPEC>;
    #[doc = "IFLS"]
    pub mod ifls {
        #[doc = "Register `IFLS` reader"]
        pub struct R(crate::R<IFLS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IFLS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IFLS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IFLS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IFLS` writer"]
        pub struct W(crate::W<IFLS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IFLS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IFLS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IFLS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IFLS\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ifls](index.html) module"]
        pub struct IFLS_SPEC;
        impl crate::RegisterSpec for IFLS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ifls::R](R) reader structure"]
        impl crate::Readable for IFLS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ifls::W](W) writer structure"]
        impl crate::Writable for IFLS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IFLS to value 0"]
        impl crate::Resettable for IFLS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IMSC register accessor: an alias for `Reg<IMSC_SPEC>`"]
    pub type IMSC = crate::Reg<imsc::IMSC_SPEC>;
    #[doc = "IMSC"]
    pub mod imsc {
        #[doc = "Register `IMSC` reader"]
        pub struct R(crate::R<IMSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IMSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IMSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IMSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IMSC` writer"]
        pub struct W(crate::W<IMSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IMSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IMSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IMSC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "IMSC\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imsc](index.html) module"]
        pub struct IMSC_SPEC;
        impl crate::RegisterSpec for IMSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [imsc::R](R) reader structure"]
        impl crate::Readable for IMSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [imsc::W](W) writer structure"]
        impl crate::Writable for IMSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IMSC to value 0"]
        impl crate::Resettable for IMSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RIS register accessor: an alias for `Reg<RIS_SPEC>`"]
    pub type RIS = crate::Reg<ris::RIS_SPEC>;
    #[doc = "RIS"]
    pub mod ris {
        #[doc = "Register `RIS` reader"]
        pub struct R(crate::R<RIS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RIS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RIS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "RIS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](index.html) module"]
        pub struct RIS_SPEC;
        impl crate::RegisterSpec for RIS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ris::R](R) reader structure"]
        impl crate::Readable for RIS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets RIS to value 0"]
        impl crate::Resettable for RIS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MIS register accessor: an alias for `Reg<MIS_SPEC>`"]
    pub type MIS = crate::Reg<mis::MIS_SPEC>;
    #[doc = "RIS"]
    pub mod mis {
        #[doc = "Register `MIS` reader"]
        pub struct R(crate::R<MIS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MIS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MIS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "RIS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](index.html) module"]
        pub struct MIS_SPEC;
        impl crate::RegisterSpec for MIS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [mis::R](R) reader structure"]
        impl crate::Readable for MIS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets MIS to value 0"]
        impl crate::Resettable for MIS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ICR register accessor: an alias for `Reg<ICR_SPEC>`"]
    pub type ICR = crate::Reg<icr::ICR_SPEC>;
    #[doc = "ICR"]
    pub mod icr {
        #[doc = "Register `ICR` writer"]
        pub struct W(crate::W<ICR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ICR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ICR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ICR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ICR\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](index.html) module"]
        pub struct ICR_SPEC;
        impl crate::RegisterSpec for ICR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [icr::W](W) writer structure"]
        impl crate::Writable for ICR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ICR to value 0"]
        impl crate::Resettable for ICR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMACR register accessor: an alias for `Reg<DMACR_SPEC>`"]
    pub type DMACR = crate::Reg<dmacr::DMACR_SPEC>;
    #[doc = "DMACR"]
    pub mod dmacr {
        #[doc = "Register `DMACR` reader"]
        pub struct R(crate::R<DMACR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMACR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMACR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMACR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMACR` writer"]
        pub struct W(crate::W<DMACR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMACR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMACR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMACR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMACR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmacr](index.html) module"]
        pub struct DMACR_SPEC;
        impl crate::RegisterSpec for DMACR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmacr::R](R) reader structure"]
        impl crate::Readable for DMACR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmacr::W](W) writer structure"]
        impl crate::Writable for DMACR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMACR to value 0"]
        impl crate::Resettable for DMACR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "CR2"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BCNT register accessor: an alias for `Reg<BCNT_SPEC>`"]
    pub type BCNT = crate::Reg<bcnt::BCNT_SPEC>;
    #[doc = "BCNT"]
    pub mod bcnt {
        #[doc = "Register `BCNT` reader"]
        pub struct R(crate::R<BCNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BCNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BCNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BCNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BCNT` writer"]
        pub struct W(crate::W<BCNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BCNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BCNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BCNT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "BCNT\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bcnt](index.html) module"]
        pub struct BCNT_SPEC;
        impl crate::RegisterSpec for BCNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [bcnt::R](R) reader structure"]
        impl crate::Readable for BCNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bcnt::W](W) writer structure"]
        impl crate::Writable for BCNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BCNT to value 0"]
        impl crate::Resettable for BCNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "UART2"]
pub struct UART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART2 {}
impl UART2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart1::RegisterBlock = 0x4000_4400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART2 {
    type Target = uart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART2").finish()
    }
}
#[doc = "UART2"]
pub use uart1 as uart2;
#[doc = "UART3"]
pub struct UART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART3 {}
impl UART3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart1::RegisterBlock = 0x4000_4800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART3 {
    type Target = uart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART3").finish()
    }
}
#[doc = "UART3"]
pub use uart1 as uart3;
#[doc = "UART4"]
pub struct UART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART4 {}
impl UART4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart1::RegisterBlock = 0x4000_4c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART4 {
    type Target = uart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
#[doc = "UART4"]
pub use uart1 as uart4;
#[doc = "I2S1"]
pub struct I2S1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2S1 {}
impl I2S1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2s1::RegisterBlock = 0x4001_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2s1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2S1 {
    type Target = i2s1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2S1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2S1").finish()
    }
}
#[doc = "I2S1"]
pub mod i2s1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DR"]
        pub dr: crate::Reg<dr::DR_SPEC>,
        #[doc = "0x04 - CR"]
        pub cr: crate::Reg<cr::CR_SPEC>,
        #[doc = "0x08 - PR"]
        pub pr: crate::Reg<pr::PR_SPEC>,
        #[doc = "0x0c - DIER"]
        pub dier: crate::Reg<dier::DIER_SPEC>,
        #[doc = "0x10 - SR"]
        pub sr: crate::Reg<sr::SR_SPEC>,
    }
    #[doc = "DR register accessor: an alias for `Reg<DR_SPEC>`"]
    pub type DR = crate::Reg<dr::DR_SPEC>;
    #[doc = "DR"]
    pub mod dr {
        #[doc = "Register `DR` reader"]
        pub struct R(crate::R<DR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DR` writer"]
        pub struct W(crate::W<DR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](index.html) module"]
        pub struct DR_SPEC;
        impl crate::RegisterSpec for DR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dr::R](R) reader structure"]
        impl crate::Readable for DR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dr::W](W) writer structure"]
        impl crate::Writable for DR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DR to value 0"]
        impl crate::Resettable for DR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR register accessor: an alias for `Reg<CR_SPEC>`"]
    pub type CR = crate::Reg<cr::CR_SPEC>;
    #[doc = "CR"]
    pub mod cr {
        #[doc = "Register `CR` reader"]
        pub struct R(crate::R<CR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR` writer"]
        pub struct W(crate::W<CR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](index.html) module"]
        pub struct CR_SPEC;
        impl crate::RegisterSpec for CR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr::R](R) reader structure"]
        impl crate::Readable for CR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr::W](W) writer structure"]
        impl crate::Writable for CR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR to value 0"]
        impl crate::Resettable for CR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PR register accessor: an alias for `Reg<PR_SPEC>`"]
    pub type PR = crate::Reg<pr::PR_SPEC>;
    #[doc = "PR"]
    pub mod pr {
        #[doc = "Register `PR` reader"]
        pub struct R(crate::R<PR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PR` writer"]
        pub struct W(crate::W<PR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PR_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "PR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pr](index.html) module"]
        pub struct PR_SPEC;
        impl crate::RegisterSpec for PR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pr::R](R) reader structure"]
        impl crate::Readable for PR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pr::W](W) writer structure"]
        impl crate::Writable for PR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PR to value 0"]
        impl crate::Resettable for PR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIER register accessor: an alias for `Reg<DIER_SPEC>`"]
    pub type DIER = crate::Reg<dier::DIER_SPEC>;
    #[doc = "DIER"]
    pub mod dier {
        #[doc = "Register `DIER` reader"]
        pub struct R(crate::R<DIER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIER` writer"]
        pub struct W(crate::W<DIER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIER_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DIER\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](index.html) module"]
        pub struct DIER_SPEC;
        impl crate::RegisterSpec for DIER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dier::R](R) reader structure"]
        impl crate::Readable for DIER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dier::W](W) writer structure"]
        impl crate::Writable for DIER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIER to value 0"]
        impl crate::Resettable for DIER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "SR"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "SR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "EFC"]
pub struct EFC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EFC {}
impl EFC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const efc::RegisterBlock = 0x0010_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const efc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EFC {
    type Target = efc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EFC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EFC").finish()
    }
}
#[doc = "EFC"]
pub mod efc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - CTRL"]
        pub ctrl: crate::Reg<ctrl::CTRL_SPEC>,
        #[doc = "0x04 - SEC"]
        pub sec: crate::Reg<sec::SEC_SPEC>,
        _reserved2: [u8; 0x04],
        #[doc = "0x0c - EFC_tERASE"]
        pub efc_t_erase: crate::Reg<efc_t_erase::EFC_TERASE_SPEC>,
        #[doc = "0x10 - EFC_tPROG"]
        pub efc_t_prog: crate::Reg<efc_t_prog::EFC_TPROG_SPEC>,
        #[doc = "0x14 - EFC_STATUS"]
        pub efc_status: crate::Reg<efc_status::EFC_STATUS_SPEC>,
        #[doc = "0x18 - INTSTATUS"]
        pub efc_intstatus: crate::Reg<efc_intstatus::EFC_INTSTATUS_SPEC>,
        #[doc = "0x1c - EFC_INTEN"]
        pub efc_inten: crate::Reg<efc_inten::EFC_INTEN_SPEC>,
    }
    #[doc = "CTRL register accessor: an alias for `Reg<CTRL_SPEC>`"]
    pub type CTRL = crate::Reg<ctrl::CTRL_SPEC>;
    #[doc = "CTRL"]
    pub mod ctrl {
        #[doc = "Register `CTRL` reader"]
        pub struct R(crate::R<CTRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTRL` writer"]
        pub struct W(crate::W<CTRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTRL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CTRL\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctrl](index.html) module"]
        pub struct CTRL_SPEC;
        impl crate::RegisterSpec for CTRL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctrl::R](R) reader structure"]
        impl crate::Readable for CTRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctrl::W](W) writer structure"]
        impl crate::Writable for CTRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTRL to value 0"]
        impl crate::Resettable for CTRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SEC register accessor: an alias for `Reg<SEC_SPEC>`"]
    pub type SEC = crate::Reg<sec::SEC_SPEC>;
    #[doc = "SEC"]
    pub mod sec {
        #[doc = "Register `SEC` writer"]
        pub struct W(crate::W<SEC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SEC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SEC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SEC_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "SEC\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sec](index.html) module"]
        pub struct SEC_SPEC;
        impl crate::RegisterSpec for SEC_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [sec::W](W) writer structure"]
        impl crate::Writable for SEC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SEC to value 0"]
        impl crate::Resettable for SEC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EFC_tERASE register accessor: an alias for `Reg<EFC_TERASE_SPEC>`"]
    pub type EFC_TERASE = crate::Reg<efc_t_erase::EFC_TERASE_SPEC>;
    #[doc = "EFC_tERASE"]
    pub mod efc_t_erase {
        #[doc = "Register `EFC_tERASE` reader"]
        pub struct R(crate::R<EFC_TERASE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EFC_TERASE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EFC_TERASE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EFC_TERASE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EFC_tERASE` writer"]
        pub struct W(crate::W<EFC_TERASE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EFC_TERASE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EFC_TERASE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EFC_TERASE_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "EFC_tERASE\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efc_t_erase](index.html) module"]
        pub struct EFC_TERASE_SPEC;
        impl crate::RegisterSpec for EFC_TERASE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [efc_t_erase::R](R) reader structure"]
        impl crate::Readable for EFC_TERASE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [efc_t_erase::W](W) writer structure"]
        impl crate::Writable for EFC_TERASE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EFC_tERASE to value 0"]
        impl crate::Resettable for EFC_TERASE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EFC_tPROG register accessor: an alias for `Reg<EFC_TPROG_SPEC>`"]
    pub type EFC_TPROG = crate::Reg<efc_t_prog::EFC_TPROG_SPEC>;
    #[doc = "EFC_tPROG"]
    pub mod efc_t_prog {
        #[doc = "Register `EFC_tPROG` reader"]
        pub struct R(crate::R<EFC_TPROG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EFC_TPROG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EFC_TPROG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EFC_TPROG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EFC_tPROG` writer"]
        pub struct W(crate::W<EFC_TPROG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EFC_TPROG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EFC_TPROG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EFC_TPROG_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "EFC_tPROG\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efc_t_prog](index.html) module"]
        pub struct EFC_TPROG_SPEC;
        impl crate::RegisterSpec for EFC_TPROG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [efc_t_prog::R](R) reader structure"]
        impl crate::Readable for EFC_TPROG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [efc_t_prog::W](W) writer structure"]
        impl crate::Writable for EFC_TPROG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EFC_tPROG to value 0"]
        impl crate::Resettable for EFC_TPROG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EFC_STATUS register accessor: an alias for `Reg<EFC_STATUS_SPEC>`"]
    pub type EFC_STATUS = crate::Reg<efc_status::EFC_STATUS_SPEC>;
    #[doc = "EFC_STATUS"]
    pub mod efc_status {
        #[doc = "Register `EFC_STATUS` reader"]
        pub struct R(crate::R<EFC_STATUS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EFC_STATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EFC_STATUS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EFC_STATUS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EFC_STATUS` writer"]
        pub struct W(crate::W<EFC_STATUS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EFC_STATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EFC_STATUS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EFC_STATUS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "EFC_STATUS\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efc_status](index.html) module"]
        pub struct EFC_STATUS_SPEC;
        impl crate::RegisterSpec for EFC_STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [efc_status::R](R) reader structure"]
        impl crate::Readable for EFC_STATUS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [efc_status::W](W) writer structure"]
        impl crate::Writable for EFC_STATUS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EFC_STATUS to value 0"]
        impl crate::Resettable for EFC_STATUS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EFC_INTSTATUS register accessor: an alias for `Reg<EFC_INTSTATUS_SPEC>`"]
    pub type EFC_INTSTATUS = crate::Reg<efc_intstatus::EFC_INTSTATUS_SPEC>;
    #[doc = "INTSTATUS"]
    pub mod efc_intstatus {
        #[doc = "Register `EFC_INTSTATUS` reader"]
        pub struct R(crate::R<EFC_INTSTATUS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EFC_INTSTATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EFC_INTSTATUS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EFC_INTSTATUS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EFC_INTSTATUS` writer"]
        pub struct W(crate::W<EFC_INTSTATUS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EFC_INTSTATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EFC_INTSTATUS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EFC_INTSTATUS_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "INTSTATUS\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efc_intstatus](index.html) module"]
        pub struct EFC_INTSTATUS_SPEC;
        impl crate::RegisterSpec for EFC_INTSTATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [efc_intstatus::R](R) reader structure"]
        impl crate::Readable for EFC_INTSTATUS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [efc_intstatus::W](W) writer structure"]
        impl crate::Writable for EFC_INTSTATUS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EFC_INTSTATUS to value 0"]
        impl crate::Resettable for EFC_INTSTATUS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EFC_INTEN register accessor: an alias for `Reg<EFC_INTEN_SPEC>`"]
    pub type EFC_INTEN = crate::Reg<efc_inten::EFC_INTEN_SPEC>;
    #[doc = "EFC_INTEN"]
    pub mod efc_inten {
        #[doc = "Register `EFC_INTEN` reader"]
        pub struct R(crate::R<EFC_INTEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EFC_INTEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EFC_INTEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EFC_INTEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EFC_INTEN` writer"]
        pub struct W(crate::W<EFC_INTEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EFC_INTEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EFC_INTEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EFC_INTEN_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "EFC_INTEN\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efc_inten](index.html) module"]
        pub struct EFC_INTEN_SPEC;
        impl crate::RegisterSpec for EFC_INTEN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [efc_inten::R](R) reader structure"]
        impl crate::Readable for EFC_INTEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [efc_inten::W](W) writer structure"]
        impl crate::Writable for EFC_INTEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EFC_INTEN to value 0"]
        impl crate::Resettable for EFC_INTEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "OPAMP"]
pub struct OPAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OPAMP {}
impl OPAMP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const opamp::RegisterBlock = 0x4001_0300 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const opamp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OPAMP {
    type Target = opamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OPAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OPAMP").finish()
    }
}
#[doc = "OPAMP"]
pub mod opamp {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - CSR1"]
        pub csr1: crate::Reg<csr1::CSR1_SPEC>,
        #[doc = "0x04 - CSR2"]
        pub csr2: crate::Reg<csr2::CSR2_SPEC>,
        #[doc = "0x08 - CSR3"]
        pub csr3: crate::Reg<csr3::CSR3_SPEC>,
    }
    #[doc = "CSR1 register accessor: an alias for `Reg<CSR1_SPEC>`"]
    pub type CSR1 = crate::Reg<csr1::CSR1_SPEC>;
    #[doc = "CSR1"]
    pub mod csr1 {
        #[doc = "Register `CSR1` reader"]
        pub struct R(crate::R<CSR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CSR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CSR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CSR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CSR1` writer"]
        pub struct W(crate::W<CSR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CSR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CSR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CSR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CSR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr1](index.html) module"]
        pub struct CSR1_SPEC;
        impl crate::RegisterSpec for CSR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [csr1::R](R) reader structure"]
        impl crate::Readable for CSR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [csr1::W](W) writer structure"]
        impl crate::Writable for CSR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CSR1 to value 0"]
        impl crate::Resettable for CSR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CSR2 register accessor: an alias for `Reg<CSR2_SPEC>`"]
    pub type CSR2 = crate::Reg<csr2::CSR2_SPEC>;
    #[doc = "CSR2"]
    pub mod csr2 {
        #[doc = "Register `CSR2` reader"]
        pub struct R(crate::R<CSR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CSR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CSR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CSR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CSR2` writer"]
        pub struct W(crate::W<CSR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CSR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CSR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CSR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CSR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr2](index.html) module"]
        pub struct CSR2_SPEC;
        impl crate::RegisterSpec for CSR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [csr2::R](R) reader structure"]
        impl crate::Readable for CSR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [csr2::W](W) writer structure"]
        impl crate::Writable for CSR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CSR2 to value 0"]
        impl crate::Resettable for CSR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CSR3 register accessor: an alias for `Reg<CSR3_SPEC>`"]
    pub type CSR3 = crate::Reg<csr3::CSR3_SPEC>;
    #[doc = "CSR3"]
    pub mod csr3 {
        #[doc = "Register `CSR3` reader"]
        pub struct R(crate::R<CSR3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CSR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CSR3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CSR3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CSR3` writer"]
        pub struct W(crate::W<CSR3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CSR3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CSR3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CSR3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CSR3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr3](index.html) module"]
        pub struct CSR3_SPEC;
        impl crate::RegisterSpec for CSR3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [csr3::R](R) reader structure"]
        impl crate::Readable for CSR3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [csr3::W](W) writer structure"]
        impl crate::Writable for CSR3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CSR3 to value 0"]
        impl crate::Resettable for CSR3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "COMP"]
pub struct COMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for COMP {}
impl COMP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const comp::RegisterBlock = 0x4001_0200 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const comp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for COMP {
    type Target = comp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for COMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("COMP").finish()
    }
}
#[doc = "COMP"]
pub mod comp {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - CR1"]
        pub cr1: crate::Reg<cr1::CR1_SPEC>,
        #[doc = "0x04 - CR2"]
        pub cr2: crate::Reg<cr2::CR2_SPEC>,
        #[doc = "0x08 - SR"]
        pub sr: crate::Reg<sr::SR_SPEC>,
    }
    #[doc = "CR1 register accessor: an alias for `Reg<CR1_SPEC>`"]
    pub type CR1 = crate::Reg<cr1::CR1_SPEC>;
    #[doc = "CR1"]
    pub mod cr1 {
        #[doc = "Register `CR1` reader"]
        pub struct R(crate::R<CR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR1` writer"]
        pub struct W(crate::W<CR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"]
        pub struct CR1_SPEC;
        impl crate::RegisterSpec for CR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr1::R](R) reader structure"]
        impl crate::Readable for CR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"]
        impl crate::Writable for CR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR1 to value 0"]
        impl crate::Resettable for CR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR2 register accessor: an alias for `Reg<CR2_SPEC>`"]
    pub type CR2 = crate::Reg<cr2::CR2_SPEC>;
    #[doc = "CR2"]
    pub mod cr2 {
        #[doc = "Register `CR2` reader"]
        pub struct R(crate::R<CR2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR2` writer"]
        pub struct W(crate::W<CR2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "CR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](index.html) module"]
        pub struct CR2_SPEC;
        impl crate::RegisterSpec for CR2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr2::R](R) reader structure"]
        impl crate::Readable for CR2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr2::W](W) writer structure"]
        impl crate::Writable for CR2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR2 to value 0"]
        impl crate::Resettable for CR2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
    pub type SR = crate::Reg<sr::SR_SPEC>;
    #[doc = "SR"]
    pub mod sr {
        #[doc = "Register `SR` reader"]
        pub struct R(crate::R<SR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "SR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](index.html) module"]
        pub struct SR_SPEC;
        impl crate::RegisterSpec for SR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sr::R](R) reader structure"]
        impl crate::Readable for SR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets SR to value 0"]
        impl crate::Resettable for SR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "DAC"]
    pub DAC: DAC,
    #[doc = "CAN1"]
    pub CAN1: CAN1,
    #[doc = "CAN2"]
    pub CAN2: CAN2,
    #[doc = "GPIO1"]
    pub GPIO1: GPIO1,
    #[doc = "GPIO2"]
    pub GPIO2: GPIO2,
    #[doc = "GPIO3"]
    pub GPIO3: GPIO3,
    #[doc = "EXTI"]
    pub EXTI: EXTI,
    #[doc = "WDT"]
    pub WDT: WDT,
    #[doc = "IWDT"]
    pub IWDT: IWDT,
    #[doc = "LPUART"]
    pub LPUART: LPUART,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "I2C2"]
    pub I2C2: I2C2,
    #[doc = "RTC"]
    pub RTC: RTC,
    #[doc = "PMU"]
    pub PMU: PMU,
    #[doc = "SCU"]
    pub SCU: SCU,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "SPI3"]
    pub SPI3: SPI3,
    #[doc = "SPI4"]
    pub SPI4: SPI4,
    #[doc = "TIM1"]
    pub TIM1: TIM1,
    #[doc = "TIM2"]
    pub TIM2: TIM2,
    #[doc = "TIM3"]
    pub TIM3: TIM3,
    #[doc = "TIM4"]
    pub TIM4: TIM4,
    #[doc = "TIM6"]
    pub TIM6: TIM6,
    #[doc = "TIM7"]
    pub TIM7: TIM7,
    #[doc = "TIM14"]
    pub TIM14: TIM14,
    #[doc = "TIM15"]
    pub TIM15: TIM15,
    #[doc = "TIM16"]
    pub TIM16: TIM16,
    #[doc = "TIM17"]
    pub TIM17: TIM17,
    #[doc = "ADC"]
    pub ADC: ADC,
    #[doc = "UART1"]
    pub UART1: UART1,
    #[doc = "UART2"]
    pub UART2: UART2,
    #[doc = "UART3"]
    pub UART3: UART3,
    #[doc = "UART4"]
    pub UART4: UART4,
    #[doc = "I2S1"]
    pub I2S1: I2S1,
    #[doc = "EFC"]
    pub EFC: EFC,
    #[doc = "OPAMP"]
    pub OPAMP: OPAMP,
    #[doc = "COMP"]
    pub COMP: COMP,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            DAC: DAC {
                _marker: PhantomData,
            },
            CAN1: CAN1 {
                _marker: PhantomData,
            },
            CAN2: CAN2 {
                _marker: PhantomData,
            },
            GPIO1: GPIO1 {
                _marker: PhantomData,
            },
            GPIO2: GPIO2 {
                _marker: PhantomData,
            },
            GPIO3: GPIO3 {
                _marker: PhantomData,
            },
            EXTI: EXTI {
                _marker: PhantomData,
            },
            WDT: WDT {
                _marker: PhantomData,
            },
            IWDT: IWDT {
                _marker: PhantomData,
            },
            LPUART: LPUART {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            I2C2: I2C2 {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            PMU: PMU {
                _marker: PhantomData,
            },
            SCU: SCU {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            SPI3: SPI3 {
                _marker: PhantomData,
            },
            SPI4: SPI4 {
                _marker: PhantomData,
            },
            TIM1: TIM1 {
                _marker: PhantomData,
            },
            TIM2: TIM2 {
                _marker: PhantomData,
            },
            TIM3: TIM3 {
                _marker: PhantomData,
            },
            TIM4: TIM4 {
                _marker: PhantomData,
            },
            TIM6: TIM6 {
                _marker: PhantomData,
            },
            TIM7: TIM7 {
                _marker: PhantomData,
            },
            TIM14: TIM14 {
                _marker: PhantomData,
            },
            TIM15: TIM15 {
                _marker: PhantomData,
            },
            TIM16: TIM16 {
                _marker: PhantomData,
            },
            TIM17: TIM17 {
                _marker: PhantomData,
            },
            ADC: ADC {
                _marker: PhantomData,
            },
            UART1: UART1 {
                _marker: PhantomData,
            },
            UART2: UART2 {
                _marker: PhantomData,
            },
            UART3: UART3 {
                _marker: PhantomData,
            },
            UART4: UART4 {
                _marker: PhantomData,
            },
            I2S1: I2S1 {
                _marker: PhantomData,
            },
            EFC: EFC {
                _marker: PhantomData,
            },
            OPAMP: OPAMP {
                _marker: PhantomData,
            },
            COMP: COMP {
                _marker: PhantomData,
            },
        }
    }
}
